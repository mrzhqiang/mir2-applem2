unit M2Share;

interface
uses
  Windows, Messages, Classes, SysUtils, StrUtils, StdCtrls, Graphics, RunSock, ZLIB,
  Envir, ItmUnit, Magic, Guild, Event,
  Castle, FrnEngn, UsrEngn, MudUtil, Grobal2, ObjBase, ObjRobot, ObjPlay,
  SyncObjs, IniFiles, SDK, WinSock,
  UnitManage, Common, {$IFDEF PLUGOPEN}PlugOfEngine, PlugOfMain, {$ENDIF}math, ObjNpc;

const

  g_sUpDateTime = '程序版本: v2021.1.0';

  TESTMODE = 0;
  nVersionType = 0;
  SOCKETTYPE = 1;
  nServerIndex = 0;

  sSTATUS_FAIL = '+FAIL/';
  sSTATUS_GOOD = '+GOOD/';

  MAXLEVEL = High(Word);
  MAXCHANGELEVEL = 1000;
  MAXGUILDLEVEL = 30;
  MAXWUXINLEVEL = 70;

  MAXSAYITEMCOUNT = 1000;

  MAXGMMAKEITEMNUM = 2000000000;

  ET_STONEMINE = 11;
  sENCYPTSCRIPTFLAG = ';+++++++----------';
  tM2Server = 3;
  PN_GETRGB = 'GETRGB';
  PN_GAMEDATALOG = 'GAMEDATALOG';

  SLAVEMAXLEVEL = 9;//宝宝最大等级
  //DEBUG = 1;
  CHECKNEWMSG = 0; //是否显示未处理的客户端消息

  NOEXCEPTION = 0; //不显异常
  TRYEXCEPTION = 1; //显示异常
  CATEXCEPTION = TRYEXCEPTION;

  DEMOCLIENT = 0; //是否演示客户端

  VERDEMO = 0;
  VERFREE = 1;
  VERSTD = 2;
  VEROEM = 3;
  VERPRO = 4;
  VERENT = 5;
  SoftVersion = VERPRO; //程序版本类型

  BDE = 0;
  ADO = 1;

  DBTYPE = BDE; //数据库连接方式，默认为BDE

  USELOCALCODE = 0; //使用本地代码
  USEREMOTECODE = 1;  //使用远程代码
  USECODE = USELOCALCODE;//USECode：使用的代码来自哪里

  RequestVersion = 5;  //请求版本号

  LF = 0;
  LD = 1;
  ZQ = 2;
  DUDU = 3;
  ZYL = 4;
  WL = 5;
  TEST = 53;

  VEROWNER = LF{WL};//版本所有者  20080302  LF--管理员列表不能输入IP地址,WL--要输入IP地址才能增加记录

  OEM = 0;
  OEM775 = 1;
  OEMVER = OEM;

  THREADENGINE = 0; //DB数据库SOCKET连接使用线程
  TIMERENGINE = 1; //DB数据库SOCKET连接使用控件
  DBSOCKETMODE = TIMERENGINE;//DBServer.exe发送信息模式
  IDSOCKETMODE = TIMERENGINE;//Loginsrv.exe发送信息模式
  USERENGINEMODE = TIMERENGINE;//使用引擎方式

  //最高可升级等级
  MAXUPLEVEL = High(Word) {65535};

  BODYLUCKUNIT = 5.0E3;

  HAM_ALL = 0;    //[攻击模式: 全体攻击]
  HAM_PEACE = 1;  //[攻击模式: 和平攻击]
  HAM_DEAR = 2;   //[攻击模式: 夫妻攻击]
  HAM_MASTER = 3; //[攻击模式: 师徒攻击]
  HAM_GROUP = 4;  //[攻击模式: 编组攻击]
  HAM_GUILD = 5;  //[攻击模式: 行会攻击]
  HAM_PKATTACK = 6;  //[攻击模式: 红名攻击]

  DEFHIT = 5;
  DEFSPEED = 15;
  WARR = 0;
  WIZARD = 1;
  TAOS = 2;

  MONSTER_SANDMOB = 3;
  MONSTER_ROCKMAN = 4;
  MONSTER_RON = 9;
  MONSTER_MINORNUMA = 18;
  ANIMAL_CHICKEN = 20;
  ANIMAL_DEER = 21;
  MONSTER_OMA = 23;
  MONSTER_OMAKNIGHT = 25;
  MONSTER_OMAWARRIOR = 27;
  MONSTER_SPITSPIDER = 30;
  MONSTER_STICK = 39;
  MONSTER_DUALAXE = 42;
  MONSTER_THONEDARK = 74;
  MONSTER_LIGHTZOMBI = 78;
  MONSTER_WHITESKELETON = 94;
  MONSTER_BEEQUEEN = 124;
  MONSTER_BEE = 125;
  MONSTER_MAGUNGSA = 143;
  MONSTER_SCULTURE1 = 145;
  MONSTER_SCULTURE2 = 148;
  MONSTER_SCULTUREKING = 152;
  MONSTER_ELFMONSTER = 161;
  MONSTER_ELFWARRIOR = 162;

  RESETLABEL = '$RESETLABEL';

  SUPREGUARD = 11;
  CHICKEN = 51;
  DEER = 52;
  WOLF = 53;
  TRAINER = 55;

  sMAN = 'MAN';
  sSUNRAISE = 'SUNRAISE';
  sDAY = 'DAY';
  sSUNSET = 'SUNSET';
  sNIGHT = 'NIGHT';
  sWARRIOR = 'WARRIOR';
  sWIZARD = 'WIZARD';
  sTAOS = 'TAOIST';
  sSUN = 'SUN';
  sMON = 'MON';
  sTUE = 'TUE';
  sWED = 'WED';
  sTHU = 'THU';
  sFRI = 'FRI';
  sSAT = 'SAT';

  sCHECK = 'CHECK';
  nCHECK = 1;
  sRANDOM = 'RANDOM';
  nRANDOM = 2;
  sGENDER = 'GENDER';
  nGENDER = 3;
  sCHECKLEVEL = 'CHECKLEVEL';
  nCHECKLEVEL = 4;
  sCHECKJOB = 'CHECKJOB';
  nCHECKJOB = 5;
  sCHECKBBCOUNT = 'CHECKBBCOUNT';
  nCHECKBBCOUNT = 6;
  sCHECKITEM = 'CHECKITEM';
  nCHECKITEM = 7;
  sCHECKITEMW = 'CHECKITEMW';
  nCHECKITEMW = 8;
  sCHECKGOLD = 'CHECKGOLD';
  nCHECKGOLD = 9;
  sCHECKDURA = 'CHECKDURA';
  nCHECKDURA = 10;
  sDAYOFWEEK = 'DAYOFWEEK';
  nDAYOFWEEK = 11;
  sHOUR = 'HOUR';
  nHOUR = 12;
  sMIN = 'MIN';
  nMIN = 13;
  sCHECKPKPOINT = 'CHECKPKPOINT';
  nCHECKPKPOINT = 14;
  sCHECKMONMAP = 'CHECKMONMAP';
  nCHECKMONMAP = 15;
  sCHECKHUM = 'CHECKHUM';
  nCHECKHUM = 16;
  sCHECKBAGGAGE = 'CHECKBAGGAGE';
  nCHECKBAGGAGE = 17;
  sEQUAL = 'EQUAL';
  nEQUAL = 18;
  sLARGE = 'LARGE';
  nLARGE = 19;
  sSMALL = 'SMALL';
  nSMALL = 20;
  sCHECKNAMELIST = 'CHECKNAMELIST';
  nCHECKNAMELIST = 21;
  sSC_ISGUILDMASTER = 'ISGUILDMASTER';
  nSC_ISGUILDMASTER = 22;
  sSC_ISCASTLEGUILD = 'ISCASTLEGUILD';
  nSC_ISCASTLEGUILD = 23;
  sSC_ISATTACKGUILD = 'ISATTACKGUILD';
  nSC_ISATTACKGUILD = 24;
  sSC_ISDEFENSEGUILD = 'ISDEFENSEGUILD';
  nSC_ISDEFENSEGUILD = 25;
  sSC_HASGUILD = 'HAVEGUILD';
  nSC_HASGUILD = 26;
  sSC_CHECKCASTLEDOOR = 'CHECKCASTLEDOOR';
  nSC_CHECKCASTLEDOOR = 27;

  sSC_ISDEFENSEALLYGUILD = 'ISDEFENSEALLYGUILD';
  nSC_ISDEFENSEALLYGUILD = 29;
  sSC_ISSYSOP = 'ISSYSOP';
  nSC_ISSYSOP = 30;
  sSC_ISADMIN = 'ISADMIN';
  nSC_ISADMIN = 31;
  sSC_CHECKGROUPCOUNT = 'CHECKGROUPCOUNT';
  nSC_CHECKGROUPCOUNT = 32;
  sCHECKACCOUNTLIST = 'CHECKACCOUNTLIST';
  nCHECKACCOUNTLIST = 33;
  sCHECKIPLIST = 'CHECKIPLIST';
  nCHECKIPLIST = 34;
  sSC_CHECKPOSEDIR = 'CHECKPOSEDIR';
  nSC_CHECKPOSEDIR = 35;
  sSC_CHECKPOSELEVEL = 'CHECKPOSELEVEL';
  nSC_CHECKPOSELEVEL = 36;
  sSC_CHECKPOSEGENDER = 'CHECKPOSEGENDER';
  nSC_CHECKPOSEGENDER = 37;
  sSC_CHECKLEVELEX = 'CHECKLEVELEX';
  nSC_CHECKLEVELEX = 38;
  sSC_CHECKBONUSPOINT = 'CHECKBONUSPOINT';
  nSC_CHECKBONUSPOINT = 39;
  sSC_CHECKMARRY = 'CHECKMARRY';
  nSC_CHECKMARRY = 40;
  sSC_CHECKPOSEMARRY = 'CHECKPOSEMARRY';
  nSC_CHECKPOSEMARRY = 41;
  sSC_CHECKMARRYCOUNT = 'CHECKMARRYCOUNT';
  nSC_CHECKMARRYCOUNT = 42;
  sSC_CHECKMASTER = 'CHECKMASTER';
  nSC_CHECKMASTER = 43;
  sSC_HAVEMASTER = 'HAVEMASTER';
  nSC_HAVEMASTER = 44;
  sSC_CHECKPOSEMASTER = 'CHECKPOSEMASTER';
  nSC_CHECKPOSEMASTER = 45;
  sSC_POSEHAVEMASTER = 'POSEHAVEMASTER';
  nSC_POSEHAVEMASTER = 46;
  sSC_CHECKISMASTER = 'CHECKISMASTER';
  nSC_CHECKISMASTER = 47;
  sSC_CHECKPOSEISMASTER = 'CHECKPOSEISMASTER';
  nSC_CHECKPOSEISMASTER = 48;
  sSC_CHECKNAMEIPLIST = 'CHECKNAMEIPLIST';
  nSC_CHECKNAMEIPLIST = 49;
  sSC_CHECKACCOUNTIPLIST = 'CHECKACCOUNTIPLIST';
  nSC_CHECKACCOUNTIPLIST = 50;
  sSC_CHECKSLAVECOUNT = 'CHECKSLAVECOUNT';
  nSC_CHECKSLAVECOUNT = 51;
  sSC_CHECKCASTLEMASTER = 'ISCASTLEMASTER';
  nSC_CHECKCASTLEMASTER = 52;
  sSC_ISNEWHUMAN = 'ISNEWHUMAN';
  nSC_ISNEWHUMAN = 53;
  sSC_CHECKMEMBERTYPE = 'CHECKMEMBERTYPE';
  nSC_CHECKMEMBERTYPE = 54;
  sSC_CHECKMEMBERLEVEL = 'CHECKMEMBERLEVEL';
  nSC_CHECKMEMBERLEVEL = 55;
  //  sSC_CHECKGAMEPOINT = 'CHECKGAMEPOINT';
  sSC_CHECKGAMEPOINT = 'CHECKGAMEGOLD';
  nSC_CHECKGAMEPOINT = 56;
  sSC_CHECKNAMELISTPOSITION = 'CHECKNAMELISTPOSITION';
  nSC_CHECKNAMELISTPOSITION = 57;
  sSC_CHECKGUILDLIST = 'CHECKGUILDLIST';
  nSC_CHECKGUILDLIST = 58;
  sSC_CHECKRENEWLEVEL = 'CHECKRENEWLEVEL';
  nSC_CHECKRENEWLEVEL = 59;
  sSC_CHECKSLAVELEVEL = 'CHECKSLAVELEVEL';
  nSC_CHECKSLAVELEVEL = 60;
  sSC_CHECKSLAVENAME = 'CHECKSLAVENAME';
  nSC_CHECKSLAVENAME = 61;
  sSC_CHECKCREDITPOINT = 'CHECKCREDITPOINT';
  nSC_CHECKCREDITPOINT = 62;
  sSC_CHECKOFGUILD = 'CHECKOFGUILD';
  nSC_CHECKOFGUILD = 63;
  sSC_CHECKUSEITEM = 'CHECKUSEITEM';
  nSC_CHECKUSEITEM = 64;
  sSC_CHECKBAGSIZE = 'CHECKBAGSIZE';
  nSC_CHECKBAGSIZE = 65;
  sSC_CHECKLISTCOUNT = 'CHECKLISTCOUNT';
  nSC_CHECKLISTCOUNT = 66;
  sSC_CHECKDC = 'CHECKDC';
  nSC_CHECKDC = 67;
  sSC_CHECKMC = 'CHECKMC';
  nSC_CHECKMC = 68;
  sSC_CHECKSC = 'CHECKSC';
  nSC_CHECKSC = 69;
  sSC_CHECKHP = 'CHECKHP';
  nSC_CHECKHP = 70;
  sSC_CHECKMP = 'CHECKMP';
  nSC_CHECKMP = 71;
  sSC_CHECKITEMTYPE = 'CHECKITEMTYPE';
  nSC_CHECKITEMTYPE = 72;
  sSC_CHECKEXP = 'CHECKEXP';
  nSC_CHECKEXP = 73;
  sSC_CHECKCASTLEGOLD = 'CHECKCASTLEGOLD';
  nSC_CHECKCASTLEGOLD = 74;
  sSC_CHECKBUILDPOINT = 'CHECKGUILDBUILDPOINT';
  nSC_CHECKBUILDPOINT = 75;
  sSC_CHECKAURAEPOINT = 'CHECKGUILDAURAEPOINT';
  nSC_CHECKAURAEPOINT = 76;
  sSC_CHECKSTABILITYPOINT = 'CHECKGUILDSTABILITYPOINT';
  nSC_CHECKSTABILITYPOINT = 77;
  sSC_CHECKFLOURISHPOINT = 'CHECKGUILDFLOURISHPOINT';
  nSC_CHECKFLOURISHPOINT = 78;
  sSC_CHECKCONTRIBUTION = 'CHECKCONTRIBUTION';
  nSC_CHECKCONTRIBUTION = 79;
  sSC_CHECKRANGEMONCOUNT = 'CHECKRANGEMONCOUNT';
  nSC_CHECKRANGEMONCOUNT = 80;
  sSC_CHECKITEMADDVALUE = 'CHECKITEMADDVALUE';
  nSC_CHECKITEMADDVALUE = 81;
  sSC_CHECKINMAPRANGE = 'CHECKINMAPRANGE';
  nSC_CHECKINMAPRANGE = 82;
  sSC_CASTLECHANGEDAY = 'CASTLECHANGEDAY';
  nSC_CASTLECHANGEDAY = 83;
  sSC_CASTLEWARDAY = 'CASTLEWARAY';
  nSC_CASTLEWARDAY = 84;
  sSC_ONLINELONGMIN = 'ONLINELONGMIN';
  nSC_ONLINELONGMIN = 85;
  sSC_CHECKGUILDCHIEFITEMCOUNT = 'CHECKGUILDCHIEFITEMCOUNT';
  nSC_CHECKGUILDCHIEFITEMCOUNT = 86;
  sSC_CHECKMAPHUMANCOUNT = 'CHECKMAPHUMANCOUNT';
  nSC_CHECKMAPHUMANCOUNT = 87;
  sSC_CHECKMAPMONCOUNT = 'CHECKMAPMONCOUNT';
  nSC_CHECKMAPMONCOUNT = 88;
  sSC_CHECKVAR = 'CHECKVAR';
  nSC_CHECKVAR = 89;
  sSC_CHECKSERVERNAME = 'CHECKSERVERNAME';
  nSC_CHECKSERVERNAME = 90;
  sCHECKMAPNAME = 'CHECKMAPNAME';
  nCHECKMAPNAME = 91;
  sINSAFEZONE = 'INSAFEZONE';
  nINSAFEZONE = 92;
  sCHECKSKILL = 'CHECKSKILL';
  nCHECKSKILL = 93;
  sSC_CHECKCONTAINSTEXT = 'CHECKCONTAINSTEXT';
  nSC_CHECKCONTAINSTEXT = 94;
  sSC_COMPARETEXT = 'COMPARETEXT';
  nSC_COMPARETEXT = 95;
  sSC_CHECKTEXTLIST = 'CHECKTEXTLIST';
  nSC_CHECKTEXTLIST = 96;
  sSC_ISGROUPMASTER = 'ISGROUPMASTER';
  nSC_ISGROUPMASTER = 97;
  sSC_CHECKCONTAINSTEXTLIST = 'CHECKCONTAINSTEXTLIST';
  nSC_CHECKCONTAINSTEXTLIST = 98;
  sSC_CHECKONLINE = 'CHECKONLINE';
  nSC_CHECKONLINE = 99;
  sSC_ISDUPMODE = 'ISDUPMODE';
  nSC_ISDUPMODE = 100;
  sSC_CHECKITEMCOUNT = 'CHECKITEMCOUNT';
  nSC_CHECKITEMCOUNT = 101;

  sSC_CHECKUSERDATE = 'CHECKUSERDATE';
  sSC_CHECKNAMEDATELIST = 'CHECKNAMEDATELIST';
  nSC_CHECKNAMEDATELIST = 102;
  sSC_CHECKCASTLESTATE = 'CHECKCASTLESTATE';
  nSC_CHECKCASTLESTATE = 103;
  sSC_CHECKMISSION = 'CHECKMISSION';
  nSC_CHECKMISSION = 104;
  sSC_CHECKMISSIONCOUNT = 'CHECKMISSIONCOUNT';
  nSC_CHECKMISSIONCOUNT = 105;
  sSC_CHECKMISSIONKILLMONCOUNT = 'CHECKMISSIONKILLMONCOUNT';
  nSC_CHECKMISSIONKILLMONCOUNT = 106;
  sSC_CHECKARITHMOMETERCOUNT = 'CHECKARITHMOMETERCOUNT';
  nSC_CHECKARITHMOMETERCOUNT = 107;
  sSC_CANMOVEECTYPE = 'CANMOVEECTYPE';
  nSC_CANMOVEECTYPE = 108;
  sSC_CHECKECTYPEMONCOUNT = 'CHECKECTYPEMONCOUNT';
  nSC_CHECKECTYPEMONCOUNT = 109;
  sSC_CHECKMAPQUEST = 'CHECKMAPQUEST';
  nSC_CHECKMAPQUEST = 110;
  sSC_CHECKGAMEDIAMOND = 'CHECKGAMEDIAMOND';
  nSC_CHECKGAMEDIAMOND = 111;
  sSC_CHECKGAMEGIRD = 'CHECKGAMEGIRD';
  nSC_CHECKGAMEGIRD = 112;
  sSC_CHECKEMAILOK = 'CHECKEMAILOK';
  nSC_CHECKEMAILOK = 113;
  sSC_ISUNDERWAR = 'ISUNDERWAR';
  nSC_ISUNDERWAR = 114;
  sSC_CHECKHUMORNPCRANGE = 'CHECKHUMORNPCRANGE';
  nSC_CHECKHUMORNPCRANGE = 115;
  sSC_CHECKGROUPJOBCOUNT = 'CHECKGROUPJOBCOUNT';
  nSC_CHECKGROUPJOBCOUNT = 116;
  sSC_CHECKPULLULATION = 'CHECKPULLULATION';
  nSC_CHECKPULLULATION = 117;
  sSC_CHECKGUILDLEVEL = 'CHECKGUILDLEVEL';
  nSC_CHECKGUILDLEVEL = 118;
  sSC_CHECKITEMSTRENGTHENCOUNT = 'CHECKITEMSTRENGTHENCOUNT';
  nSC_CHECKITEMSTRENGTHENCOUNT = 119;
  sSC_CHECKITEMFLUTECOUNT = 'CHECKITEMFLUTECOUNT';
  nSC_CHECKITEMFLUTECOUNT = 120;
  sSC_CHECKHUMWUXIN = 'CHECKHUMWUXIN';
  nSC_CHECKHUMWUXIN = 121;
  sSC_CHECKITEMWUXIN = 'CHECKITEMWUXIN';
  nSC_CHECKITEMWUXIN = 122;
  sSC_CHECKMAKEMAGICLEVEL = 'CHECKMAKEMAGICLEVEL';
  nSC_CHECKMAKEMAGICLEVEL = 123;
  sSC_CHECKGUILDISFULL = 'CHECKGUILDISFULL';
  nSC_CHECKGUILDISFULL = 124;
  sSC_CHECKSTRENGTHENCOUNT = 'CHECKSTRENGTHENCOUNT';
  nSC_CHECKSTRENGTHENCOUNT = 125;
  sSC_CHECKHORSELEVEL = 'CHECKHORSELEVEL';
  nSC_CHECKHORSELEVEL = 126;
  sSC_ISONHOUSE = 'ISONHOUSE';
  nSC_ISONHOUSE = 127;
  sSC_CHECKKILLMOBNAME = 'CHECKKILLMOBNAME';
  nSC_CHECKKILLMOBNAME = 128;
  sSC_CHECKMAPSAMEMONCOUNT = 'CHECKMAPSAMEMONCOUNT';
  nSC_CHECKMAPSAMEMONCOUNT = 129;
  sSC_CHECKHITMONNAME = 'CHECKHITMONNAME';
  nSC_CHECKHITMONNAME = 130;

  sSET = 'SET';
  nSET = 1;
  sTAKE = 'TAKE';
  nTAKE = 2;
  sSC_GIVE = 'GIVE';//给物品
  nSC_GIVE = 3;
  sTAKEW = 'TAKEW';
  nTAKEW = 4;
  sCLOSE = 'CLOSE';
  nCLOSE = 5;
  sRESET = 'RESET';
  nRESET = 6;
  sBREAK = 'BREAK';
  nBREAK = 7;
  sTIMERECALL = 'TIMERECALL';
  nTIMERECALL = 8;
  sSC_PARAM1 = 'PARAM1';
  nSC_PARAM1 = 9;
  sSC_PARAM2 = 'PARAM2';
  nSC_PARAM2 = 10;
  sSC_PARAM3 = 'PARAM3';
  nSC_PARAM3 = 11;
  sSC_PARAM4 = 'PARAM4';
  nSC_PARAM4 = 12;
  sSC_EXEACTION = 'EXEACTION';
  nSC_EXEACTION = 13;
  sMAPMOVE = 'MAPMOVE';
  nMAPMOVE = 14;
  sMAP = 'MAP';
  nMAP = 15;

  sMONGEN = 'MONGEN';
  nMONGEN = 17;
  sMONCLEAR = 'MONCLEAR';
  nMONCLEAR = 18;
  sMOV = 'MOV';
  nMOV = 19;
  sINC = 'INC';
  nINC = 20;
  sDEC = 'DEC';
  nDEC = 21;
  sSUM = 'SUM';
  nSUM = 22;
  sBREAKTIMERECALL = 'BREAKTIMERECALL';
  nBREAKTIMERECALL = 23;

  sPKPOINT = 'PKPOINT';
  nPKPOINT = 25;
  sSC_RECALLMOB = 'RECALLMOB';
  nSC_RECALLMOB = 26;
  sKICK = 'KICK';
  nKICK = 27;
  sMOVR = 'MOVR';
  nMOVR = 28;
  sEXCHANGEMAP = 'EXCHANGEMAP';
  nEXCHANGEMAP = 29;
  sRECALLMAP = 'RECALLMAP';
  nRECALLMAP = 30;
  sADDBATCH = 'ADDBATCH';
  nADDBATCH = 31;
  sBATCHDELAY = 'BATCHDELAY';
  nBATCHDELAY = 32;
  sBATCHMOVE = 'BATCHMOVE';
  nBATCHMOVE = 33;
  sPLAYDICE = 'PLAYDICE';
  nPLAYDICE = 34;
  sSC_PASTEMAP = 'PASTEMAP';
  sSC_LOADGEN = 'LOADGEN';
  sADDNAMELIST = 'ADDNAMELIST';
  nADDNAMELIST = 35;
  sDELNAMELIST = 'DELNAMELIST';
  nDELNAMELIST = 36;
  sADDGUILDLIST = 'ADDGUILDLIST';
  nADDGUILDLIST = 37;
  sDELGUILDLIST = 'DELGUILDLIST';
  nDELGUILDLIST = 38;
  sADDACCOUNTLIST = 'ADDACCOUNTLIST';
  nADDACCOUNTLIST = 39;
  sDELACCOUNTLIST = 'DELACCOUNTLIST';
  nDELACCOUNTLIST = 40;
  sADDIPLIST = 'ADDIPLIST';
  nADDIPLIST = 41;
  sDELIPLIST = 'DELIPLIST';
  nDELIPLIST = 42;
  sSETMISSION = 'SETMISSION';
  nSETMISSION = 43;
  sRESETMISSION = 'RESETMISSION';
  nRESETMISSION = 44;
  sGOTO = 'GOTO';
  nGOTO = 45;
  sSC_HAIRSTYLE = 'HAIRSTYLE';
  nSC_HAIRSTYLE = 46;
  sSC_RECALLGROUPMEMBERS = 'RECALLGROUPMEMBERS';
  nSC_RECALLGROUPMEMBERS = 47;
  sSC_MAPTING = 'MAPTING';
  nSC_MAPTING = 48;
  sSC_REPAIRITEM = 'REPAIRITEM';
  nSC_REPAIRITEM = 49;
  sSC_GROUPMOVE = 'GROUPMOVE';
  nSC_GROUPMOVE = 50;
  sSC_CLEARNAMELIST = 'CLEARNAMELIST';
  nSC_CLEARNAMELIST = 51;
  sSC_KILLSLAVE = 'KILLSLAVE';
  nSC_KILLSLAVE = 52;
  sSC_CHANGEGENDER = 'CHANGEGENDER';
  nSC_CHANGEGENDER = 53;
  sSC_CHANGELEVEL = 'CHANGELEVEL';
  nSC_CHANGELEVEL = 54;
  sSC_MARRY = 'MARRY';
  nSC_MARRY = 55;
  sSC_UNMARRY = 'UNMARRY';
  nSC_UNMARRY = 56;
  sSC_GETMARRY = 'GETMARRY';
  nSC_GETMARRY = 57;
  //sSC_GETMASTER = 'GETMASTER';
  //nSC_GETMASTER = 58;
  sSC_CLEARSKILL = 'CLEARSKILL';
  nSC_CLEARSKILL = 59;
  sSC_DELNOJOBSKILL = 'DELNOJOBSKILL';
  nSC_DELNOJOBSKILL = 60;
  sSC_DELSKILL = 'DELSKILL';//删除技能
  nSC_DELSKILL = 61;
  sSC_ADDSKILL = 'ADDSKILL';//增加技能 支持英雄
  nSC_ADDSKILL = 62;
  sSC_SKILLLEVEL = 'SKILLLEVEL';//调整技能等级
  nSC_SKILLLEVEL = 63;
  sSC_CHANGEPKPOINT = 'CHANGEPKPOINT';
  nSC_CHANGEPKPOINT = 64;
  sSC_CHANGEEXP = 'CHANGEEXP';
  nSC_CHANGEEXP = 65;
  sSC_CHANGEJOB = 'CHANGEJOB';
  nSC_CHANGEJOB = 66;
  sSC_MISSION = 'MISSION';
  nSC_MISSION = 67;
  sSC_MOBPLACE = 'MOBPLACE';
  nSC_MOBPLACE = 68;
  sSC_SETMEMBERTYPE = 'SETMEMBERTYPE';
  nSC_SETMEMBERTYPE = 69;
  sSC_SETMEMBERLEVEL = 'SETMEMBERLEVEL';
  nSC_SETMEMBERLEVEL = 70;
  sSC_CHANGENAMECOLOR = 'CHANGENAMECOLOR';
  nSC_CHANGENAMECOLOR = 71;
  sSC_RENEWLEVEL = 'RENEWLEVEL';
  nSC_RENEWLEVEL = 72;
  sSC_KILLMONEXPRATE = 'KILLMONEXPRATE'; //调整杀怪经验的倍数
  nSC_KILLMONEXPRATE = 73;
  sSC_POWERRATE = 'POWERRATE';
  nSC_POWERRATE = 74;
  sSC_CHANGEMODE = 'CHANGEMODE';//改变管理模式(不检查权限)
  nSC_CHANGEMODE = 75;
  sSC_CHANGEPERMISSION = 'CHANGEPERMISSION';
  nSC_CHANGEPERMISSION = 76;
  sSC_KILL = 'KILL';
  nSC_KILL = 77;

  sSC_BONUSPOINT = 'BONUSPOINT';
  nSC_BONUSPOINT = 79;
  sSC_RESTRENEWLEVEL = 'RESTRENEWLEVEL';
  nSC_RESTRENEWLEVEL = 80;
  sSC_DELMARRY = 'DELMARRY';
  nSC_DELMARRY = 81;
  { sSC_DELMASTER = 'DELMASTER';
   nSC_DELMASTER = 82;    }
  sSC_MASTER = 'MASTER';
  nSC_MASTER = 83;
  sSC_UNMASTER = 'UNMASTER';
  nSC_UNMASTER = 84;
  sSC_CREDITPOINT = 'CREDITPOINT';
  nSC_CREDITPOINT = 85;
  sSC_CLEARNEEDITEMS = 'CLEARNEEDITEMS';
  nSC_CLEARNEEDITEMS = 86;
  sSC_CLEARMAKEITEMS = 'CLEARMAKEITEMS';
  nSC_CLEARMAEKITEMS = 87;
  sSC_SETSENDMSGFLAG = 'SETSENDMSGFLAG';
  nSC_SETSENDMSGFLAG = 88;
  sSC_UPGRADEITEMS = 'UPGRADEITEM';
  nSC_UPGRADEITEMS = 89;
  sSC_UPGRADEITEMSEX = 'UPGRADEITEMEX';
  nSC_UPGRADEITEMSEX = 90;
  sSC_MONGENEX = 'MONGENEX';
  nSC_MONGENEX = 91;
  sSC_CLEARMAPMON = 'CLEARMAPMON';
  nSC_CLEARMAPMON = 92;
  sSC_SETMAPMODE = 'SETMPAMODE';
  nSC_SETMAPMODE = 93;
  //sSC_GAMEPOINT = 'GAMEPOINT';
  sSC_GAMEPOINT = 'GAMEGOLD';
  nSC_GAMEPOINT = 94;
  sSC_PKZONE = 'PKZONE';
  nSC_PKZONE = 95;
  sSC_RESTBONUSPOINT = 'RESTBONUSPOINT';
  nSC_RESTBONUSPOINT = 96;
  sSC_TAKECASTLEGOLD = 'TAKECASTLEGOLD';
  nSC_TAKECASTLEGOLD = 97;
  sSC_HUMANHP = 'HUMANHP';
  nSC_HUMANHP = 98;
  sSC_HUMANMP = 'HUMANMP';
  nSC_HUMANMP = 99;
  sSC_BUILDPOINT = 'GUILDBUILDPOINT';
  nSC_BUILDPOINT = 100;
  sSC_AURAEPOINT = 'GUILDAURAEPOINT';
  nSC_AURAEPOINT = 101;
  sSC_STABILITYPOINT = 'GUILDSTABILITYPOINT';
  nSC_STABILITYPOINT = 102;
  sSC_FLOURISHPOINT = 'GUILDFLOURISHPOINT';
  nSC_FLOURISHPOINT = 103;
  sSC_OPENMAGICBOX = 'OPENITEMBOX';
  nSC_OPENMAGICBOX = 104;
  sSC_SETRANKLEVELNAME = 'SETRANKLEVELNAME';
  nSC_SETRANKLEVELNAME = 105;
  sSC_GMEXECUTE = 'GMEXECUTE';
  nSC_GMEXECUTE = 106;
  sSC_GUILDCHIEFITEMCOUNT = 'GUILDCHIEFITEMCOUNT';
  nSC_GUILDCHIEFITEMCOUNT = 107;
  sSC_MOBFIREBURN = 'MOBFIREBURN';
  nSC_MOBFIREBURN = 108;
  sSC_MESSAGEBOX = 'MESSAGEBOX';
  nSC_MESSAGEBOX = 109;
  sSC_SETSCRIPTFLAG = 'SETSCRIPTFLAG';
  nSC_SETSCRIPTFLAG = 110;
  sSC_SETAUTOGETEXP = 'SETAUTOGETEXP';
  nSC_SETAUTOGETEXP = 111;
  sSC_VAR = 'VAR';
  nSC_VAR = 112;
  sSC_LOADVAR = 'LOADVAR';
  nSC_LOADVAR = 113;
  sSC_SAVEVAR = 'SAVEVAR';
  nSC_SAVEVAR = 114;
  sSC_CALCVAR = 'CALCVAR';
  nSC_CALCVAR = 115;
  sOFFLINEPLAY = 'OFFLINEPLAY';
  nOFFLINEPLAY = 116;
  sKICKOFFLINE = 'KICKOFFLINE';
  nKICKOFFLINE = 117;
  sSC_DYNAMICGIVE = 'DYNAMICGIVE';
  nSC_DYNAMICGIVE = 118;
  sSC_DELAYGOTO = 'DELAYGOTO';
  nSC_DELAYGOTO = 119;
  sSC_CLEARDELAYGOTO = 'CLEARDELAYGOTO';
  nSC_CLEARDELAYGOTO = 120;

  sSC_ANSIREPLACETEXT = 'ANSIREPLACETEXT';
  nSC_ANSIREPLACETEXT = 122;
  sSC_ADDTEXTLIST = 'ADDTEXTLIST';
  nSC_ADDTEXTLIST = 123;
  sSC_DELTEXTLIST = 'DELTEXTLIST';
  nSC_DELTEXTLIST = 124;
  sSC_GROUPMAPMOVE = 'GROUPMAPMOVE';
  nSC_GROUPMAPMOVE = 125;
  sSC_RECALLHUMAN = 'RECALLHUMAN';
  nSC_RECALLHUMAN = 126;
  sSC_REGOTO = 'REGOTO';
  nSC_REGOTO = 127;
  sSC_GUILDMOVE = 'GUILDMOVE';
  nSC_GUILDMOVE = 128;
  sSC_GUILDMAPMOVE = 'GUILDMAPMOVE';
  nSC_GUILDMAPMOVE = 129;
  sSC_RANDOMMOVE = 'RANDOMMOVE';
  nSC_RANDOMMOVE = 130;
  sSC_USEBONUSPOINT = 'USEBONUSPOINT';
  nSC_USEBONUSPOINT = 131;
  sSC_TAKECOUNT = 'TAKECOUNT';
  nSC_TAKECOUNT = 132;
  sSC_DIV = 'DIV';
  nSC_DIV = 133;
  sSC_MUL = 'MUL';
  nSC_MUL = 134;
  sSC_PERCENT = 'PERCENT';
  nSC_PERCENT = 135;

  sSC_SENDMSG = 'SENDMSG';
  sSC_LINEMSG = 'LINEMSG';
  nSC_LINEMSG = 136;

  sSC_ADDUSERDATE = 'ADDUSERDATE';
  sSC_ADDNAMEDATELIST = 'ADDNAMEDATELIST';
  nSC_ADDNAMEDATELIST = 137;

  sSC_DELUSERDATE = 'DELUSERDATE';
  sSC_DELNAMEDATELIST = 'DELNAMEDATELIST';
  nSC_DELNAMEDATELIST = 138;
  sSC_STORAGETIMECHANGE = 'STORAGETIMECHANGE';
  nSC_STORAGETIMECHANGE = 139;
  sSC_ADDMISSION = 'ADDMISSION';
  nSC_ADDMISSION = 140;
  sSC_DELMISSION = 'DELMISSION';
  nSC_DELMISSION = 141;
  sSC_UPDATEMISSION = 'UPDATEMISSION';
  nSC_UPDATEMISSION = 142;
  sSC_CHANGEMISSIONKILLMONCOUNT = 'CHANGEMISSIONKILLMONCOUNT';
  nSC_CHANGEMISSIONKILLMONCOUNT = 143;
  sSC_CHANGEARITHMOMETERCOUNT = 'CHANGEARITHMOMETERCOUNT';
  nSC_CHANGEARITHMOMETERCOUNT = 144;
  sSC_SHOWEFFECT = 'SHOWEFFECT';
  nSC_SHOWEFFECT = 145;
  sSC_AUTOMOVE = 'AUTOMOVE';
  nSC_AUTOMOVE = 146;
  sSC_CHANGEGIVEITEM = 'CHANGEGIVEITEM';
  nSC_CHANGEGIVEITEM = 147;
  sSC_MOBMACHINERYEVENT = 'MOBMACHINERYEVENT';
  nSC_MOBMACHINERYEVENT = 148;
  sSC_CLEARMACHINERYEVENT = 'CLEARMACHINERYEVENT';
  nSC_CLEARMACHINERYEVENT = 149;
  sSC_CREATEECTYPE = 'CREATEECTYPE';
  nSC_CREATEECTYPE = 150;
  sSC_MOVEECTYPE = 'MOVEECTYPE';
  nSC_MOVEECTYPE = 151;
  sSC_MOBECTYPEMON = 'MOBECTYPEMON';
  nSC_MOBECTYPEMON = 152;
  sSC_CLEARECTYPEMON = 'CLEARECTYPEMON';
  nSC_CLEARECTYPEMON = 153;
  sSC_SETMAPQUEST = 'SETMAPQUEST';
  nSC_SETMAPQUEST = 154;
  sSC_RESETMAPQUEST = 'RESETMAPQUEST';
  nSC_RESETMAPQUEST = 155;
  sSC_OPENBOX = 'OPENBOX';
  nSC_OPENBOX = 156;
  sSC_CHANGEGAMEDIAMOND = 'CHANGEGAMEDIAMOND';
  nSC_CHANGEGAMEDIAMOND = 157;
  sSC_CHANGEGAMEGIRD = 'CHANGEGAMEGIRD';
  nSC_CHANGEGAMEGIRD = 158;
  sSC_GETRANDOMNAME = 'GETRANDOMNAME';
  nSC_GETRANDOMNAME = 159;
  sSC_MOBSLAVE = 'MOBSLAVE';
  nSC_MOBSLAVE = 160;
  sSC_CLEARLIST = 'CLEARLIST';
  nSC_CLEARLIST = 161;
  sSC_HOOKOBJECT = 'HOOKOBJECT';
  nSC_HOOKOBJECT = 162;
  sSC_REFSHOWNAME = 'REFSHOWNAME';
  nSC_REFSHOWNAME = 163;
  sSC_SETEFFIGYSTATE = 'SETEFFIGYSTATE';
  nSC_SETEFFIGYSTATE = 164;
  sSC_STARTWALLCONQUESTWAR = 'STARTWALLCONQUESTWAR';
  nSC_STARTWALLCONQUESTWAR = 165;
  sSC_SETGUAGEBAR = 'SETGUAGEBAR';
  nSC_SETGUAGEBAR = 166;
  sSC_ADDMAKEMAGIC = 'ADDMAKEMAGIC';
  nSC_ADDMAKEMAGIC = 167;
  sSC_ADDRANDOMMAPGATE = 'ADDRANDOMMAPGATE';
  nSC_ADDRANDOMMAPGATE = 168;
  sSC_DELRANDOMMAPGATE = 'DELRANDOMMAPGATE';
  nSC_DELRANDOMMAPGATE = 169;
  sSC_GETLARGESSGOLD = 'GETLARGESSGOLD';
  nSC_GETLARGESSGOLD = 170;
  sSC_UPDATEMISSIONTIME = 'UPDATEMISSIONTIME';
  nSC_UPDATEMISSIONTIME = 171;
  sSC_RESETNAKEDABILPOINT = 'RESETNAKEDABILPOINT';
  nSC_RESETNAKEDABILPOINT = 172;
  sSC_CHANGEPULLULATION = 'CHANGEPULLULATION';
  nSC_CHANGEPULLULATION = 173;
  sSC_SETLIMITEXPLEVEL = 'SETLIMITEXPLEVEL';
  nSC_SETLIMITEXPLEVEL = 174;
  sSC_CHANGEGUILDLEVEL = 'CHANGEGUILDLEVEL';
  nSC_CHANGEGUILDLEVEL = 175;
  sSC_HCALL = 'HCALL';
  nSC_HCALL = 176;
  sSC_CREATEGROUPFAIL = 'CREATEGROUPFAIL';
  nSC_CREATEGROUPFAIL = 177;
  sSC_HOOKITEM = 'HOOKITEM';
  nSC_HOOKITEM = 178;
  sSC_CHANGENAKEDCOUNT = 'CHANGENAKEDCOUNT';
  nSC_CHANGENAKEDCOUNT = 179;
  sSC_CHANGEHUMWUXIN = 'CHANGEHUMWUXIN';
  nSC_CHANGEHUMWUXIN = 180;
  sSC_CHANGEMAKEMAGICLEVEL = 'CHANGEMAKEMAGICLEVEL';
  nSC_CHANGEMAKEMAGICLEVEL = 181;
  sSC_ADDGUILDMEMBER = 'ADDGUILDMEMBER';
  nSC_ADDGUILDMEMBER = 182;
  sSC_CHANGEMAKEMAGICPOINT = 'CHANGEMAKEMAGICPOINT';
  nSC_CHANGEMAKEMAGICPOINT = 183;
  sSC_OPENURL = 'OPENURL';
  nSC_OPENURL = 184;
  sSC_CHANGEHUMABILITY = 'CHANGEHUMABILITY';
  nSC_CHANGEHUMABILITY = 185;
  sSC_SENDCENTERMSG = 'SENDCENTERMSG';
  nSC_SENDCENTERMSG = 186;
  sSC_DARE = 'DARE';
  nSC_DARE = 187;
  sSC_SENDEMAIL = 'SENDEMAIL';
  nSC_SENDEMAIL = 188;
  sSC_MOD = 'MOD';
  nSC_MOD = 189;
  sSC_SETHUMICON = 'SETHUMICON';
  nSC_SETHUMICON = 190;
  sSC_CLEARSENDCENTERMSG = 'CLEARSENDCENTERMSG';
  nSC_CLEARSENDCENTERMSG = 191;
  sSC_TAKEOFFITEM = 'TAKEOFFITEM';
  nSC_TAKEOFFITEM = 192;

                   //m_nMakeMagicPoint
  sSL_SENDMSG = '@@sendmsg';

  sSUPERREPAIRFAIL = '@fail_s_repair';
  sREPAIR = '@repair';
  sSUPERREPAIR = '@s_repair';

  sBUY = '@buy';//买物品
  sBINDBUY = '@BindBuy';
  sSELL = '@sell';//卖物品
  sMAKEDURG = '@makedrug';//炼药
  sPRICES = '@prices';
  sSTORAGE = '@storage';//存仓库
  sSTORAGEPASS = '@storagepass';
  //  sGETBACK = '@getback';

  sARMSTRENGTHEN = '@ArmStrengthen';
  sARMUNSEAL = '@ArmUnseal';
  sARMREMOVESTONE = '@ArmRemoveStone';
  sARMABILITYMOVE = '@ArmAbilityMove';
  sINPUTINTEGER = '@@InputInteger';
  sINPUTSTRING = '@@InputString';
  sUPGRADENOW = '@upgradenow';//升级物品
  sGETBACKUPGNOW = '@getbackupgnow';

  {sBIGSTORAGE = '@bigstorage';
  sBIGGETBACK = '@biggetback';

  sGETPREVIOUSPAGE = '@getpreviouspage';
  sGETNEXTPAGE = '@getnextpage';    }

  sEXIT = '@exit';
  sBACK = '@back';
  sMAIN = '@main';
  sFAILMAIN = '~@main';

  sUSEITEMNAME = '@@useitemname';

  sGETSELLGOLD = '@getsellgold';
  sSELLOFF = '@selloff';
  sBUYOFF = '@buyoff';
  sRMST = '@@rmst';
  sofflinemsg = '@@offlinemsg';//挂机自动回复

  sstartdealgold = '@startdealgold'; //元宝转帐
  sdealgold = '@@dealgold';

  sBUILDGUILDNOW = '@@buildguildnow';
  sSCL_GUILDWAR = '@@guildwar';
  sDONATE = '@@donate';
  sREQUESTCASTLEWAR = '@requestcastlewarnow';

  sCASTLENAME = '@@castlename';//城堡改名
  sWITHDRAWAL = '@@withdrawal';//沙巴克取回资金
  sRECEIPTS = '@@receipts';//沙巴克存资金
  sOPENMAINDOOR = '@openmaindoor';//沙巴克开门
  sCLOSEMAINDOOR = '@closemaindoor';//沙巴克关门
  sREPAIRDOORNOW = '@repairdoornow';//马上修复城门
  sREPAIRWALLNOW1 = '@repairwallnow1';//修城墙一
  sREPAIRWALLNOW2 = '@repairwallnow2';//修城墙二
  sREPAIRWALLNOW3 = '@repairwallnow3';//修城墙三
  sHIREARCHERNOW = '@hirearchernow';
  sHIREGUARDNOW = '@hireguardnow';
  sHIREGUARDOK = '@hireguardok';
  sMarket_Def = 'Market_Def\';
  sGuardRule_NormalNow = '@guardrule_normalnow';
  sGuardRule_PKAttack = '@guardrule_pkattack';

  sNpc_def = 'Npc_def\';

  SPLAYOFFLINE = '@PLAYOFFLINE';
  NPLAYOFFLINE = 0;
  //  SSUPERREPAIROK = '~@S_REPAIR';
  //  NSUPERREPAIROK = 1;
   // SREPAIROK = '~@REPAIR';
  //  NREPAIROK = 2;
  SMARRYERROR = '@MARRYERROR';
  NMARRYERROR = 3;
  SMASTERERROR = '@MASTERERROR';
  NMASTERERROR = 4;
  SMARRYCHECKDIR = '@MARRYCHECKDIR';
  NMARRYCHECKDIR = 5;
  SHUMANTYPEERR = '@HUMANTYPEERR';
  NHUMANTYPEERR = 6;
  SSTARTMARRY = '@STARTMARRY';
  NSTARTMARRY = 7;
  SMARRYSEXERR = '@MARRYSEXERR';
  NMARRYSEXERR = 8;
  SMARRYDIRERR = '@MARRYDIRERR';
  NMARRYDIRERR = 9;
  SWATEMARRY = '@WATEMARRY';
  NWATEMARRY = 10;
  SREVMARRY = '@REVMARRY';
  NREVMARRY = 11;
  SENDMARRY = '@ENDMARRY';
  NENDMARRY = 12;
  SENDMARRYFAIL = '@ENDMARRYFAIL';
  NENDMARRYFAIL = 13;
  SMASTERCHECKDIR = '@MASTERCHECKDIR';
  NMASTERCHECKDIR = 14;
  SSTARTGETMASTER = '@STARTGETMASTER';
  NSTARTGETMASTER = 15;
  SMASTERDIRERR = '@MASTERDIRERR';
  NMASTERDIRERR = 16;
  SWATEMASTER = '@WATEMASTER';
  NWATEMASTER = 17;
  SREVMASTER = '@REVMASTER';
  NREVMASTER = 18;
  SENDMASTER = '@ENDMASTER';
  NENDMASTER = 19;
  SSTARTMASTER = '@STARTMASTER';
  NSTARTMASTER = 20;
  SENDMASTERFAIL = '@ENDMASTERFAIL';
  NENDMASTERFAIL = 21;
  SEXEMARRYFAIL = '@EXEMARRYFAIL';
  NEXEMARRYFAIL = 22;
  SUNMARRYCHECKDIR = '@UNMARRYCHECKDIR';
  NUNMARRYCHECKDIR = 23;
  SUNMARRYTYPEERR = '@UNMARRYTYPEERR';
  NUNMARRYTYPEERR = 24;
  SSTARTUNMARRY = '@STARTUNMARRY';
  NSTARTUNMARRY = 25;
  SUNMARRYEND = '@UNMARRYEND';
  NUNMARRYEND = 26;
  SWATEUNMARRY = '@WATEUNMARRY';
  NWATEUNMARRY = 27;
  SEXEMASTERFAIL = '@EXEMASTERFAIL';
  NEXEMASTERFAIL = 28;
  SUNMASTERCHECKDIR = '@UNMASTERCHECKDIR';
  NUNMASTERCHECKDIR = 29;
  SUNMASTERTYPEERR = '@UNMASTERTYPEERR';
  NUNMASTERTYPEERR = 30;
  SUNISMASTER = '@UNISMASTER';
  NUNISMASTER = 31;
  SUNMASTERERROR = '@UNMASTERERROR';
  NUNMASTERERROR = 32;
  SSTARTUNMASTER = '@STARTUNMASTER';
  NSTARTUNMASTER = 33;
  SWATEUNMASTER = '@WATEUNMASTER';
  NWATEUNMASTER = 34;
  SUNMASTEREND = '@UNMASTEREND';
  NUNMASTEREND = 35;
  SREVUNMASTER = '@REVUNMASTER';
  NREVUNMASTER = 36;
  SSUPREQUEST_OK = '~@REQUEST_OK';
  NSUPREQUEST_OK = 37;
  SMEMBER = '@MEMBER';
  NMEMBER = 38;
  SPLAYRECONNECTION = '@PLAYRECONNECTION';
  NPLAYRECONNECTION = 39;
  SLOGIN = '@LOGIN';
  NLOGIN = 40;
  SPLAYDIE = '@PLAYDIE';
  NPLAYDIE = 41;
  SKILLPLAY = '@KILLPLAY';
  NKILLPLAY = 42;
  SPLAYLEVELUP = '@PLAYLEVELUP';
  NPLAYLEVELUP = 43;
  SSTDMODEFUNC = '@STDMODEFUNC';
  NSTDMODEFUNC = 44;
  SPLAYLEVELUPEX = '@PLAYLEVELUPEX';
  NPLAYLEVELUPEX = 45;
  SKILLMONSTER = '@KILLMONSTER';
  NKILLMONSTER = 46;
  SUSERCMD = '@USERCMD';
  NUSERCMD = 47;
  SCREATEECTYPE_IN = '@CREATEECTYPE_IN';
  NCREATEECTYPE_IN = 48;
  SCREATEECTYPE_OK = '@CREATEECTYPE_OK';
  NCREATEECTYPE_OK = 49;
  SCREATEECTYPE_FAIL = '@CREATEECTYPE_FAIL';
  NCREATEECTYPE_FAIL = 50;
  SCLEARMISSION = '@CLEARMISSION';
  NCLEARMISSION = 51;
  SRESUME = '@RESUME';
  NRESUME = 52;
  SGETLARGESSGOLD_OK = '@GETLARGESSGOLD_OK';
  NGETLARGESSGOLD_OK = 53;
  SGETLARGESSGOLD_FAIL = '@GETLARGESSGOLD_FAIL';
  NGETLARGESSGOLD_FAIL = 54;
  SGETLARGESSGOLD_ERROR = '@GETLARGESSGOLD_ERROR';
  NGETLARGESSGOLD_ERROR = 55;
  SMASTERISPRENTICE = '@MASTERISPRENTICE';
  NMASTERISPRENTICE = 56;
  SMASTERISFULL = '@MASTERISFULL';
  NMASTERISFULL = 57;
  SGROUPCREATE = '@GROUPCREATE';
  NGROUPCREATE = 58;
  SSTARTGROUP = '@STARTGROUP';
  NSTARTGROUP = 59;
  SJOINGROUP = '@JOINGROUP';
  NJOINGROUP = 60;
  SSPEEDCLOSE = '@SPEEDCLOSE';
  NSPEEDCLOSE = 61;

  SUPGRADENOW_OK = '~@UPGRADENOW_OK';
  NUPGRADENOW_OK = 62;
  SUPGRADENOW_ING = '~@UPGRADENOW_ING';
  NUPGRADENOW_ING = 63;
  SUPGRADENOW_FAIL = '~@UPGRADENOW_FAIL';
  NUPGRADENOW_FAIL = 64;
  SGETBACKUPGNOW_OK = '~@GETBACKUPGNOW_OK';
  NGETBACKUPGNOW_OK = 65;
  SGETBACKUPGNOW_ING = '~@GETBACKUPGNOW_ING';
  NGETBACKUPGNOW_ING = 66;
  SGETBACKUPGNOW_FAIL = '~@GETBACKUPGNOW_FAIL';
  NGETBACKUPGNOW_FAIL = 67;
  SGETBACKUPGNOW_BAGFULL = '~@getbackupgnow_bagfull';
  NGETBACKUPGNOW_BAGFULL = 68;

  STAKEONITEMS = '@TAKEONITEM';
  NTAKEONITEMS = 69;
  STAKEOFFITEMS = '@TAKEOFFITEM';
  NTAKEOFFITEMS = 70;
  SPLAYREVIVE = '@PLAYREVIVE';
  NPLAYREVIVE = 71;
  SMOVEABILITY_OK = '@MOVEABILITY_OK';
  NMOVEABILITY_OK = 72;
  SMOVEABILITY_FAIL = '@MOVEABILITY_FAIL';
  NMOVEABILITY_FAIL = 73;
  SASSEMBLEALL = '@ASSEMBLEALL';
  NASSEMBLEALL = 74;
  SASSEMBLEWEAPON = '@ASSEMBLEWEAPON';
  NASSEMBLEWEAPON = 75;
  SASSEMBLEDRESS = '@ASSEMBLEDRESS';
  NASSEMBLEDRESS = 76;
  SASSEMBLEHELMET = '@ASSEMBLEHELMET';
  NASSEMBLEHELMET = 77;
  SASSEMBLENECKLACE = '@ASSEMBLENECKLACE';
  NASSEMBLENECKLACE = 78;
  SASSEMBLERING = '@ASSEMBLERING';
  NASSEMBLERING = 79;
  SASSEMBLEARMRING = '@ASSEMBLEARMRING';
  NASSEMBLEARMRING = 80;
  SASSEMBLEBELT = '@ASSEMBLEBELT';
  NASSEMBLEBELT = 81;
  SASSEMBLEBOOT = '@ASSEMBLEBOOT';
  NASSEMBLEBOOT = 82;
  SASSEMBLEFAIL = '@ASSEMBLEFAIL';
  NASSEMBLEFAIL = 83;
  SICONBUTTON = '@ICONBUTTON';
  NICONBUTTON = 84;

  SASSEMBLE = '@ASSEMBLE';
  SMAGSELFFUNC = '@MAGSELFFUNC';
  SMAGTAGFUNC = '@MAGTAGFUNC';
  SMAGTAGFUNCEX = '@MAGTAGFUNCEX';
  SMAGMONFUNC = '@MAGMONFUNC';

  // 对应 Mir200\!Setup.txt 中的 ServerName 项
  // 或者 Mir200\String.ini 中的 ServerIP 项
  // 服务器名称
  sVAR_SERVERNAME = '$SERVERNAME';
  tVAR_SERVERNAME = '<$1>';
  nVAR_SERVERNAME = 1;
  // 服务器IP
  sVAR_SERVERIP = '$SERVERIP';
  tVAR_SERVERIP = '<$2>';
  nVAR_SERVERIP = 2;
  // 网站网址
  sVAR_WEBSITE = '$WEBSITE';
  tVAR_WEBSITE = '<$3>';
  nVAR_WEBSITE = 3;
  // 论坛网址
  sVAR_BBSSITE = '$BBSSITE';
  tVAR_BBSSITE = '<$4>';
  nVAR_BBSSITE = 4;
  // 客户端程序下载地址
  sVAR_CLIENTDOWNLOAD = '$CLIENTDOWNLOAD';
  tVAR_CLIENTDOWNLOAD = '<$5>';
  nVAR_CLIENTDOWNLOAD = 5;
  // 联系QQ
  sVAR_QQ = '$QQ';
  tVAR_QQ = '<$6>';
  nVAR_QQ = 6;
  // 联系手机
  sVAR_PHONE = '$PHONE';
  tVAR_PHONE = '<$7>';
  nVAR_PHONE = 7;
  // 银行账户0
  sVAR_BANKACCOUNT0 = '$BANKACCOUNT0';
  tVAR_BANKACCOUNT0 = '<$8>';
  nVAR_BANKACCOUNT0 = 8;
  // 银行账户1
  sVAR_BANKACCOUNT1 = '$BANKACCOUNT1';
  tVAR_BANKACCOUNT1 = '<$9>';
  nVAR_BANKACCOUNT1 = 9;
  // 银行账户2，以此类推
  sVAR_BANKACCOUNT2 = '$BANKACCOUNT2';
  tVAR_BANKACCOUNT2 = '<$10>';
  nVAR_BANKACCOUNT2 = 10;
  sVAR_BANKACCOUNT3 = '$BANKACCOUNT3';
  tVAR_BANKACCOUNT3 = '<$11>';
  nVAR_BANKACCOUNT3 = 11;
  sVAR_BANKACCOUNT4 = '$BANKACCOUNT4';
  tVAR_BANKACCOUNT4 = '<$12>';
  nVAR_BANKACCOUNT4 = 12;
  sVAR_BANKACCOUNT5 = '$BANKACCOUNT5';
  tVAR_BANKACCOUNT5 = '<$13>';
  nVAR_BANKACCOUNT5 = 13;
  sVAR_BANKACCOUNT6 = '$BANKACCOUNT6';
  tVAR_BANKACCOUNT6 = '<$14>';
  nVAR_BANKACCOUNT6 = 14;
  sVAR_BANKACCOUNT7 = '$BANKACCOUNT7';
  tVAR_BANKACCOUNT7 = '<$15>';
  nVAR_BANKACCOUNT7 = 15;
  sVAR_BANKACCOUNT8 = '$BANKACCOUNT8';
  tVAR_BANKACCOUNT8 = '<$16>';
  nVAR_BANKACCOUNT8 = 16;
  sVAR_BANKACCOUNT9 = '$BANKACCOUNT9';
  tVAR_BANKACCOUNT9 = '<$17>';
  nVAR_BANKACCOUNT9 = 17;
  // 元宝名称 对应 Mir200\!Setup.txt 中 GameGold 项
  sVAR_GAMEGOLDNAME = '$GAMEGOLDNAME';
  tVAR_GAMEGOLDNAME = '<$18>';
  nVAR_GAMEGOLDNAME = 18;
  // 点卷名称
  sVAR_GAMEPOINTNAME = '$GAMEPOINTNAME';
  tVAR_GAMEPOINTNAME = '<$19>';
  nVAR_GAMEPOINTNAME = 19;
  // 在线总人数：在线+离线挂机的总人数
  sVAR_USERCOUNT = '$USERCOUNT';
  tVAR_USERCOUNT = '<$20>';
  nVAR_USERCOUNT = 20;
  // 当前时间：格式:2012年10月8日,星期三,20:28:36
  sVAR_DATETIME = '$DATETIME';
  tVAR_DATETIME = '<$21>';
  nVAR_DATETIME = 21;
  // 角色名称
  sVAR_USERNAME = '$USERNAME';
  tVAR_USERNAME = '<$22>';
  nVAR_USERNAME = 22;
  // 地图名称
  sVAR_MAPNAME = '$MAPNAME';
  tVAR_MAPNAME = '<$23>';
  nVAR_MAPNAME = 23;
  // 行会名称
  sVAR_GUILDNAME = '$GUILDNAME';
  tVAR_GUILDNAME = '<$24>';
  nVAR_GUILDNAME = 24;
  // 行会职位名称
  sVAR_RANKNAME = '$RANKNAME';
  tVAR_RANKNAME = '<$25>';
  nVAR_RANKNAME = 25;
  // 等级
  sVAR_LEVEL = '$LEVEL';
  tVAR_LEVEL = '<$26>';
  nVAR_LEVEL = 26;
  // 生命值
  sVAR_HP = '$HP';
  tVAR_HP = '<$27>';
  nVAR_HP = 27;
  // 最大生命值
  sVAR_MAXHP = '$MAXHP';
  tVAR_MAXHP = '<$28>';
  nVAR_MAXHP = 28;
  // 魔法值
  sVAR_MP = '$MP';
  tVAR_MP = '<$29>';
  nVAR_MP = 29;
  // 最大魔法值
  sVAR_MAXMP = '$MAXMP';
  tVAR_MAXMP = '<$30>';
  nVAR_MAXMP = 30;
  // 防御力
  sVAR_AC = '$AC';
  tVAR_AC = '<$31>';
  nVAR_AC = 31;
  // 最大防御力
  sVAR_MAXAC = '$MAXAC';
  tVAR_MAXAC = '<$32>';
  nVAR_MAXAC = 32;
  // 魔法防御力
  sVAR_MAC = '$MAC';
  tVAR_MAC = '<$33>';
  nVAR_MAC = 33;
  // 最大魔法防御力
  sVAR_MAXMAC = '$MAXMAC';
  tVAR_MAXMAC = '<$34>';
  nVAR_MAXMAC = 34;
  // 攻击力
  sVAR_DC = '$DC';
  tVAR_DC = '<$35>';
  nVAR_DC = 35;
  // 最大攻击力
  sVAR_MAXDC = '$MAXDC';
  tVAR_MAXDC = '<$36>';
  nVAR_MAXDC = 36;
  // 魔法力
  sVAR_MC = '$MC';
  tVAR_MC = '<$37>';
  nVAR_MC = 37;
  // 最大魔法力
  sVAR_MAXMC = '$MAXMC';
  tVAR_MAXMC = '<$38>';
  nVAR_MAXMC = 38;
  // 道术
  sVAR_SC = '$SC';
  tVAR_SC = '<$39>';
  nVAR_SC = 39;
  // 最大道术
  sVAR_MAXSC = '$MAXSC';
  tVAR_MAXSC = '<$40>';
  nVAR_MAXSC = 40;
  // 当前已有经验
  sVAR_EXP = '$EXP';
  tVAR_EXP = '<$41>';
  nVAR_EXP = 41;
  // 升级所需经验
  sVAR_MAXEXP = '$MAXEXP';
  tVAR_MAXEXP = '<$42>';
  nVAR_MAXEXP = 42;
  // PK 点数
  sVAR_PKPOINT = '$PKPOINT';
  tVAR_PKPOINT = '<$43>';
  nVAR_PKPOINT = 43;
  // 声望点数
  sVAR_CREDITPOINT = '$CREDITPOINT';
  tVAR_CREDITPOINT = '<$44>';
  nVAR_CREDITPOINT = 44;
  // 金币数量（显示格式：当前包裹金币/可携带最大金币数量）
  sVAR_GOLDCOUNT = '$GOLDCOUNT';
  tVAR_GOLDCOUNT = '<$45>';
  nVAR_GOLDCOUNT = 45;
  // 元宝数量
  sVAR_GAMEGOLD = '$GAMEGOLD';
  tVAR_GAMEGOLD = '<$46>';
  nVAR_GAMEGOLD = 46;
  // 点卷数量
  sVAR_GAMEPOINT = '$GAMEPOINT';
  tVAR_GAMEPOINT = '<$47>';
  nVAR_GAMEPOINT = 47;
  // 登录时间
  sVAR_LOGINTIME = '$LOGINTIME';
  tVAR_LOGINTIME = '<$48>';
  nVAR_LOGINTIME = 48;
  // 登录时长
  sVAR_LOGINLONG = '$LOGINLONG';
  tVAR_LOGINLONG = '<$49>';
  nVAR_LOGINLONG = 49;
  // 衣服
  sVAR_DRESS = '$DRESS';
  tVAR_DRESS = '<$50>';
  nVAR_DRESS = 50;
  // 武器
  sVAR_WEAPON = '$WEAPON';
  tVAR_WEAPON = '<$51>';
  nVAR_WEAPON = 51;
  // 勋章
  sVAR_RIGHTHAND = '$RIGHTHAND';
  tVAR_RIGHTHAND = '<$52>';
  nVAR_RIGHTHAND = 52;
  // 头盔
  sVAR_HELMET = '$HELMET';
  tVAR_HELMET = '<$53>';
  nVAR_HELMET = 53;
  // 项链
  sVAR_NECKLACE = '$NECKLACE';
  tVAR_NECKLACE = '<$54>';
  nVAR_NECKLACE = 54;
  // 右手戒指
  sVAR_RING_R = '$RING_R';
  tVAR_RING_R = '<$55>';
  nVAR_RING_R = 55;
  // 左手戒指
  sVAR_RING_L = '$RING_L';
  tVAR_RING_L = '<$56>';
  nVAR_RING_L = 56;
  // 右手手镯
  sVAR_ARMRING_R = '$ARMRING_R';
  tVAR_ARMRING_R = '<$57>';
  nVAR_ARMRING_R = 57;
  // 左手手镯
  sVAR_ARMRING_L = '$ARMRING_L';
  tVAR_ARMRING_L = '<$58>';
  nVAR_ARMRING_L = 58;
  // 护身符
  sVAR_BUJUK = '$BUJUK';
  tVAR_BUJUK = '<$59>';
  nVAR_BUJUK = 59;
  // 腰带
  sVAR_BELT = '$BELT';
  tVAR_BELT = '<$60>';
  nVAR_BELT = 60;
  // 鞋子
  sVAR_BOOTS = '$BOOTS';
  tVAR_BOOTS = '<$61>';
  nVAR_BOOTS = 61;
  // 宝石
  sVAR_CHARM = '$CHARM';
  tVAR_CHARM = '<$62>';
  nVAR_CHARM = 62;
  // 马牌
  sVAR_HOUSE = '$HOUSE';
  tVAR_HOUSE = '<$63>';
  nVAR_HOUSE = 63;
  // 道具（传音号角、传送符等）
  sVAR_CIMELIA = '$CIMELIA';
  tVAR_CIMELIA = '<$64>';
  nVAR_CIMELIA = 64;
  // 玩家 IP
  sVAR_IPADDR = '$IPADDR';
  tVAR_IPADDR = '<$65>';
  nVAR_IPADDR = 65;
  // 玩家所在地
  sVAR_IPLOCAL = '$IPLOCAL';
  tVAR_IPLOCAL = '<$66>';
  nVAR_IPLOCAL = 66;
  // 行会建设值
  sVAR_GUILDBUILDPOINT = '$GUILDBUILDPOINT';
  tVAR_GUILDBUILDPOINT = '<$67>';
  nVAR_GUILDBUILDPOINT = 67;
  // 行会人气值
  sVAR_GUILDAURAEPOINT = '$GUILDAURAEPOINT';
  tVAR_GUILDAURAEPOINT = '<$68>';
  nVAR_GUILDAURAEPOINT = 68;
  // 行号安定值
  sVAR_GUILDSTABILITYPOINT = '$GUILDSTABILITYPOINT';
  tVAR_GUILDSTABILITYPOINT = '<$69>';
  nVAR_GUILDSTABILITYPOINT = 69;
  // 行号繁荣值
  sVAR_GUILDFLOURISHPOINT = '$GUILDFLOURISHPOINT';
  tVAR_GUILDFLOURISHPOINT = '<$70>';
  nVAR_GUILDFLOURISHPOINT = 70;
  // 行会金币数量
  sVAR_GUILDMONEYCOUNT = '$GUILDMONEYCOUNT';
  tVAR_GUILDMONEYCOUNT = '<$71>';
  nVAR_GUILDMONEYCOUNT = 71;
  // 申请攻城需要的道具
  sVAR_REQUESTCASTLEWARITEM = '$REQUESTCASTLEWARITEM';
  tVAR_REQUESTCASTLEWARITEM = '<$72>';
  nVAR_REQUESTCASTLEWARITEM = 72;
  // 申请的攻城开始时间
  sVAR_REQUESTCASTLEWARDAY = '$REQUESTCASTLEWARDAY';
  tVAR_REQUESTCASTLEWARDAY = '<$73>';
  nVAR_REQUESTCASTLEWARDAY = 73;
  // 创建行会需要的道具
  sVAR_REQUESTBUILDGUILDITEM = '$REQUESTBUILDGUILDITEM';
  tVAR_REQUESTBUILDGUILDITEM = '<$74>';
  nVAR_REQUESTBUILDGUILDITEM = 74;
  // 当前城堡所属的行会
  sVAR_OWNERGUILD = '$OWNERGUILD';
  tVAR_OWNERGUILD = '<$75>';
  nVAR_OWNERGUILD = 75;
  // 沙城名称
  sVAR_CASTLENAME = '$CASTLENAME';
  tVAR_CASTLENAME = '<$76>';
  nVAR_CASTLENAME = 76;
  // 城堡管理员名称
  sVAR_LORD = '$LORD';
  tVAR_LORD = '<$77>';
  nVAR_LORD = 77;
  // 申请行会战争的费用
  sVAR_GUILDWARFEE = '$GUILDWARFEE';
  tVAR_GUILDWARFEE = '<$78>';
  nVAR_GUILDWARFEE = 78;
  // 创建行会的费用
  sVAR_BUILDGUILDFEE = '$BUILDGUILDFEE';
  tVAR_BUILDGUILDFEE = '<$79>';
  nVAR_BUILDGUILDFEE = 79;
  // 下次攻城时间
  sVAR_CASTLEWARDATE = '$CASTLEWARDATE';
  tVAR_CASTLEWARDATE = '<$80>';
  nVAR_CASTLEWARDATE = 80;
  // 申请攻城的行会列表
  sVAR_LISTOFWAR = '$LISTOFWAR';
  tVAR_LISTOFWAR = '<$81>';
  nVAR_LISTOFWAR = 81;
  // 修改的攻城时间？
  sVAR_CASTLECHANGEDATE = '$CASTLECHANGEDATE';
  tVAR_CASTLECHANGEDATE = '<$82>';
  nVAR_CASTLECHANGEDATE = 82;
  // 上次攻城时间
  sVAR_CASTLEWARLASTDATE = '$CASTLEWARLASTDATE';
  tVAR_CASTLEWARLASTDATE = '<$83>';
  nVAR_CASTLEWARLASTDATE = 83;
  // 守城天数
  sVAR_CASTLEGETDAYS = '$CASTLEGETDAYS';
  tVAR_CASTLEGETDAYS = '<$84>';
  nVAR_CASTLEGETDAYS = 84;
  // 获取 Command.ini 里面的游戏命令
  // 服务器时间的命令
  sVAR_CMD_DATE = '$CMD_DATE';
  tVAR_CMD_DATE = '<$85>';
  nVAR_CMD_DATE = 85;
  // 拒绝指定玩家私聊的命令
  sVAR_CMD_PRVMSG = '$CMD_PRVMSG';
  tVAR_CMD_PRVMSG = '<$86>';
  nVAR_CMD_PRVMSG = 86;
  // 拒绝所有人私聊的命令
  sVAR_CMD_ALLOWMSG = '$CMD_ALLOWMSG';
  tVAR_CMD_ALLOWMSG = '<$87>';
  nVAR_CMD_ALLOWMSG = 87;
  // 拒绝组队聊天的命令
  sVAR_CMD_LETSHOUT = '$CMD_LETSHOUT';
  tVAR_CMD_LETSHOUT = '<$88>';
  nVAR_CMD_LETSHOUT = 88;
  // 拒绝交易的命令
  sVAR_CMD_LETTRADE = '$CMD_LETTRADE';
  tVAR_CMD_LETTRADE = '<$89>';
  nVAR_CMD_LETTRADE = 89;
  // 加入门派的命令
  sVAR_CMD_LETGUILD = '$CMD_LETGUILD';
  tVAR_CMD_LETGUILD = '<$90>';
  nVAR_CMD_LETGUILD = 90;
  // 退出门派的命令
  sVAR_CMD_ENDGUILD = '$CMD_ENDGUILD';
  tVAR_CMD_ENDGUILD = '<$91>';
  nVAR_CMD_ENDGUILD = 91;
  // 禁止全行会聊天的命令
  sVAR_CMD_BANGUILDCHAT = '$CMD_BANGUILDCHAT';
  tVAR_CMD_BANGUILDCHAT = '<$92>';
  nVAR_CMD_BANGUILDCHAT = 92;
  // 允许行会联盟的命令
  sVAR_CMD_AUTHALLY = '$CMD_AUTHALLY';
  tVAR_CMD_AUTHALLY = '<$93>';
  nVAR_CMD_AUTHALLY = 93;
  // 行会联盟的命令
  sVAR_CMD_AUTH = '$CMD_AUTH';
  tVAR_CMD_AUTH = '<$94>';
  nVAR_CMD_AUTH = 94;
  // 取消行会联盟的命令
  sVAR_CMD_AUTHCANCEL = '$CMD_AUTHCANCEL';
  tVAR_CMD_AUTHCANCEL = '<$95>';
  nVAR_CMD_AUTHCANCEL = 95;
  // 传送戒指的命令
  sVAR_CMD_USERMOVE = '$CMD_USERMOVE';
  tVAR_CMD_USERMOVE = '<$96>';
  nVAR_CMD_USERMOVE = 96;
  // 探测项链的命令
  sVAR_CMD_SEARCHING = '$CMD_SEARCHING';
  tVAR_CMD_SEARCHING = '<$97>';
  nVAR_CMD_SEARCHING = 97;
  // 允许组队传送的命令
  sVAR_CMD_ALLOWGROUPCALL = '$CMD_ALLOWGROUPCALL';
  tVAR_CMD_ALLOWGROUPCALL = '<$98>';
  nVAR_CMD_ALLOWGROUPCALL = 98;
  // 组队传送的命令
  sVAR_CMD_GROUPRECALLL = '$CMD_GROUPRECALLL';
  tVAR_CMD_GROUPRECALLL = '<$99>';
  nVAR_CMD_GROUPRECALLL = 99;
  // 允许行会传送的命令
  sVAR_CMD_ALLOWGUILDRECALL = '$CMD_ALLOWGUILDRECALL';
  tVAR_CMD_ALLOWGUILDRECALL = '<$100>';
  nVAR_CMD_ALLOWGUILDRECALL = 100;
  // 行会传送的命令
  sVAR_CMD_GUILDRECALLL = '$CMD_GUILDRECALLL';
  tVAR_CMD_GUILDRECALLL = '<$101>';
  nVAR_CMD_GUILDRECALLL = 101;
  // 查询夫妻的命令
  sVAR_CMD_DEAR = '$CMD_DEAR';
  tVAR_CMD_DEAR = '<$102>';
  nVAR_CMD_DEAR = 102;
  // 允许夫妻传送的命令
  sVAR_CMD_ALLOWDEARRCALL = '$CMD_ALLOWDEARRCALL';
  tVAR_CMD_ALLOWDEARRCALL = '<$103>';
  nVAR_CMD_ALLOWDEARRCALL = 103;
  // 夫妻传送的命令
  sVAR_CMD_DEARRECALL = '$CMD_DEARRECALL';
  tVAR_CMD_DEARRECALL = '<$104>';
  nVAR_CMD_DEARRECALL = 104;
  // 查询师徒的命令
  sVAR_CMD_MASTER = '$CMD_MASTER';
  tVAR_CMD_MASTER = '<$105>';
  nVAR_CMD_MASTER = 105;
  // 允许师徒传送的命令
  sVAR_CMD_ALLOWMASTERRECALL = '$CMD_ALLOWMASTERRECALL';
  tVAR_CMD_ALLOWMASTERRECALL = '<$106>';
  nVAR_CMD_ALLOWMASTERRECALL = 106;
  // 师徒传送的命令
  sVAR_CMD_MASTERECALL = '$CMD_MASTERECALL';
  tVAR_CMD_MASTERECALL = '<$107>';
  nVAR_CMD_MASTERECALL = 107;
  // 上马的命令
  sVAR_CMD_TAKEONHORSE = '$CMD_TAKEONHORSE';
  tVAR_CMD_TAKEONHORSE = '<$108>';
  nVAR_CMD_TAKEONHORSE = 108;
  // 下马的命令
  sVAR_CMD_TAKEOFHORSE = '$CMD_TAKEOFHORSE';
  tVAR_CMD_TAKEOFHORSE = '<$109>';
  nVAR_CMD_TAKEOFHORSE = 109;
  // 传音号角发消息的命令
  sVAR_CMD_ALLSYSMSG = '$CMD_ALLSYSMSG';
  tVAR_CMD_ALLSYSMSG = '<$110>';
  nVAR_CMD_ALLSYSMSG = 110;
  // 成员函数？
  sVAR_CMD_MEMBERFUNCTION = '$CMD_MEMBERFUNCTION';
  tVAR_CMD_MEMBERFUNCTION = '<$111>';
  nVAR_CMD_MEMBERFUNCTION = 111;
  // 成员函数扩展？
  sVAR_CMD_MEMBERFUNCTIONEX = '$CMD_MEMBERFUNCTIONEX';
  tVAR_CMD_MEMBERFUNCTIONEX = '<$112>';
  nVAR_CMD_MEMBERFUNCTIONEX = 112;
  // 当前城堡金币数
  sVAR_CASTLEGOLD = '$CASTLEGOLD';
  tVAR_CASTLEGOLD = '<$113>';
  nVAR_CASTLEGOLD = 113;
  // 城堡每天收入
  sVAR_TODAYINCOME = '$TODAYINCOME';
  tVAR_TODAYINCOME = '<$114>';
  nVAR_TODAYINCOME = 114;
  // 城门状态
  sVAR_CASTLEDOORSTATE = '$CASTLEDOORSTATE';
  tVAR_CASTLEDOORSTATE = '<$115>';
  nVAR_CASTLEDOORSTATE = 115;
  // 修理城门的费用
  sVAR_REPAIRDOORGOLD = '$REPAIRDOORGOLD';
  tVAR_REPAIRDOORGOLD = '<$116>';
  nVAR_REPAIRDOORGOLD = 116;
  // 修理城墙的费用
  sVAR_REPAIRWALLGOLD = '$REPAIRWALLGOLD';
  tVAR_REPAIRWALLGOLD = '<$117>';
  nVAR_REPAIRWALLGOLD = 117;
  // 雇佣守卫费用
  sVAR_GUARDFEE = '$GUARDFEE';
  tVAR_GUARDFEE = '<$118>';
  nVAR_GUARDFEE = 118;
  // 雇佣弓箭手费用
  sVAR_ARCHERFEE = '$ARCHERFEE';
  tVAR_ARCHERFEE = '<$119>';
  nVAR_ARCHERFEE = 119;
  // 守卫状态
  sVAR_GUARDRULE = '$GUARDRULE';
  tVAR_GUARDRULE = '<$120>';
  nVAR_GUARDRULE = 120;

  sVAR_HUMAN = '$HUMAN(';
  tVAR_HUMAN = '<$122/%s>';
  nVAR_HUMAN = 122;
  sVAR_GUILD = '$GUILD(';
  tVAR_GUILD = '<$123/%s>';
  nVAR_GUILD = 123;
  sVAR_GLOBAL = '$GLOBAL(';
  tVAR_GLOBAL = '<$124/%s>';
  nVAR_GLOBAL = 124;
  sVAR_STR = '$STR(';
  tVAR_STR = '<$125/%s>';
  nVAR_STR = 125;
  // 额外仓库2
  sVAR_STORAGE2STATE = '$STORAGE2STATE';
  tVAR_STORAGE2STATE = '<$126>';
  nVAR_STORAGE2STATE = 126;
  // 额外仓库3
  sVAR_STORAGE3STATE = '$STORAGE3STATE';
  tVAR_STORAGE3STATE = '<$127>';
  nVAR_STORAGE3STATE = 127;
  // 额外仓库4
  sVAR_STORAGE4STATE = '$STORAGE4STATE';
  tVAR_STORAGE4STATE = '<$128>';
  nVAR_STORAGE4STATE = 128;
  // 额外仓库5
  sVAR_STORAGE5STATE = '$STORAGE5STATE';
  tVAR_STORAGE5STATE = '<$129>';
  nVAR_STORAGE5STATE = 129;
  // 当前对话 NPC 名称
  sVAR_SELFNAME = '$SELFNAME';
  tVAR_SELFNAME = '<$130>';
  nVAR_SELFNAME = 130;
  // 对面人物名称
  sVAR_POSENAME = '$POSENAME';
  tVAR_POSENAME = '<$131>';
  nVAR_POSENAME = 131;
  // 游戏积分
  sVAR_GAMEDIAMOND = '$GAMEDIAMOND';
  tVAR_GAMEDIAMOND = '<$132>';
  nVAR_GAMEDIAMOND = 132;
  // 修炼值
  sVAR_GAMEGIRD = '$GAMEGIRD';
  tVAR_GAMEGIRD = '<$133>';
  nVAR_GAMEGIRD = 133;
  // 任务循环变量（0..19）
  sVAR_MISSIONARITHMOMETER = '$MISSIONARITHMOMETER(';
  tVAR_MISSIONARITHMOMETER = '<$134/%s>';
  nVAR_MISSIONARITHMOMETER = 134;
  // 允许加好友的命令
  sVAR_CMD_ALLOWFIREND = '$CMD_ALLOWFIREND';
  tVAR_CMD_ALLOWFIREND = '<$135>';
  nVAR_CMD_ALLOWFIREND = 135;
  // 当前人物的外观效果代码(用于更换天下第一NPC外观命令：SETEFFIGYSTATE 使用)
  sVAR_EFFIGYSTATE = '$EFFIGYSTATE';
  tVAR_EFFIGYSTATE = '<$136>';
  nVAR_EFFIGYSTATE = 136;
  // 人物外观相关？
  sVAR_EFFIGYOFFSET = '$EFFIGYOFFSET';
  tVAR_EFFIGYOFFSET = '<$137>';
  nVAR_EFFIGYOFFSET = 137;
  // 年份
  sVAR_YEAR = '$YEAR';
  tVAR_YEAR = '<$138>';
  nVAR_YEAR = 138;
  // 月份
  sVAR_MONTH = '$MONTH';
  tVAR_MONTH = '<$139>';
  nVAR_MONTH = 139;
  // 天数
  sVAR_DAY = '$DAY';
  tVAR_DAY = '<$140>';
  nVAR_DAY = 140;
  // 小时
  sVAR_HOUR = '$HOUR';
  tVAR_HOUR = '<$141>';
  nVAR_HOUR = 141;
  // 分钟
  sVAR_MINUTE = '$MINUTE';
  tVAR_MINUTE = '<$142>';
  nVAR_MINUTE = 142;
  // 秒钟
  sVAR_SEC = '$SEC';
  tVAR_SEC = '<$143>';
  nVAR_SEC = 143;
  // 所在地图代码
  sVAR_MAP = '$MAP';
  tVAR_MAP = '<$144>';
  nVAR_MAP = 144;
  // 地图坐标X
  sVAR_X = '$X';
  tVAR_X = '<$145>';
  nVAR_X = 145;
  // 地图坐标Y
  sVAR_Y = '$Y';
  tVAR_Y = '<$146>';
  nVAR_Y = 146;
  sVAR_UNMASTER_FORCE = '$UNMASTER_FORCE';
  tVAR_UNMASTER_FORCE = '<$147>';
  nVAR_UNMASTER_FORCE = 147;
  // 0 表示队长名称；其余表示 队员1--7 的名称
  sVAR_TEAM = '$TEAM';
  tVAR_TEAM = '<$148/%s>';
  nVAR_TEAM = 148;
  // 背包金币数量
  sVAR_USERGOLDCOUNT = '$USERGOLDCOUNT';
  tVAR_USERGOLDCOUNT = '<$149>';
  nVAR_USERGOLDCOUNT = 149;
  // 背包可携带最大金币数量
  sVAR_MAXGOLDCOUNT = '$MAXGOLDCOUNT';
  tVAR_MAXGOLDCOUNT = '<$150>';
  nVAR_MAXGOLDCOUNT = 150;
  // 仓库金币数量
  sVAR_STORAGEGOLDCOUNT = '$STORAGEGOLDCOUNT';
  tVAR_STORAGEGOLDCOUNT = '<$151>';
  nVAR_STORAGEGOLDCOUNT = 151;
  // 背包绑定金币数量
  sVAR_BINDGOLDCOUNT = '$BINDGOLDCOUNT';
  tVAR_BINDGOLDCOUNT = '<$152>';
  nVAR_BINDGOLDCOUNT = 152;
  // 升级武器的价格
  sVAR_UPGRADEWEAPONFEE = '$UPGRADEWEAPONFEE';
  tVAR_UPGRADEWEAPONFEE = '<$153>';
  nVAR_UPGRADEWEAPONFEE = 153;
  // 手中武器名称
  sVAR_USERWEAPON = '$USERWEAPON';
  tVAR_USERWEAPON = '<$154>';
  nVAR_USERWEAPON = 154;
  // 开始提问的命令
  sVAR_CMD_STARTQUEST = '$CMD_STARTQUEST';
  tVAR_CMD_STARTQUEST = '<$155>';
  nVAR_CMD_STARTQUEST = 155;
  // 人物当前副本地图名称
  sVAR_FBMAPNAME = '$FBMAPNAME';
  tVAR_FBMAPNAME = '<$156>';
  nVAR_FBMAPNAME = 156;
  // 人物当前副本地图代码
  sVAR_FBMAP = '$FBMAP';
  tVAR_FBMAP = '<$157>';
  nVAR_FBMAP = 157;
  // 账号
  sVAR_ACCOUNT = '$ACCOUNT';
  tVAR_ACCOUNT = '<$158>';
  nVAR_ACCOUNT = 158;
  // ？？？
  sVAR_ASSEMBLEITEMNAME = '$ASSEMBLEITEMNAME';
  tVAR_ASSEMBLEITEMNAME = '<$159>';
  nVAR_ASSEMBLEITEMNAME = 159;

  MAKEMAGICSAVENAME: array[0..9] of string[10] = ('Weapon', 'Dress', 'Helmet', 'Necklace', 'ArmRing', 'Ring', 'Belt', 'Boot', 'Leechdom',
    'Material');
type

  TMakeWord = (tLo, tHi);
  TLevelNeedExp = array[1..MAXCHANGELEVEL] of  LongWord;//等级所需经验

  TGuildLevelNeedExp = packed record
    nGold: Integer;
    nBuildPoint: Integer; //建筑度
    nActivityPoint: Integer; //人气度
    nStabilityPoint: Integer; //安定度
    nFlourishingPoint: Integer; //繁荣度
  end;

  TGuildLevelNeedExpArr = array[1..MAXGUILDLEVEL] of TGuildLevelNeedExp;

  TWuXinLevelNeedExp = array[1..MAXWUXINLEVEL] of LongWord;
  TItemBind = record //物品绑定(绑定的玩家才能戴此物品)
    nMakeIdex: Integer;
    nItemIdx: Integer;//物品分类
    sBindName: string[20];//玩家名称
  end;
  pTItemBind = ^TItemBind;
  TConsoleData = packed record
    nCrcExtInt: Integer;
    nCrcDllInt: Integer;
  end;
  pTConsoleData = ^TConsoleData;

  pTNPCDelayGoto = ^TNPCDelayGoto;
  TNPCDelayGoto = packed record
    sName: string;
    dwTimeGotoTick: LongWord;
    nGotoLable: Integer;
    GotoNPC: TNormNpc;
    sParam: string;
  end;

  TServerConf = record
    boClientCanSet: Boolean;
    boRUNHUMAN: Boolean;
    boRUNMON: Boolean;
    boRunNpc: Boolean;
    boWarRunAll: Boolean;
    btDieColor: Byte;
    wSpellTime: Word;
    wHitIime: Word;
    wItemFlashTime: Word;
    btItemSpeed: Byte;
    boCanStartRun: Boolean;
    boParalyCanRun: Boolean;
    boParalyCanWalk: Boolean;
    boParalyCanHit: Boolean;
    boParalyCanSpell: Boolean;
    boShowRedHPLable: Boolean;
    boShowHPNumber: Boolean;
    boShowJobLevel: Boolean;
    boDuraAlert: Boolean;
    boMagicLock: Boolean;
    boAutoPuckUpItem: Boolean;
  end;
  pTConfig = ^TConfig;

  TThreadInfo = record
    dwRunTick: LongWord;
    boActived: Boolean;
    nRunFlag: Integer;
    boTerminaled: Boolean;
    nRunTime: Integer;
    nMaxRunTime: Integer;
    hThreadHandle: Integer;
    dwThreadID: LongWord;
    Config: pTConfig;
  end;

  pTThreadInfo = ^TThreadInfo;

  TEncode6BitBuf = array[0..275] of Byte;
  TDecode6BitBuf = array[0..276] of Byte;

  TConfig = record

    nGuildMemberCount: Integer;
    boOfflineSaveExp: Boolean;
    boCloseShowHp: Boolean;
    boMonShowLevel: Boolean;
    boMonShowLevelMsg: string;
    boInfinityStorage: Boolean;
    nInfinityStorageCount: integer;
    wNakedBeginLevel: Word;
    NakedAddInfo: TServerNakedAddInfo;

    nArmStrengthenGold: Integer;
    nMakeItemGold: Integer;

    nUpPhotoLevel: Integer;
    nUpPhotoTick: Integer;

    boOpenSelfShop: Boolean;
    boSafeZoneShop: Boolean;
    boMapShop: Boolean;
    nSellOffGoldTaxRate: Integer;
    nSellOffGameGoldTaxRate: Integer;
    nSellOffItemCount: Integer;
    nLevelItemRate: Integer;

    nLevelItemGoldCount: Integer;
    nLevelItemGameGoldCount: Integer;

    boPlayShowMystery: Boolean;
    boHeroShowMystery: Boolean;
    boCloneShowMystery: Boolean;

    HPStoneStartRate: Byte;
    MPStoneStartRate: Byte;
    HPStoneIntervalTime: LongWord;
    MPStoneIntervalTime: LongWord;
    HPStoneAddRate: Byte;
    MPStoneAddRate: Byte;
    HPStoneDecDura: LongWord;
    MPStoneDecDura: LongWord;

    nRunMagTick: LongWord;
    nPullulationCount: Integer;

    nEatItemsTime: LongWord;
    nHpEatItemsCount: Integer;
    nMpEatItemsCount: Integer;

    boAllowJointAttack: Boolean;
    nEnergyStepUpRate: Integer;
    nSkillWWPowerRate: Integer;
    nSkillTWPowerRate: Integer;
    nSkillZWPowerRate: Integer;
    nSkillTTPowerRate: Integer;
    nSkillZTPowerRate: Integer;
    nSkillZZPowerRate: Integer;

    nConfigSize: Integer;
    sServerName: string;
    sServerIPaddr: string;
    {sRegServerAddr: string;
    nRegServerPort: Integer;
    nRegSerialNumber: Integer;
    nRegSerialPassWord: Integer;   }

    sWebSite: string;
    sBbsSite: string;
    sClientDownload: string;
    sQQ: string;
    sPhone: string;
    sBankAccount0: string;
    sBankAccount1: string;
    sBankAccount2: string;
    sBankAccount3: string;
    sBankAccount4: string;
    sBankAccount5: string;
    sBankAccount6: string;
    sBankAccount7: string;
    sBankAccount8: string;
    sBankAccount9: string;
    nServerNumber: Integer;
    boVentureServer: Boolean;//不刷怪模式
    boTestServer: Boolean;//测试模式
    boServiceMode: Boolean;
    boNonPKServer: Boolean;
    nTestLevel: Integer;//20080503 测试模式开始等级
    nTestGold: Integer;//测试模式开始金币
    nTestUserLimit: Integer;//测试模式上线人数限制(2000) 20080503
    nSendBlock: Integer;//网关数据传输数据块大小
    nCheckBlock: Integer;
    nAvailableBlock: Integer;
    nGateLoad: Integer;
    nUserFull: Integer;//最高上线人数
    nZenFastStep: Integer;
    boSafeOffLine: Boolean;
    boShopSafeOffLine: Boolean;
    nSafeOffLineLevel: Integer;
    sGateAddr: string;
    nGatePort: Integer;//网关端口(65535) 20080503
    sDBAddr: string;
    nDBPort: Integer;//DBServer端口 20080503
    sIDSAddr: string;
    nIDSPort: Integer;//LoginSrv端口 20080503
    sMsgSrvAddr: string;
    nMsgSrvPort: Integer;
    sLogServerAddr: string;
    nLogServerPort: Integer;//日志程序端口 20080503
    boDiscountForNightTime: Boolean;
    nHalfFeeStart: Integer;
    nHalfFeeEnd: Integer;
    boViewHackMessage: Boolean;
    boViewHackMessage2: Boolean;
    boViewAdmissionFailure: Boolean;
    //sBaseDir: string;
    sGuildDir: string;
    sGuildFile: string;
    //sVentureDir: string;
    sConLogDir: string;
    sCastleDir: string;
    sCastleFile: string;
    sGameDataDir: string;
    sEnvirDir: string;
    sMapDir: string;
    sNoticeDir: string;
    sLogDir: string;
    sEMailDir: string;
    //sPlugDir: string[255];
    //sUserDataDir: string[255];
    sCurrentDir: string;
    sClientFile1: string;
    sClientFile2: string;
    sClientFile3: string;

    sClothsMan: string;
    sClothsWoman: string;
    sWoodenSword: string;
    sCandle: string;
    sBasicDrug: string;
    sGoldStone: string;
    sSilverStone: string;
    sSteelStone: string;
    sCopperStone: string;
    sBlackStone: string;
    sZuma: array[0..3] of string[15];
    sBee: string;
    sSpider: string;
    sWomaHorn: string;
    sZumaPiece: string;
    sGameGoldName: string[30];
    {sGameGoldName: string[30];
    sGamePointName: string[30];
    sGameDiamondName: string[30];
    sPayMentPointName: string;  }
    DBSocket: Integer;
    nHealthFillTime: Integer;
    nSpellFillTime: Integer;
    nMonUpLvNeedKillBase: Integer;//宝宝升级杀怪基数
    nMonUpLvRate: Integer;//宝宝升级杀怪倍率
    MonUpLvNeedKillCount: array[0..SLAVEMAXLEVEL - 2] of Integer;
    SlaveColor: array[0..SLAVEMAXLEVEL - 1] of Byte;
    dwNeedExps: TLevelNeedExp;
    GuildLevelExp: TGuildLevelNeedExpArr;
    HorseLevelExp: array[0..High(Byte)] of LongWord;

    dwGetWuXinExpTime: LongWord;
    dwGetWuXinExpTick: LongWord;
    dwGetWuXinCount: LongWord;
    // todo 半月刀法或许可以180度方向
    WideAttack: array[0..2] of Byte;//半月刀法的方向
    CrsAttack: array[0..6] of Byte;//抱月刀法的方向
    SpitMap: array[0..7, 0..4, 0..4] of Byte;
    sHomeMap: string;
    nHomeX: Integer;
    nHomeY: Integer;
    sRedHomeMap: string;
    nRedHomeX: Integer;
    nRedHomeY: Integer;
    sRedDieHomeMap: string;
    nRedDieHomeX: Integer;
    nRedDieHomeY: Integer;
    dwDecPkPointTime: LongWord;
    nDecPkPointCount: Integer;
    dwPKFlagTime: LongWord;
    nKillHumanAddPKPoint: Integer;//杀人增加PK点数(2000) 20080503
    nKillHumanDecLuckPoint: Integer;
    dwDecLightItemDrugTime: LongWord;
    nSafeZoneSize: Integer;//安全区范围(2000) 20080503
    nStartPointSize: Integer;//新人出生点控制(2000) 20080503
    dwHumanGetMsgTime: LongWord;
    nGroupMembersMax: Integer;//组队成员数量(2000) 20080503
    sFireBallSkill: string;
    sHealSkill: string;
    ReNewNameColor: array[0..9] of Byte;

    dwReNewNameColorTime: LongWord;
    boReNewChangeColor: Boolean;
    boReNewLevelClearExp: Boolean;

    nUpgradeWeaponMaxPoint: Integer;//武器升级最高点数(1000) 20080504
    nUpgradeWeaponPrice: Integer;
    dwUPgradeWeaponGetBackTime: LongWord;
    nClearExpireUpgradeWeaponDays: Integer;//武器升级过期天数(100) 20080504
    nUpgradeWeaponDCRate: Integer;//武器攻击力升级成功机率(500) 20080504
    nUpgradeWeaponDCTwoPointRate: Integer;//武器攻击力二点机率(100) 20080504
    nUpgradeWeaponDCThreePointRate: Integer;//武器攻击力三点机率(500) 20080504
    nUpgradeWeaponSCRate: Integer;//武器道术升级成功机率(500) 20080504
    nUpgradeWeaponSCTwoPointRate: Integer;//武器道术二点机率(100) 20080504
    nUpgradeWeaponSCThreePointRate: Integer;//武器道术三点机率(500) 20080504
    nUpgradeWeaponMCRate: Integer;//武器魔法升级成功机率(500) 20080504
    nUpgradeWeaponMCTwoPointRate: Integer;//武器魔法二点机率(100)  20080504
    nUpgradeWeaponMCThreePointRate: Integer;//武器魔法三点机率(500)  20080504
    dwProcessMonstersTime: LongWord;//刷怪处理间隔
    dwRegenMonstersTime: LongWord;//刷怪间隔(1000) 20080503
    nPersonShopSellRate: Integer;
    nPersonShopBuyRate: Integer;
    nMagicAttackMonsteRate: Integer;
    nMonGenRate: Integer;//刷怪倍数(1000) 20080503
    nProcessMonRandRate: Integer;
    nProcessMonLimitCount: Integer;
    nSoftVersionDate: Integer;
    //    boCanOldClientLogon: Boolean;
    boCanNewCall: Boolean;
    dwConsoleShowUserCountTime: LongWord;//控制台显示人数间隔
    dwShowLineNoticeTime: LongWord;//公告显示间隔
    nLineNoticeColor: Integer;
    nStartCastleWarDays: Integer;//申请攻城天数 20080504
    nStartCastlewarTime: Integer;//攻城开始时间(24) 20080504
    dwShowCastleWarEndMsgTime: LongWord;
    dwCastleWarTime: LongWord;
    dwGetCastleTime: LongWord;//禁止占领时间
    dwGuildWarTime: LongWord; //行会战时间
    nBuildGuildPrice: Integer;
    nGuildWarPrice: Integer;
    nMakeDurgPrice: Integer;
    nHumanMaxGold: Integer;//人物最大金币数
    nHumanTryModeMaxGold: Integer;
    nTryModeLevel: Integer;//试玩等级限制(100) 20080503
    boTryModeUseStorage: Boolean;
    nCanShoutMsgLevel: Integer;//允许喊话等级(65535) 20080503
    boShowMakeItemMsg: Boolean;
    boShutRedMsgShowGMName: Boolean;
    nSayMsgMaxLen: Integer;//聊天信息长度(255) 20080503
    dwSayMsgTime: LongWord;
    nSayMsgCount: Integer;//发送信息数量(255) 20080503
    dwDisableSayMsgTime: LongWord;
    nSayRedMsgMaxLen: Integer;//广播信息长度(255) 20080503
    boShowGuildName: Boolean;
    boShowRankLevelName: Boolean;
    boOpenArmStrengthen: Boolean;
    boOpenItemFlute: Boolean;
    boMonSayMsg: Boolean;
    nStartPermission: Integer;//人物起始权限(10) 20080503
    vAbilityMoveSet: TAbilityMoveSet;
    boKillHumanWinLevel: Boolean;//杀人增加等级
    boKilledLostLevel: Boolean;
    boKillHumanWinExp: Boolean;
    boKilledLostExp: Boolean;
    nKillHumanWinLevel: Integer;
    nKilledLostLevel: Integer;
    nKillHumanWinExp: Integer;
    nKillHumanLostExp: Integer;
    nHumanLevelDiffer: Integer;//PK等级(100)
    nMonsterPowerRate: Integer;//怪物属性倍率(20000) 20080503
    nItemsPowerRate: Integer;
    nItemsACPowerRate: Integer;//物品属性倍率(AC、MAC二个)(2000) 20080503
    boSendOnlineCount: Boolean;
    nSendOnlineCountRate: Integer;//广播倍率(10) 20080503
    dwSendOnlineTime: LongWord;//广播间隔
    dwSaveHumanRcdTime: LongWord;
    dwHumanFreeDelayTime: LongWord;
    dwHumDieMaxTime: LongWord;
    dwMakeGhostTime: LongWord;
    dwClearDropOnFloorItemTime: LongWord;
    dwFloorItemCanPickUpTime: LongWord;
    dwEatTick: LongWord;
    sFileMD5: string[32];
    sFileVersion: string[24];
    dwFileID: string[16];
    sIdeSerialNumber: string[32];
    sPCName: string[50];
    nCheckCount: Integer;
    dwCheckTick: LongWord;
    dwCheckTime: LongWord;
    nPullulatePointRate: Integer;

    nSendRefMsgRange: Integer;
    boDecLampDura: Boolean;
    boHungerSystem: Boolean;
    boHungerDecHP: Boolean;
    boHungerDecPower: Boolean;
    boDiableHumanRun: Boolean;
    boRUNHUMAN: Boolean;//是否可穿人物
    boRUNMON: Boolean;//是否可穿怪
    boRunNpc: Boolean;//是否可穿NPC
    boRunGuard: Boolean;
    boWarDisHumRun: Boolean;
    boGMRunAll: Boolean;//管理员可以穿一切
    boSafeAreaLimited: Boolean;//安全区是否穿
    dwTryDealTime: LongWord;
    dwDealOKTime: LongWord;
    boCanNotGetBackDeal: Boolean;
    boDisableDeal: Boolean;
    nMasterOKLevel: Integer;//出师等级(65535) 20080504
    nMasterOKCreditPoint: Integer;//出师后师傅得的声望点(100) 20080504
    nMasterOKBonusPoint: Integer;//徒弟出师后，师父得到的分配点数(1000) 20080504
    boPKLevelProtect: Boolean;
    nPKProtectLevel: Integer;//PK保护等级 20080503
    nRedPKProtectLevel: Integer;//红名PK保护等级 20080503
    nItemPowerRate: Integer;//攻击翻倍倍率(60000) 20080503
    nItemExpRate: Integer;//经验翻倍倍率(60000) 20080503
    nScriptGotoCountLimit: Integer;//20080912 修改

    btHearMsgFColor: Byte; //前景  听到
    btHearMsgBColor: Byte; //背景  听到
    btRedMsgFColor: Byte;//前景  悄悄话
    btRedMsgBColor: Byte;//背景  悄悄话
    btCryMsgFColor: Byte; //前景  哭
    btCryMsgBColor: Byte; //背景  哭
    btCustMsgFColor: Byte;
    btCustMsgBColor: Byte;
    btWhisperMsgFColor: Byte;
    btWhisperMsgBColor: Byte;
    btGreenMsgFColor: Byte; //前景
    btGreenMsgBColor: Byte; //背景
    btGuildMsgFColor: Byte;
    btGuildMsgBColor: Byte;
    btCudtMsgFColor: Byte;
    btCudtMsgBColor: Byte;
    btGMWhisperMsgFColor: Byte;
    btGMWhisperMsgBColor: Byte;
    btBlueMsgFColor: Byte; //前景
    btBlueMsgBColor: Byte; //背景
    btGroupMsgFColor: Byte; //前景
    btGroupMsgBColor: Byte; //背景

    nHearMsgFColor: Word;
    nHearMsgBColor: Word;
    nWhisperMsgFColor: Word;
    nWhisperMsgBColor: Word;
    nGMWhisperMsgFColor: Word;
    nGMWhisperMsgBColor: Word;
    nCryMsgFColor: Word;
    nCryMsgBColor: Word;
    nGreenMsgFColor: Word;
    nGreenMsgBColor: Word;
    nBlueMsgFColor: Word;
    nBlueMsgBColor: Word;
    nRedMsgFColor: Word;
    nRedMsgBColor: Word;
    nGuildMsgFColor: Word;
    nGuildMsgBColor: Word;
    nGroupMsgFColor: Word;
    nGroupMsgBColor: Word;
    nCustMsgFColor: Word;//前景
    nCustMsgBColor: Word;//前景
    nCudtMsgFColor: Word;
    nCudtMsgBColor: Word;
    nWorldMsgFColor: Word;
    nWorldMsgBColor: Word;
    nBugleMsgFColor: Word;
    nBugleMsgBColor: Word;
    nHintMsgRColor: Integer;
    nHintMsgGColor: Integer;
    nHintMsgWColor: Integer;

    nMonRandomAddValue: Integer;//怪物掉极品的几率
    nMakeRandomAddValue: Integer;//制造物品出现极品的几率
    nNpcMakeRandomAddValue: Integer;
    boMonRandomIsOpenShow: Boolean;
    boMakeRandomIsOpenShow: Boolean;
    boNPCMakeRandomIsOpenShow: Boolean;
    nFlute1RateValue: Integer;
    nFlute2RateValue: Integer;
    nFlute3RateValue: Integer;
    nWuXinMinRate: Integer;
    nWuXinMaxRate: Integer;

    IHelmet,
      IWeapon,
      IDress,
      INeckLace,
      IArmRing,
      IRing,
      IBelt,
      IBoot,
      IRein,
      IBell,
      ISaddle,
      IDecoration,
      INail: TGameItemUpgradeRate;

    nMonOneDropGoldCount: Integer;
    nMakeMineHitRate: Integer;//挖矿命中率(500) 20080504
    nMakeMineRate: Integer;//挖矿机率(500) 20080504
    nStoneTypeRate: Integer;//矿石因子(500) 20080504
    nStoneTypeRateMin: Integer;
    nGoldStoneMin: Integer;
    nGoldStoneMax: Integer;//金矿率(500) 20080504
    nSilverStoneMin: Integer;
    nSilverStoneMax: Integer;//银矿率(500) 20080504
    nSteelStoneMin: Integer;
    nSteelStoneMax: Integer;//铁矿率(500) 20080504
    nBlackStoneMin: Integer;
    nBlackStoneMax: Integer;//黑铁矿率(500) 20080504
    nStoneMinDura: Integer;//矿石最小品质(1000) 20080504
    nStoneGeneralDuraRate: Integer;//普通品质范围(1000) 20080504
    nStoneAddDuraRate: Integer;//高品质机率(1000) 20080504
    nStoneAddDuraMax: Integer;//高品质范围(1000) 20080504
    nWinLottery6Min: Integer;
    nWinLottery6Max: Integer;
    nWinLottery5Min: Integer;
    nWinLottery5Max: Integer;
    nWinLottery4Min: Integer;
    nWinLottery4Max: Integer;
    nWinLottery3Min: Integer;
    nWinLottery3Max: Integer;
    nWinLottery2Min: Integer;
    nWinLottery2Max: Integer;
    nWinLottery1Min: Integer;
    nWinLottery1Max: Integer;
    nWinLottery1Gold: Integer;
    nWinLottery2Gold: Integer;
    nWinLottery3Gold: Integer;
    nWinLottery4Gold: Integer;
    nWinLottery5Gold: Integer;
    nWinLottery6Gold: Integer;
    nWinLotteryRate: Integer;
    nWinLotteryCount: Integer;
    nNoWinLotteryCount: Integer;
    nWinLotteryLevel1: Integer;
    nWinLotteryLevel2: Integer;
    nWinLotteryLevel3: Integer;
    nWinLotteryLevel4: Integer;
    nWinLotteryLevel5: Integer;
    nWinLotteryLevel6: Integer;
    GlobalVal: array[0..999] of Integer;//G 变量可保存 20080903
    GlobaDyMval: array[0..999] of Integer;//不可保存的变量
    GlobalAVal: array[0..999] of string;// A 变量可保存 20080903
    GlobalUVal: array[0..999] of string;
    nItemNumber: Integer;//制造物品最后一个的制造ID号
    nItemNumberEx: Integer;
    nGuildRecallTime: Integer;//传行传送间隔
    nGroupRecallTime: Integer;
    boControlDropItem: Boolean;
    boInSafeDisableDrop: Boolean;
    nCanDropGold: Integer;
    nCanDropPrice: Integer;
    boSendCustemMsg: Boolean;
    boSubkMasterSendMsg: Boolean;
    nSuperRepairPriceRate: Integer;//特修价格倍数(100) 20080503
    nRepairItemDecDura: Integer;//普通修理掉持久数(持久上限减下限再除以此数为减的数值)(100) 20080503

    boDieScatterBag: Boolean;
    nDieScatterBagRate: Integer;
    boDieRedScatterBagAll: Boolean;
    nDieDropUseItemRate: Integer;
    nDieRedDropUseItemRate: Integer;
    boDieDropGold: Boolean;
    boKillByHumanDropUseItem: Boolean;
    boKillByMonstDropUseItem: Boolean;
    boKickExpireHuman: Boolean;
    nGuildRankNameLen: Integer;
    nGuildMemberMaxLimit: Integer;//行会成员上限
    nDefGuildMemberLimit: Integer;
    nGuildMemberLevelInc: Integer;
    nGuildNameLen: Integer;
    nAttackPosionRate: Integer;//麻痹成功机率(100) 20080503
    nAttackPosionTime: Integer;//麻痹时间(100) 20080503
    dwRevivalTime: LongWord;//复活间隔时间
    boUserMoveCanDupObj: Boolean;
    boUserMoveCanOnItem: Boolean;
    dwUserMoveTime: LongWord;//传送使用间隔(100) 20080503
    dwPKDieLostExpRate: LongWord;
    nPKDieLostLevelRate: Integer;
    btPKFlagNameColor: Byte;
    btPKLevel1NameColor: Byte;
    btPKLevel2NameColor: Byte;//红名状态 名字的颜色
    btAllyAndGuildNameColor: Byte;
    btWarGuildNameColor: Byte;
    btInFreePKAreaNameColor: Byte;
    boSpiritMutiny: Boolean;
    dwSpiritMutinyTime: LongWord;//祈祷生效时长
    nSpiritPowerRate: Integer;
    boMasterDieMutiny: Boolean;
    nMasterDieMutinyRate: Integer;
    nMasterDieMutinyPower: Integer;
    nMasterDieMutinySpeed: Integer;
    boBBMonAutoChangeColor: Boolean;
    dwBBMonAutoChangeColorTime: Integer;
    boOldClientShowHiLevel: Boolean;
    boShowScriptActionMsg: Boolean;
    nRunSocketDieLoopLimit: Integer;
    boThreadRun: Boolean;
    boShowExceptionMsg: Boolean;
    boShowPreFixMsg: Boolean;
    btMakeMagicAddPoint: Byte;
    btMakeMagicUsePoint: Byte;
    btMakeMagicAddRate: Byte;
    btMakeMagicMaxLevel: Byte;
    nMakeMagicBeginLevel: Integer;
    MakeMagicConfine: array[Low(TMakeMagic)..High(TMakeMagic)] of array[0..10] of TMakeMagicConfine;
    LiteraryConfine: array[0..29] of TLiteraryConfine;
    nMagicAttackRage: Integer;//魔法攻击有效距离(20) 20080504
    sBoneFamm: string;
    nBoneFammCount: Integer;//召唤骷髅数量(255) 20080504
    sDogz: string;
    nDogzCount: Integer;//召唤神兽数量(255) 20080504
    sMoonSpirit: string;
    nMoonSpiritCount: Integer;
    sBoneDog: string;

    nAmyOunsulPoint: Integer;//施毒术中毒减的点数 20080504
    boDisableInSafeZoneFireCross: Boolean;
    boGroupMbAttackPlayObject: Boolean;//狮子吼是否对人物有效
    dwPosionDecHealthTime: LongWord;
    nPosionDamagarmor: Integer;//中红毒着持久及减防量（实际大小为 12 / 10）20080503
    nSetupInfo: LongWord;
    boExpIsCumulative: Boolean;
    boExpOffLienSave: Boolean;
    boExpOffLineRunTime: Boolean;

    boLimitSwordLong: Boolean;//禁止无限刺杀
    nSwordLongPowerRate: Integer;//刺杀攻击力倍数 20080504
    nFireBoomRage: Integer;//爆裂火焰攻击范围 20080504
    nSnowWindRange: Integer;//冰咆哮攻击范围 20080504
    nElecBlizzardRange: Integer;//流星火雨攻击范围 20080510
    nMagTurnUndeadLevel: Integer;
    nMagTammingLevel: Integer;
    nMagTammingTargetLevel: Integer;

    nSkill110PowerRate: Integer;
    nSkill111PowerRate: Integer;
    nSkill112PowerRate: Integer;
    nSkill113PowerRate: Integer;
    nSkill114PowerRate: Integer;
    nSkill115PowerRate: Integer;
    nSkill116PowerRate: Integer;
    nSkill117PowerRate: Integer;
    nSkill118PowerRate: Integer;
    nSkill119PowerRate: Integer;
    nSkill120PowerRate: Integer;
    nSkill121PowerRate: Integer;

    boSkill63RunHum: Boolean;
    boSkill63RunMon: Boolean;
    boSkill63RunNpc: Boolean;
    boSkill63RunGuard: Boolean;
    boSkill63WarDisHumRun: Boolean;

    nSkill70PowerRate: Integer;
    boSkill70MbAttackMon: Boolean;
    boSkill70MbAttackHuman: Boolean;
    boSkill70MbAttackSlave: Boolean;
    boSkill70MbFastParalysis: Boolean;
    boSkill70RunHum: Boolean;
    boSkill70RunMon: Boolean;
    boSkill70RunNpc: Boolean;
    boSkill70RunGuard: Boolean;
    boSkill70WarDisHumRun: Boolean;

    nSkill71PowerRate: Integer;
    boSkill71MbAttackMon: Boolean;
    boSkill71MbAttackHuman: Boolean;
    boSkill71MbAttackSlave: Boolean;
    boSkill71MbFastParalysis: Boolean;

    nSkill72PowerRate: Integer;
    boSkill72MbAttackMon: Boolean;
    boSkill72MbAttackHuman: Boolean;
    boSkill72MbAttackSlave: Boolean;
    boSkill72Damagearmor: Boolean;
    boSkill72DecHealth: Boolean;
    boSkill72MbFastParalysis: Boolean;

    boAllow32HorseGetExp: Boolean;
    n32HorseGetExpRate: Integer;
    boAllow33HorseGetExp: Boolean;
    n33HorseGetExpRate: Integer;
    n33HorseGetExpRate2: Integer;
    nHorseAliveTime: Integer;
    nTakeOnHorseUseTime: Integer;
    nDomesticationRate: Integer;
    boDomesticationUseWeapon: Boolean;
    boDomesticationCheckLevel: Boolean;

    nEtenMagicSize: Integer;
    nEtenPowerRate: Integer;
    nProtectShieldRunRate0: Integer;
    nProtectShieldRunRate1: Integer;
    nProtectShieldRunRate2: Integer;
    nProtectShieldRunRate3: Integer;
    nProtectShieldDelDamage0: Integer;
    nProtectShieldDelDamage1: Integer;
    nProtectShieldDelDamage2: Integer;
    nProtectShieldDelDamage3: Integer;
    nMagTammingHPRate: Integer;

    nMagTammingCount: Integer;//诱惑数量 20080504
    nMabMabeHitRandRate: Integer;//火焰冰角色等级相差机率  20080504
    nMabMabeHitMinLvLimit: Integer;//火焰冰角色等级相差限制  20080504
    nMabMabeHitSucessRate: Integer;//麻痹命中机率 20080504
    nMabMabeHitMabeTimeRate: Integer;//麻痹时间参数倍率 20080504
    sCASTLENAME: string;
    sCastleHomeMap: string;
    nCastleHomeX: Integer;
    nCastleHomeY: Integer;
    nCastleWarRangeX: Integer;
    nCastleWarRangeY: Integer;
    nCastleTaxRate: Integer;//税收率(1000) 20080503
    boGetAllNpcTax: Boolean;
    nHireGuardPrice: Integer;
    nHireArcherPrice: Integer;
    nCastleGoldMax: Integer;
    nCastleOneDayGold: Integer;
    nRepairDoorPrice: Integer;
    nRepairWallPrice: Integer;
    nCastleMemberPriceRate: Integer;//折扣率(200) 20080503
    nMaxHitMsgCount: Integer;
    nMaxSpellMsgCount: Integer;
    nMaxRunMsgCount: Integer;
    nMaxWalkMsgCount: Integer;
    nMaxTurnMsgCount: Integer;
    nMaxSitDonwMsgCount: Integer;
    nMaxDigUpMsgCount: Integer;
    nMaxButchMsgCount: Integer;
    boSpellSendUpdateMsg: Boolean;
    boActionSendActionMsg: Boolean;
    boKickOverSpeed: Boolean;
    btSpeedControlMode: Byte;
    nOverSpeedKickCount: Integer;
    dwDropOverSpeed: LongWord;
    dwHitFrameTime: LongWord;
    dwMagicHitFrameTime: LongWord;
    dwHitIntervalTime: LongWord; //攻击间隔
    dwMagicHitIntervalTime: LongWord; //魔法间隔
    dwRunIntervalTime: LongWord; //跑步间隔
    dwWalkIntervalTime: LongWord; //走路间隔
    dwTurnIntervalTime: LongWord; //换方向间隔
    dwButchIntervalTime: LongWord;
    boControlActionInterval: Boolean;//启用组合操作控制
    boControlWalkHit: Boolean;
    boControlRunLongHit: Boolean;
    boControlRunHit: Boolean;
    boControlRunMagic: Boolean;
    dwActionIntervalTime: LongWord; //组合操作间隔
    dwRunLongHitIntervalTime: LongWord; //跑位刺杀间隔
    dwRunHitIntervalTime: LongWord; //跑位攻击间隔
    dwWalkHitIntervalTime: LongWord; //走位攻击间隔
    dwRunMagicIntervalTime: LongWord; //跑位魔法间隔
    boDisableStruck: Boolean; //不显示人物弯腰动作
    boDisableSelfStruck: Boolean; //自己不显示人物弯腰动作
    dwStruckTime: LongWord; //人物弯腰停留时间
    dwKillMonExpMultiple: LongWord;
    dwRequestVersion: LongWord;
    boHighLevelKillMonFixExp: Boolean;
    boAddUserItemNewValue: Boolean;//物品增加新属性
    boLowLevelKillMonContainExp: Boolean;
    nLowLevelKillMonLevel: Integer;
    nLowLevelKillMonGetExpRate: Integer;
    sLineNoticePreFix: string;
    sSysMsgPreFix: string;
    sGuildMsgPreFix: string;
    sGroupMsgPreFix: string;
    sHintMsgPreFix: string;
    sGMRedMsgpreFix: string;
    sMonSayMsgpreFix: string;
    sCustMsgpreFix: string;
    sCastleMsgpreFix: string;
    sClairaudientFix: string;
    sGuildInfo: string;
    sGuildNotice: string;
    sGuildWar: string;
    sGuildAll: string;
    sGuildMember: string;
    sGuildMemberRank: string;
    sGuildChief: string;
    boKickAllUser: Boolean;
    boTestSpeedMode: Boolean;
    ClientConf: TServerConf;//客户端配置信息
    nWeaponMakeUnLuckRate: Integer;//祝福油诅咒机率(500) 20080504
    nWeaponMakeLuckPoint1: Integer;//祝福油武器一级点数(500) 20080504
    nWeaponMakeLuckPoint2: Integer;//祝福油武器二级点数(500) 20080504
    nWeaponMakeLuckPoint3: Integer;//祝福油武器三级点数(500) 20080504
    nWeaponMakeLuckPoint2Rate: Integer;//祝福油武器二级机率(500) 20080504
    nWeaponMakeLuckPoint3Rate: Integer;//祝福油武器三级机率(500) 20080504
    nWeaponMakeUnLuckMaxCount: Integer;
    boCheckUserItemPlace: Boolean;
    nClientKey: Integer;
    nLevelValueOfTaosHP: Integer;
    nLevelValueOfTaosHPRate: Double;
    nLevelValueOfTaosMP: Integer;
    nLevelValueOfWizardHP: Integer;
    nLevelValueOfWizardHPRate: Double;
    nLevelValueOfWarrHP: Integer;
    nLevelValueOfWarrHPRate: Double;
    nProcessMonsterInterval: Integer;

    nAppIconCrc: Integer;
    boCheckFail: Boolean;
    BoneFammArray: array[0..9] of TRecallMigic;
    DogzArray: array[0..9] of TRecallMigic;
    MoonSpiritArray: array[0..9] of TRecallMigic;

    boIDSocketConnected: Boolean;
    UserIDSection: TRTLCriticalSection;
    IDSocket: integer;
    sIDSocketRecvText: string;
    nIDSocketRecvIncLen: Integer;
    nIDSocketRecvMaxLen: Integer;
    nIDSocketRecvCount: Integer;
    nIDReceiveMaxTime: Integer;
    nIDSocketWSAErrCode: Integer;
    nIDSocketErrorCount: Integer;
    nDBSocketSendLen: Integer;
    nLoadDBCount: Integer;
    nLoadDBErrorCount: Integer;
    nSaveDBCount: Integer;
    nDBQueryID: Integer;
    boDBSocketConnected: Boolean;
    nDBSocketRecvIncLen: Integer;
    nDBSocketRecvMaxLen: Integer;
    sDBSocketRecvText: string;
    pDBSocketRecvBuff: PChar;
    nDBSocketRecvLeng: Integer;
    nDBSocketSendLeng: Integer;

    boDBSocketWorking: Boolean;
    nDBSocketRecvCount: Integer;
    nDBReceiveMaxTime: Integer;
    nDBSocketWSAErrCode: Integer;
    nDBSocketErrorCount: Integer;

    UserEngineThread: TThreadInfo;
    IDSocketThread: TThreadInfo;
    DBSocketThread: TThreadInfo;
    DBSocketSection: TRTLCriticalSection;

    nServerFile_CRCB: Integer;
    nServerFile_CRCA: Integer;

    nClientFile1_CRC: Integer;
    nClientFile2_CRC: Integer;
    nClientFile3_CRC: Integer;

    Encode6BitBuf: TEncode6BitBuf;
    Decode6BitBuf: TDecode6BitBuf;

    boPullPlayObject: Boolean;
    nMagDelayTimeDoubly: Integer;
    nMagPowerDoubly: Integer;
    boPlayObjectReduceMP: Boolean;//打中目标，目标是否掉蓝
    boGroupMbAttackSlave: Boolean;
    nBigStorageLimitCount: Integer;//无限仓库物品上限
    boDropGoldToPlayBag: Boolean; //金币入包
    boChangeUseItemNameByPlayName: Boolean;
    sChangeUseItemName: string;
    boUseFixExp: Boolean;//达到1000后是否使用引擎经验
    nBaseExp: Integer;
    nAddExp: Integer;
    nDedingUseTime: Integer;//彻地钉使用间隔(100) 20080504
    boDedingAllowPK: Boolean;
    boRegenMonsters: Boolean;
    boShowMonLevel: Boolean;
    sShowMonLevelFormat: string;
    boSkill66ReduceMP: Boolean;

    dwGetDBSockMsgTime: LongWord;//等待DBS返回消息的时间
    boPullCrossInSafeZone: Boolean;
    boHighLevelGroupFixExp: Boolean;
    boStartDropItemMapEvent: Boolean;
    boStartPickUpItemMapEvent: Boolean;
    boStartHeavyHitMapEvent: Boolean;
    boStartWalkMapEvent: Boolean;
    boStartRunMapEvent: Boolean;

    nLimitExpLevel: Integer;//限制等级 20080503
    nLimitExpValue: Integer;

    boChangeMapFireExtinguish: Boolean;
    nFireDelayTimeRate: Integer;//火墙有效时间倍数 20080504
    nFirePowerRate: Integer;//火墙威力倍数 20080504
    nFirePlayDamageTimeRate: LongWord;
    nFireMonDamageTimeRate: LongWord;
    nDidingPowerRate: Integer;
    boCheckGuild: Boolean;
    boCloseWuXin: Boolean;

    vCompoundSet: TCompoundSet;
  end;

  TGameCommand = record
    Data,
      PRVMSG,
      ALLOWMSG,
      LETSHOUT,
      LETTRADE,
      LETGUILD,
      ENDGUILD,
      BANGUILDCHAT,
      AUTHALLY,
      AUTH,
      AUTHCANCEL,
      DIARY,
      USERMOVE,
      SEARCHING,
      ALLOWGROUPCALL,
      GROUPRECALLL,
      ALLOWGUILDRECALL,
      GUILDRECALLL,
      UNLOCKSTORAGE,
      UnLock,
      Lock,
      PASSWORDLOCK,
      SETPASSWORD,
      CHGPASSWORD,
      CLRPASSWORD,
      UNPASSWORD,
      MEMBERFUNCTION,
      MEMBERFUNCTIONEX,
      DEAR,
      ALLOWDEARRCALL,
      DEARRECALL,//夫妻传送
      MASTER,
      ALLOWMASTERRECALL,
      MASTERECALL,
      ALLOWFIREND,
      ATTACKMODE,
      REST,
      TAKEONHORSE,
      TAKEOFHORSE,
      HUMANLOCAL,
      Move,
      POSITIONMOVE,
      INFO,
      MOBLEVEL,
      MOBCOUNT,
      HUMANCOUNT,
      Map,
      KICK,
      TING,
      SUPERTING,
      MAPMOVE,
      SHUTUP,
      RELEASESHUTUP,
      SHUTUPLIST,
      GAMEMASTER,
      OBSERVER,
      SUEPRMAN,
      Level,
      SABUKWALLGOLD,
      RECALL,
      REGOTO,
      SHOWFLAG,
      SHOWOPEN,
      SHOWUNIT,
      Attack,
      MOB,
      MOBNPC,
      DELNPC,
      NPCSCRIPT,
      RECALLMOB,
      LUCKYPOINT,
      LOTTERYTICKET,
      RELOADGUILD,
      RELOADLINENOTICE,
      RELOADABUSE,
      BACKSTEP,
      BALL,
      FREEPENALTY,
      PKPOINT,
      IncPkPoint,
      CHANGELUCK,
      HUNGER,
      HAIR,
      TRAINING,
      DELETESKILL,
      CHANGEJOB,
      CHANGEGENDER,
      NAMECOLOR,
      Mission,
      MobPlace,
      TRANSPARECY,
      DELETEITEM,
      LEVEL0,
      CLEARMISSION,
      SETFLAG,
      SETOPEN,
      SETUNIT,
      RECONNECTION,
      DISABLEFILTER,
      CHGUSERFULL,
      CHGZENFASTSTEP,
      CONTESTPOINT,
      STARTCONTEST,
      ENDCONTEST,
      ANNOUNCEMENT,
      OXQUIZROOM,
      GSA,
      CHANGEITEMNAME,
      DISABLESENDMSG,
      ENABLESENDMSG,
      DISABLESENDMSGLIST,
      KILL,
      MAKE,
      SMAKE,
      BonusPoint,
      DELBONUSPOINT,
      RESTBONUSPOINT,
      FIREBURN,
      TESTFIRE,
      TESTSTATUS,
      DELGOLD,
      ADDGOLD,
      DELGAMEGOLD,//删除游戏币
      ADDGAMEGOLD,//增加游戏币
      GAMEGOLD,//调整游戏币
      GAMEPOINT,
      CREDITPOINT,
      TESTGOLDCHANGE,
      REFINEWEAPON,
      RELOADADMIN,
      ReLoadNpc,
      RELOADMANAGE,
      RELOADROBOTMANAGE,
      RELOADROBOT,
      RELOADMONITEMS,
      RELOADDIARY,
      RELOADITEMDB,
      RELOADMAGICDB,
      RELOADMONSTERDB,
      RELOADMINMAP,
      ReAlive,
      ADJUESTLEVEL,//调整人物等级
      ADJUESTEXP,
      AddGuild,
      DELGUILD,
      CHANGESABUKLORD,
      FORCEDWALLCONQUESTWAR,
      ADDTOITEMEVENT,
      ADDTOITEMEVENTASPIECES,
      ItemEventList,
      STARTINGGIFTNO,
      DELETEALLITEMEVENT,
      STARTITEMEVENT,
      ITEMEVENTTERM,
      ADJUESTTESTLEVEL,
      TRAININGSKILL,
      OPDELETESKILL,
      CHANGEWEAPONDURA,
      RELOADGUILDALL,
      WHO,
      TOTAL,
      TESTGA,
      MAPINFO,
      SBKDOOR,
      CHANGEDEARNAME,
      CHANGEMASTERNAME,
      STARTQUEST,
      SETPERMISSION,
      CLEARMON,
      RENEWLEVEL,
      DENYIPLOGON,
      DENYACCOUNTLOGON,
      DENYCHARNAMELOGON,
      DELDENYIPLOGON,
      DELDENYACCOUNTLOGON,
      DELDENYCHARNAMELOGON,
      SHOWDENYIPLOGON,
      SHOWDENYACCOUNTLOGON,
      SHOWDENYCHARNAMELOGON,
      VIEWWHISPER,
      SPIRIT,
      SPIRITSTOP,
      SETMAPMODE,
      SHOWMAPMODE,
      TESTSERVERCONFIG,
      SERVERSTATUS,
      TESTGETBAGITEM,
      CLEARBAG,
      SHOWUSEITEMINFO,
      BINDUSEITEM,
      MOBFIREBURN,
      TESTSPEEDMODE,
      REMTEMSG,
      COLORSAY,
      SETCOLORSAY,
      AllowReAlive,
      USERITEM,//取玩家物品
      LOCKLOGON,
      SHOWEFFECT,//烟花
      OPENBOX,

    AllSysMsg: TGameCmd;
  end;

  TGateObj = record//地图连接点
    boRandom: Boolean;
    DEnvir: TEnvirnoment;
    nDMapX: Integer;
    nDMapY: Integer;
  end;
  pTGateObj = ^TGateObj;

  pTRandomGateObj = ^TRandomGateObj;
  TRandomGateObj = packed record
    sName: string[40];
    SEnvir: TEnvirnoment;
    nX, nY: Word;
    GateObj: pTGateObj;
    dwRunTime: LongWord;
    Event: THolyCurtainEvent;
  end;

  pTMakePoisonInfo = ^TMakePoisonInfo;
  TMakePoisonInfo = packed record
    BaseObject: TBaseObject;
    nX: Word;
    nY: Word;
    nRate: Integer;
    boFastParalysis: Boolean;
  end;

  pTMapQuestInfo = ^TMapQuestInfo;
  TMapQuestInfo = record//任务地图
    nFlag: Integer;
    nValue: Integer;
    nFlag2: Integer;
    nValue2: Integer;
    sMonName: string[14];//怪物名称
    boGroup: Boolean;
    NPC: TMerchant;
    Envir: TEnvirnoment;
  end;
  
  TMagicEvent = record
    BaseObjectList: TList;
    dwStartTick: LongWord;
    dwTime: LongWord;
    Events: array[0..7] of THolyCurtainEvent;
  end;
  pTMagicEvent = ^TMagicEvent;

{$IF OEMVER = OEM775}
  TLevelInfo = record
    wHP: Integer;
    wMP: Integer;
    dwExp: LongWord;
    wAC: Integer;
    wMaxAC: Integer;
    wACLimit: Integer;
    wMAC: Integer;
    wMaxMAC: Integer;
    wMACLimit: Integer;
    wDC: Integer;
    wMaxDC: Integer;
    wDCLimit: Integer;
    dwDCExp: Integer;
    wMC: Integer;
    wMaxMC: Integer;
    wMCLimit: Integer;
    dwMCExp: Integer;
    wSC: Integer;
    wMaxSC: Integer;
    wSCLimit: Integer;
    dwSCExp: LongWord;
  end;

{$IFEND}

procedure SetProcessName(sName: string);
{$IFDEF PLUGOPEN}
function AddToPulgProcTable(sProcName: string; nCheckCode: Integer): Integer;
{$ENDIF}
function GetExVersionNO(nVersionDate: Integer; var nOldVerstionDate: Integer): Integer;
function GetNextDirection(sX, sY, dx, dy: Integer): Byte;
function LoadLineNotice(FileName: string): Boolean;
function LoadLineHint(FileName: string): Boolean;
function GetMultiServerAddrPort(btServerIndex: Byte; var sIPaddr: string; var nPort: Integer): Boolean;
procedure MainOutMessage(Msg: string);

function AddDateTimeOfDay(DateTime: TDateTime; nDay: Integer): TDateTime;
function GetGoldShape(nGold: Integer): Word; //金币在地上显示的外形ID
function GetRandomLook(nBaseLook, nRage: Integer): Integer;
function FilterShowName(sName: string): string;
function CheckGuildName(sGuildName: string): Boolean;
function CheckUserItems(nIdx: Integer; StdItem: pTStdItem): Boolean;
function GetItemNumber(): Integer;
function GetItemNumberEx(): Integer;
function sub_4B2F80(nDir, nRage: Integer): Byte;
function GetValNameNo(sText: string): Integer;

function GetMakeItemInfo(wIdent: Word): pTMakeItem;
procedure AddLogonCostLog(sMsg: string);
procedure AddGameLog(BaseObject: TBaseObject; nLogID: Integer; ItemName: string; ItemIndex, ItemCount: Integer;
  sDealName, sTest1, sTest2, sTest3: string; Item: pTUserItem);
procedure TrimStringList(sList: TStringList);

function SaveAdminList(): Boolean;
function LoadUnMasterList(): Boolean;
function SaveUnMasterList(): Boolean;
function LoadUnMarryList(): Boolean;
function SaveUnMarryList(): Boolean;
function LoadUnForceMasterList(): Boolean;
function SaveUnForceMasterList(): Boolean;

function LoadUnFriendList(): Boolean;
function SaveUnFriendList(): Boolean;

function LoadRuleItemList(): Boolean;
function SaveRuleItemList(): Boolean;

function LoadMonDropLimitList(): Boolean;
function SaveMonDropLimitList(): Boolean;
function GetMonDropLimitByName(sName: string): pTMonDropLimitInfo;
//function GetRuleItem(sItemName: string): pTItemRule;

function IntegerChange(var pInt: Integer; nCount: Integer; btChange: Byte): Boolean;
function WordChange(var pInt: Word; nCount: Integer; btChange: Byte): Boolean;
function ByteChange(var pInt: Byte; nCount: Integer; btChange: Byte): Boolean;

function GetUseItemName(nIndex: Integer): string;
function GetUseItemIdx(sName: string): Integer;

function LoadDisableSendMsgList(): Boolean;
function SaveDisableSendMsgList(): Boolean;
function GetDisableSendMsgList(sHumanName: string): Boolean;
function LoadGameLogItemNameList(): Boolean;
function GetGameLogItemNameList(sItemName: string): Byte;
function SaveGameLogItemNameList(): Boolean;
function LoadDenyIPAddrList(): Boolean;
function GetDenyIPaddrList(sIPaddr: string): Boolean;
function SaveDenyIPAddrList(): Boolean;
function LoadDenyAccountList(): Boolean;
function GetDenyAccountList(sAccount: string): Boolean;
function SaveDenyAccountList(): Boolean;
function LoadDenyChrNameList(): Boolean;
function GetDenyChrNameList(sChrName: string): Boolean;
function SaveDenyChrNameList(): Boolean;

function LoadFilterSayList(): Boolean;
function LoadFilterGuildList(): Boolean;
function LoadFilterShopList(): Boolean;
function CheckFilterGuild(sName: string): Boolean;
function CheckFilterShop(sName: string): Boolean;

procedure LoadExp();
procedure LoadGameCommand();
procedure LoadString();
procedure LoadConfig();
function GetRGB(c256: Byte): TColor; stdcall;
function SendGameCenterMsg(wIdent: Word; sSENDMSG: string): Integer;

function GetIPLocal(sIPaddr: string): string;

function IsCheapStuff(tByte: Byte): Boolean;
function CompareIPaddr(sIPaddr, dIPaddr: string): Boolean;
function GetStartPointInfo(nIndex: Integer; var nX, nY: Integer): string;
function GetStartTime(nTime: LongWord): string;
procedure StartFixExp();
function CheckBeeline(nX, nY, sX, sY: Integer): Boolean;

function GetBindItemType(nShape: Integer): Integer;
procedure LoadBindItemTypeFromUnbindList();

function GetFilesSize(FileName: string): Integer;
function SetSayItem(UserItem: pTUserItem): Integer;
function GetSayItem(Index: Integer): pTUserItem;
function GetLoginPlay(Index: Integer): TPlayObject;
procedure SetLoginPlay(Index: Integer; PlayObject: TPlayObject);

function GetCompoundInfo(const sItemName: string; nLevel: Integer): pTCompoundInfo;
function GetCompoundInfos(const sItemName: string): pTCompoundInfos;
procedure SaveCompoundInfos;
procedure UpgradeCompoundItem(AUserItem: pTUserItem; AUpgradeCom: pTCompoundInfo);

var
  g_boDayChange: Boolean;
  g_boDBSocketRead: Boolean;
  g_TaxisAllList: THumSort;
  g_TaxisWarrList: THumSort;
  g_TaxisWaidList: THumSort;
  g_TaxisTaosList: THumSort;
  g_TaxisMasterList: THumSort;

  g_TaxisHeroAllList: THeroSort;
  g_TaxisHeroWarrList: THeroSort;
  g_TaxisHeroWaidList: THeroSort;
  g_TaxisHeroTaosList: THeroSort;

  sSoftVersionType: string;
  g_dwGameCenterHandle: THandle;
  nAppFilesSize: Integer = 0;

  IsDebuggerPresent: function(): Boolean; stdcall;

{$IF OEMVER = OEM775}
  Level775: TIniFile;
{$IFEND}
  Config: TIniFile;
  CommandConf: TIniFile;
  StringConf: TIniFile;
  ExpConf: TIniFile;
  GlobalConf: TIniFile;
  Memo: TMemo;
{$IFDEF PLUGOPEN}
  PlugProcArray: TProcArray;
  PlugInEngine: TPlugInManage;
  zPlugOfEngine: TPlugOfEnginge;
{$ENDIF}
  RunSocket: TRunSocket;
  MainLogMsgList: TStringList;//程序的提示列表
  LogStringList: TStringList;
  LogonCostLogList: TStringList;
  g_MapManager: TMapManager;//地图管理类
  g_FBMapManager: TGStringList;
  ItemUnit: TItemUnit;
  MagicManager: TMagicManager;
  //NoticeManager: TNoticeManager;

  g_GuildManager: TGuildManager;//行会管理类
  g_EventManager: TEventManager;
  g_CastleManager: TCastleManager;//城堡管理类

  FrontEngine: TFrontEngine;
  UserEngine: TUserEngine;
  RobotManage: TRobotManage;
  SystemObject: TRobotObject;
  g_MakeItemList: TList;//制造物品列表
  g_BoxsList: TList;
  g_StartPointList: TGStringList;
  ServerTableList: TList;
  g_DenySayMsgList: TQuickList;
  MiniMapList: TStringList;//小地图列表
  g_UnbindList: TStringList;//解包列表
  LineNoticeList: TStringList;//公告信息列表
  g_MapQuestList: TList;
  //QuestDiaryList: TList;
  ItemEventList: TStringList;
  //  AbuseTextList: TStringList;
  g_MonSayMsgList: TStringList; //怪物说明信息列表
  g_FilterSay: TGStringList;
  g_FilterMD5: string = '0';
  g_FilterData: string;
  g_FilterDataLen: Integer = 0;
  g_FilterGuild: TGStringList;
  g_FilterShop: TGStringList;
  //g_SetItems: TGList;

  g_DisableSendMsgList: TGStringList; //禁止发信息名称列表

  g_MapEventList: TGList;

  g_SayItemList: array[0..MAXSAYITEMCOUNT] of TUserItem;
  g_SayItemIndex: Integer;

  g_MsgFilterList: TGList;

  g_BindItemTypeList: TGList;

  g_CompoundInfoList: TGStringList;

  g_UnMasterList: TGStringList; //出师记录表
  g_UnMarryList: TGStringList;
  g_UserCmdList: TGStringList;
  g_MonDropLimitList: TGList;
  g_UnForceMasterList: TGStringList; //强行出师记录表
  g_GameLogItemNameList: TGStringList; //游戏日志物品名
  g_boGameLogGold: Boolean;//是否写入日志(金币)
  g_boGameLogBindGold: Boolean;
  g_boGameLogGameGold: Boolean;//是否写入日志(调整游戏币)
  g_boGameLogGamePoint: Boolean;
  g_boGameLogHumanDie: Boolean;
  g_boGameLogGameDiamond: Boolean;
  g_boGameLogCreditPoint: Boolean;
  g_boGameLogCustomVariable: Boolean;
  g_DenyIPAddrList: TGStringList; //IP过滤列表
  g_DenyChrNameList: TGStringList; //角色过滤列表
  g_DenyAccountList: TGStringList; //登录帐号过滤列表
  g_UnFriendList: TStringList;
  g_SetItemsList: TList;
  g_SetItemsArr: array of Boolean;

  n4EBBD0: Integer;

  g_nIdent: Integer;
  g_ProcessMsg: TProcessMessage;
  LogMsgCriticalSection: TRTLCriticalSection;
  ProcessMsgCriticalSection: TRTLCriticalSection;
  UserDBSection: TRTLCriticalSection;
  ProcessHumanCriticalSection: TRTLCriticalSection;

  CS_6: TCriticalSection;

  g_nTotalHumCount: Integer;

  g_boMission: Boolean;//是否设置怪物集中点
  g_sMissionMap: string;//怪物集中点 地图
  g_nMissionX: Integer;//怪物集中点X
  g_nMissionY: Integer;//怪物集中点Y

  boStartReady: Boolean;
  g_boExitServer: Boolean;
  boFilterWord: Boolean;

  sLogFileName: string;
  nRunTimeMin: Integer;// RunTimerTimer 在 1 秒内执行的次数；RunTimerTimer 的间隔设定为 1ms
  nRunTimeMax: Integer;// 记录 nRunTimeMin 的最大值

  g_nBaseObjTimeMin: Integer;
  g_nBaseObjTimeMax: Integer;
  g_nSockCountMin: Integer;
  g_nSockCountMax: Integer;
  g_nUsrTimeMin: Integer;
  g_nUsrTimeMax: Integer;
  g_nHumCountMin: Integer;
  g_nHumCountMax: Integer;
  g_nMonTimeMin: Integer;
  g_nMonTimeMax: Integer;
  g_nMonGenTime: Integer;
  g_nMonGenTimeMin: Integer;
  g_nMonGenTimeMax: Integer;
  g_nMonProcTime: Integer;
  g_nMonProcTimeMin: Integer;
  g_nMonProcTimeMax: Integer;
  g_nSendLogCount: Integer;
  g_nSendLogErrorCount: Integer;
  dwUsrRotCountMin: Integer;
  dwUsrRotCountMax: Integer;

  g_dwUsrRotCountTick: LongWord;
  g_nProcessHumanLoopTime: Integer;//处理人物列表循环次数

  g_dwHumLimit: LongWord = 30;
  g_dwMonLimit: LongWord = 30;
  g_dwZenLimit: LongWord = 5;
  g_dwZenLimit2: LongWord = 2;
  g_dwNpcLimit: LongWord = 5;
  g_dwSocLimit: LongWord = 10;
  g_dwSocCheckTimeOut: LongWord = 50;
  nDecLimit: Integer = 20;
  nShiftUsrDataNameNo: Integer;
{$IF OEMVER = OEM775}
  sConfig775FileName: string = '.\775.txt';
{$IFEND}
  sConfigFileName: string = '.\!Setup.txt';
  sExpConfigFileName: string = '.\Exps.ini';
  sCommandFileName: string = '.\Command.ini';
  sStringFileName: string = '.\String.ini';
  sGlobalFileName: string = '.\Global.ini';
  dwRunDBTimeMax: LongWord;
  g_dwStartTick: LongWord; //启动间隔

  g_dwRunTick: LongWord; //运行间隔
  n4EBD1C: Integer;// 1s 内的 RunTimerTimer 执行计数，最终会传递给 nRunTimeMin

  g_nGameTime: Integer;

  g_MakeMagicList: array[0..9] of TList;
  g_nMakeMagicCount: Integer;
  g_nMakeMagicDataLen: Integer;
  g_sMakeMagicDataMD5: string;
  g_sMakeMagicData: string;

  g_sMonGenInfo1: string;
  g_sMonGenInfo2: string;
  g_sProcessName: string;
  g_sOldProcessName: string;
  g_ManageNPC: TNormNpc;
  g_RobotNPC: TNormNpc;
  g_FunctionNPC: TFunMerchant;//脚本触发NPC
  g_MapEventNpc: TMerchant;
  g_DynamicVarList: TList;
  nCurrentMonthly: Integer;
  nTotalTimeUsage: Integer;
  nLastMonthlyTotalUsage: Integer;
  nGrossTotalCnt: Integer;
  nGrossResetCnt: Integer;
  n4EBB68: Integer;
  n4EBB6C: Integer;

  ColorTable: array[0..255] of TRGBQuad;
  ColorArray: array[0..1023] of Byte = (
    $00, $00, $00, $00, $00, $00, $80, $00, $00, $80, $00, $00, $00, $80, $80,
    $00,
    $80, $00, $00, $00, $80, $00, $80, $00, $80, $80, $00, $00, $C0, $C0, $C0,
    $00,
    $97, $80, $55, $00, $C8, $B9, $9D, $00, $73, $73, $7B, $00, $29, $29, $2D,
    $00,
    $52, $52, $5A, $00, $5A, $5A, $63, $00, $39, $39, $42, $00, $18, $18, $1D,
    $00,
    $10, $10, $18, $00, $18, $18, $29, $00, $08, $08, $10, $00, $71, $79, $F2,
    $00,
    $5F, $67, $E1, $00, $5A, $5A, $FF, $00, $31, $31, $FF, $00, $52, $5A, $D6,
    $00,
    $00, $10, $94, $00, $18, $29, $94, $00, $00, $08, $39, $00, $00, $10, $73,
    $00,
    $00, $18, $B5, $00, $52, $63, $BD, $00, $10, $18, $42, $00, $99, $AA, $FF,
    $00,
    $00, $10, $5A, $00, $29, $39, $73, $00, $31, $4A, $A5, $00, $73, $7B, $94,
    $00,
    $31, $52, $BD, $00, $10, $21, $52, $00, $18, $31, $7B, $00, $10, $18, $2D,
    $00,
    $31, $4A, $8C, $00, $00, $29, $94, $00, $00, $31, $BD, $00, $52, $73, $C6,
    $00,
    $18, $31, $6B, $00, $42, $6B, $C6, $00, $00, $4A, $CE, $00, $39, $63, $A5,
    $00,
    $18, $31, $5A, $00, $00, $10, $2A, $00, $00, $08, $15, $00, $00, $18, $3A,
    $00,
    $00, $00, $08, $00, $00, $00, $29, $00, $00, $00, $4A, $00, $00, $00, $9D,
    $00,
    $00, $00, $DC, $00, $00, $00, $DE, $00, $00, $00, $FB, $00, $52, $73, $9C,
    $00,
    $4A, $6B, $94, $00, $29, $4A, $73, $00, $18, $31, $52, $00, $18, $4A, $8C,
    $00,
    $11, $44, $88, $00, $00, $21, $4A, $00, $10, $18, $21, $00, $5A, $94, $D6,
    $00,
    $21, $6B, $C6, $00, $00, $6B, $EF, $00, $00, $77, $FF, $00, $84, $94, $A5,
    $00,
    $21, $31, $42, $00, $08, $10, $18, $00, $08, $18, $29, $00, $00, $10, $21,
    $00,
    $18, $29, $39, $00, $39, $63, $8C, $00, $10, $29, $42, $00, $18, $42, $6B,
    $00,
    $18, $4A, $7B, $00, $00, $4A, $94, $00, $7B, $84, $8C, $00, $5A, $63, $6B,
    $00,
    $39, $42, $4A, $00, $18, $21, $29, $00, $29, $39, $46, $00, $94, $A5, $B5,
    $00,
    $5A, $6B, $7B, $00, $94, $B1, $CE, $00, $73, $8C, $A5, $00, $5A, $73, $8C,
    $00,
    $73, $94, $B5, $00, $73, $A5, $D6, $00, $4A, $A5, $EF, $00, $8C, $C6, $EF,
    $00,
    $42, $63, $7B, $00, $39, $56, $6B, $00, $5A, $94, $BD, $00, $00, $39, $63,
    $00,
    $AD, $C6, $D6, $00, $29, $42, $52, $00, $18, $63, $94, $00, $AD, $D6, $EF,
    $00,
    $63, $8C, $A5, $00, $4A, $5A, $63, $00, $7B, $A5, $BD, $00, $18, $42, $5A,
    $00,
    $31, $8C, $BD, $00, $29, $31, $35, $00, $63, $84, $94, $00, $4A, $6B, $7B,
    $00,
    $5A, $8C, $A5, $00, $29, $4A, $5A, $00, $39, $7B, $9C, $00, $10, $31, $42,
    $00,
    $21, $AD, $EF, $00, $00, $10, $18, $00, $00, $21, $29, $00, $00, $6B, $9C,
    $00,
    $5A, $84, $94, $00, $18, $42, $52, $00, $29, $5A, $6B, $00, $21, $63, $7B,
    $00,
    $21, $7B, $9C, $00, $00, $A5, $DE, $00, $39, $52, $5A, $00, $10, $29, $31,
    $00,
    $7B, $BD, $CE, $00, $39, $5A, $63, $00, $4A, $84, $94, $00, $29, $A5, $C6,
    $00,
    $18, $9C, $10, $00, $4A, $8C, $42, $00, $42, $8C, $31, $00, $29, $94, $10,
    $00,
    $10, $18, $08, $00, $18, $18, $08, $00, $10, $29, $08, $00, $29, $42, $18,
    $00,
    $AD, $B5, $A5, $00, $73, $73, $6B, $00, $29, $29, $18, $00, $4A, $42, $18,
    $00,
    $4A, $42, $31, $00, $DE, $C6, $63, $00, $FF, $DD, $44, $00, $EF, $D6, $8C,
    $00,
    $39, $6B, $73, $00, $39, $DE, $F7, $00, $8C, $EF, $F7, $00, $00, $E7, $F7,
    $00,
    $5A, $6B, $6B, $00, $A5, $8C, $5A, $00, $EF, $B5, $39, $00, $CE, $9C, $4A,
    $00,
    $B5, $84, $31, $00, $6B, $52, $31, $00, $D6, $DE, $DE, $00, $B5, $BD, $BD,
    $00,
    $84, $8C, $8C, $00, $DE, $F7, $F7, $00, $18, $08, $00, $00, $39, $18, $08,
    $00,
    $29, $10, $08, $00, $00, $18, $08, $00, $00, $29, $08, $00, $A5, $52, $00,
    $00,
    $DE, $7B, $00, $00, $4A, $29, $10, $00, $6B, $39, $10, $00, $8C, $52, $10,
    $00,
    $A5, $5A, $21, $00, $5A, $31, $10, $00, $84, $42, $10, $00, $84, $52, $31,
    $00,
    $31, $21, $18, $00, $7B, $5A, $4A, $00, $A5, $6B, $52, $00, $63, $39, $29,
    $00,
    $DE, $4A, $10, $00, $21, $29, $29, $00, $39, $4A, $4A, $00, $18, $29, $29,
    $00,
    $29, $4A, $4A, $00, $42, $7B, $7B, $00, $4A, $9C, $9C, $00, $29, $5A, $5A,
    $00,
    $14, $42, $42, $00, $00, $39, $39, $00, $00, $59, $59, $00, $2C, $35, $CA,
    $00,
    $21, $73, $6B, $00, $00, $31, $29, $00, $10, $39, $31, $00, $18, $39, $31,
    $00,
    $00, $4A, $42, $00, $18, $63, $52, $00, $29, $73, $5A, $00, $18, $4A, $31,
    $00,
    $00, $21, $18, $00, $00, $31, $18, $00, $10, $39, $18, $00, $4A, $84, $63,
    $00,
    $4A, $BD, $6B, $00, $4A, $B5, $63, $00, $4A, $BD, $63, $00, $4A, $9C, $5A,
    $00,
    $39, $8C, $4A, $00, $4A, $C6, $63, $00, $4A, $D6, $63, $00, $4A, $84, $52,
    $00,
    $29, $73, $31, $00, $5A, $C6, $63, $00, $4A, $BD, $52, $00, $00, $FF, $10,
    $00,
    $18, $29, $18, $00, $4A, $88, $4A, $00, $4A, $E7, $4A, $00, $00, $5A, $00,
    $00,
    $00, $88, $00, $00, $00, $94, $00, $00, $00, $DE, $00, $00, $00, $EE, $00,
    $00,
    $00, $FB, $00, $00, $94, $5A, $4A, $00, $B5, $73, $63, $00, $D6, $8C, $7B,
    $00,
    $D6, $7B, $6B, $00, $FF, $88, $77, $00, $CE, $C6, $C6, $00, $9C, $94, $94,
    $00,
    $C6, $94, $9C, $00, $39, $31, $31, $00, $84, $18, $29, $00, $84, $00, $18,
    $00,
    $52, $42, $4A, $00, $7B, $42, $52, $00, $73, $5A, $63, $00, $F7, $B5, $CE,
    $00,
    $9C, $7B, $8C, $00, $CC, $22, $77, $00, $FF, $AA, $DD, $00, $2A, $B4, $F0,
    $00,
    $9F, $00, $DF, $00, $B3, $17, $E3, $00, $F0, $FB, $FF, $00, $A4, $A0, $A0,
    $00,
    $80, $80, $80, $00, $00, $00, $FF, $00, $00, $FF, $00, $00, $00, $FF, $FF,
    $00,
    $FF, $00, $00, $00, $FF, $00, $FF, $00, $FF, $FF, $00, $00, $FF, $FF, $FF,
    $00
    );

  g_GMRedMsgCmd: Char = '!';
  g_nGMREDMSGCMD: Integer = 6;
  g_dwSendOnlineTick: LongWord;

  g_HighLevelHuman: TObject = nil;
  g_HighPKPointHuman: TObject = nil;
  g_HighDCHuman: TObject = nil;
  g_HighMCHuman: TObject = nil;
  g_HighSCHuman: TObject = nil;
  g_HighOnlineHuman: TObject = nil;

  g_dwSpiritMutinyTick: LongWord;

{$IF USECODE = USEREMOTECODE}

{$IFEND}
  g_Config: TConfig = (
    nGuildMemberCount: 260;
    boOfflineSaveExp: True;
    boCloseShowHp: False;
    boMonShowLevel: False;
    boMonShowLevelMsg: '(Lv:%d)';
    boInfinityStorage: False;
    nInfinityStorageCount: 50;
    wNakedBeginLevel: 0;
    NakedAddInfo: (
    nNakedLevelUpAddCount: 10;
    nNakedAcCount: 7;
    nNakedAcMaxCount: 21;
    nNakedMacCount: 7;
    nNakedMacMaxCount: 21;
    nNakedDcCount: 7;
    nNakedDcMaxCount: 21;
    nNakedMcCount: 7;
    nNakedMcMaxCount: 21;
    nNakedScCount: 7;
    nNakedScMaxCount: 21;
    nNakedHPCount: 1; );

    nArmStrengthenGold: 20000; //强化装备费用
    nMakeItemGold: 20000; //打造物品费用

    nUpPhotoLevel: 40;
    nUpPhotoTick: 72;

    boOpenSelfShop: True;
    boSafeZoneShop: True;
    boMapShop: False;
    nSellOffGoldTaxRate: 10;
    nSellOffGameGoldTaxRate: 10;
    nSellOffItemCount: 5;
    nLevelItemRate: 20;

    nLevelItemGoldCount: 0;
    nLevelItemGameGoldCount: 0;

    boPlayShowMystery: True;
    boHeroShowMystery: False;
    boCloneShowMystery: False;

    HPStoneStartRate: 80;
    MPStoneStartRate: 80;
    HPStoneIntervalTime: 1000;
    MPStoneIntervalTime: 1000;
    HPStoneAddRate: 10;
    MPStoneAddRate: 10;
    HPStoneDecDura: 1000;
    MPStoneDecDura: 1000;

    nRunMagTick: 1000;
    nPullulationCount: 10;

    nEatItemsTime: 2000;
    nHpEatItemsCount: 80;
    nMpEatItemsCount: 50;

    boAllowJointAttack: True;
    nEnergyStepUpRate: 50;
    nSkillWWPowerRate: 100;
    nSkillTWPowerRate: 100;
    nSkillZWPowerRate: 100;
    nSkillTTPowerRate: 100;
    nSkillZTPowerRate: 100;
    nSkillZZPowerRate: 100;

    nConfigSize: SizeOf(TConfig);

    sServerName: '新热血传奇';
    sServerIPaddr: '127.0.0.1';
    {sRegServerAddr: '127.0.0.1';
    nRegServerPort: 10888;
    nRegSerialNumber: 0;
    nRegSerialPassWord: 0;  }
    sWebSite: 'http://www.XXXX.com';
    sBbsSite: 'http://www.XXXX.com';
    sClientDownload: 'http://www.XXXX.com';
    sQQ: '88888888';
    sPhone: '123456789';
    sBankAccount0: '银行信息';
    sBankAccount1: '银行信息';
    sBankAccount2: '银行信息';
    sBankAccount3: '银行信息';
    sBankAccount4: '银行信息';
    sBankAccount5: '银行信息';
    sBankAccount6: '银行信息';
    sBankAccount7: '银行信息';
    sBankAccount8: '银行信息';
    sBankAccount9: '银行信息';
    nServerNumber: 0;
    boVentureServer: False;
    boTestServer: True;
    boServiceMode: False;
    boNonPKServer: False;
    nTestLevel: 1;
    nTestGold: 0;
    nTestUserLimit: 1000;
    nSendBlock: 1024;
    nCheckBlock: 4069;
    nAvailableBlock: 8000;
    nGateLoad: 0;
    nUserFull: 1000;
    nZenFastStep: 300;
    boSafeOffLine: False;
    boShopSafeOffLine: True;
    nSafeOffLineLevel: 0;
    sGateAddr: '127.0.0.1';
    nGatePort: 5000;
    sDBAddr: '127.0.0.1';
    nDBPort: 6000;
    sIDSAddr: '127.0.0.1';
    nIDSPort: 5600;
    sMsgSrvAddr: '127.0.0.1';
    nMsgSrvPort: 4900;
    sLogServerAddr: '127.0.0.1';
    nLogServerPort: 10000;
    boDiscountForNightTime: False;
    nHalfFeeStart: 2;
    nHalfFeeEnd: 10;
    boViewHackMessage: False;
    boViewHackMessage2: False;
    boViewAdmissionFailure: False;
    //sBaseDir: '.\Share\';
    sGuildDir: '.\GuildBase\Guilds\';
    sGuildFile: '.\GuildBase\GuildList.txt';
    //sVentureDir: '.\ShareV\';
    sConLogDir: '.\ConLog\';
    sCastleDir: '.\Castle\';
    sCastleFile: '.\Castle\List.txt';
    sGameDataDir: '.\Envir\';
    sEnvirDir: '.\Envir\'; //远程获取
    sMapDir: '.\Map\';
    sNoticeDir: '.\Notice\'; //远程获取
    sLogDir: '.\Log\';
    sEMailDir: '.\EMail\';
    //sPlugDir: '.\';
    //sUserDataDir: '.\Envir\AppendUserData\';
    sCurrentDir: '';
    sClientFile1: 'mir.1';
    sClientFile2: 'mir.2';
    sClientFile3: 'mir.3';

    // 让 GM 用脚本实现新人初始装备，不要在这边强制给
    sClothsMan: '';
    sClothsWoman: '';
    sWoodenSword: '';
    sCandle: '蜡烛';
    sBasicDrug: '金创药(小量)';
    sGoldStone: '金矿';
    sSilverStone: '银矿';
    sSteelStone: '铁矿';
    sCopperStone: '铜矿';
    sBlackStone: '黑铁矿石';
    sZuma: ('祖玛卫士', '祖玛雕像', '祖玛弓箭手', '楔蛾');
    sBee: '小角蝇';
    sSpider: '爆裂蜘蛛';
    sWomaHorn: '沃玛号角';
    sZumaPiece: '祖玛头像';
    sGameGoldName: sSTRING_GAMEGOLD;
    {sGameGoldName: sSTRING_GAMEGOLD;
    sGamePointName: sSTRING_GAMEPOINT;
    sGameDiamondName: '积分';
    sPayMentPointName: '秒卡点'; }
    DBSocket: INVALID_SOCKET;
    nHealthFillTime: 300;
    nSpellFillTime: 800;
    nMonUpLvNeedKillBase: 100;
    nMonUpLvRate: 16;
    MonUpLvNeedKillCount: (0, 0, 50, 100, 200, 300, 600, 1200);
    SlaveColor: ($FF, $FE, $93, $9A, $E5, $A8, $B4, $FC, 249);

    dwGetWuXinExpTime: 60 * 1000;
    dwGetWuXinExpTick: 50 * 1000;
    dwGetWuXinCount: 60 * 1000;
    WideAttack: (7, 1, 2);
    CrsAttack: (7, 1, 2, 3, 4, 5, 6);
    SpitMap: (
    ((0, 0, 1, 0, 0),
    (0, 0, 1, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 1),
    (0, 0, 0, 1, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 1, 0),
    (0, 0, 0, 0, 1)),
    ((0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 1, 0, 0),
    (0, 0, 1, 0, 0)),
    ((0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 1, 0, 0, 0),
    (1, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((1, 0, 0, 0, 0),
    (0, 1, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0))
    );

    sHomeMap: '0';
    nHomeX: 289;
    nHomeY: 618;
    sRedHomeMap: '3';
    nRedHomeX: 845;
    nRedHomeY: 674;
    sRedDieHomeMap: '3';
    nRedDieHomeX: 839;
    nRedDieHomeY: 668;
    dwDecPkPointTime: 2 * 60 * 1000;
    nDecPkPointCount: 1;
    dwPKFlagTime: 60 * 1000;
    nKillHumanAddPKPoint: 100;
    nKillHumanDecLuckPoint: 500;
    dwDecLightItemDrugTime: 500;//照明物使用间隔 20080329
    nSafeZoneSize: 10;
    nStartPointSize: 2;
    dwHumanGetMsgTime: 200;
    nGroupMembersMax: 8;
    sFireBallSkill: '火球术';
    sHealSkill: '治愈术';
    ReNewNameColor: ($FF, $FE, $93, $9A, $E5, $A8, $B4, $FC, $B4, $FC);
    dwReNewNameColorTime: 2000;
    boReNewChangeColor: True;
    boReNewLevelClearExp: True;

    nUpgradeWeaponMaxPoint: 20;
    nUpgradeWeaponPrice: 10000;
    dwUPgradeWeaponGetBackTime: 60 * 60 * 1000;
    nClearExpireUpgradeWeaponDays: 8;
    nUpgradeWeaponDCRate: 100;
    nUpgradeWeaponDCTwoPointRate: 30;
    nUpgradeWeaponDCThreePointRate: 200;
    nUpgradeWeaponSCRate: 100;
    nUpgradeWeaponSCTwoPointRate: 30;
    nUpgradeWeaponSCThreePointRate: 200;
    nUpgradeWeaponMCRate: 100;
    nUpgradeWeaponMCTwoPointRate: 30;
    nUpgradeWeaponMCThreePointRate: 200;
    dwProcessMonstersTime: 10;
    dwRegenMonstersTime: 200;
    nPersonShopSellRate: 5;
    nPersonShopBuyRate: 5;
    nMagicAttackMonsteRate: 100;
    nMonGenRate: 10;
    nProcessMonRandRate: 5;
    nProcessMonLimitCount: 5;
    nSoftVersionDate: 20020522;
    boCanNewCall: False;
    dwConsoleShowUserCountTime: 10 * 60 * 1000;
    dwShowLineNoticeTime: 5 * 60 * 1000;
    nLineNoticeColor: 2;
    nStartCastleWarDays: 4;
    nStartCastlewarTime: 20;
    dwShowCastleWarEndMsgTime: 10 * 60 * 1000;
    dwCastleWarTime: 3 * 60 * 60 * 1000;
    dwGetCastleTime: 10 * 60 * 1000;
    dwGuildWarTime: 3 * 60 * 60 * 1000;
    nBuildGuildPrice: 1000000;
    nGuildWarPrice: 30000;
    nMakeDurgPrice: 100;
    nHumanMaxGold: 2000000000;
    nHumanTryModeMaxGold: 100000;
    nTryModeLevel: 7;
    boTryModeUseStorage: False;
    nCanShoutMsgLevel: 7;
    boShowMakeItemMsg: False;
    boShutRedMsgShowGMName: False;
    nSayMsgMaxLen: 80;
    dwSayMsgTime: 3 * 1000;
    nSayMsgCount: 2;
    dwDisableSayMsgTime: 60 * 1000;
    nSayRedMsgMaxLen: 255;
    boShowGuildName: True;
    boShowRankLevelName: True;
    boOpenArmStrengthen: True;
    boOpenItemFlute: True;
    boMonSayMsg: False;
    nStartPermission: 0;
    boKillHumanWinLevel: False;
    boKilledLostLevel: False;
    boKillHumanWinExp: False;
    boKilledLostExp: False;
    nKillHumanWinLevel: 1;
    nKilledLostLevel: 1;
    nKillHumanWinExp: 100000;
    nKillHumanLostExp: 100000;
    nHumanLevelDiffer: 10;
    nMonsterPowerRate: 10;
    nItemsPowerRate: 10;
    nItemsACPowerRate: 10;
    boSendOnlineCount: True;
    nSendOnlineCountRate: 10;
    dwSendOnlineTime: 5 * 60 * 1000;
    dwSaveHumanRcdTime: 10 * 60 * 1000;
    dwHumanFreeDelayTime: 5 * 60 * 1000;
    dwHumDieMaxTime: 60 * 60 * 1000;
    dwMakeGhostTime: 3 * 60 * 1000;
    dwClearDropOnFloorItemTime: 60 * 60 * 1000;
    dwFloorItemCanPickUpTime: 2 * 60 * 1000;
    dwEatTick: 0;
    sFileMD5: '';
    sFileVersion: '';
    dwFileID: '';
    sIdeSerialNumber: '';
    sPCName: '';
    nCheckCount: 0;
    dwCheckTick: 30 * 60 * 1000;
    dwCheckTime: 0;
    nPullulatePointRate: 10000;

    // 可见范围：以屏幕中心点为主，找到最大的地图坐标
    // 目前以 1600x900 分辨率为主
    // 1600 / 48 / 2 = 16
    //  900 / 32 / 2 = 14
    // 设置为 18 是为了发现更多的游戏信息
    // 同时可以满足 DRAWLISTCOUNT 大小限制
    nSendRefMsgRange: 18;
    boDecLampDura: True;
    boHungerSystem: False;
    boHungerDecHP: False;
    boHungerDecPower: False;
    boDiableHumanRun: True;
    boRUNHUMAN: False;
    boRUNMON: False;
    boRunNpc: False;
    boRunGuard: False;
    boWarDisHumRun: False;
    boGMRunAll: False;
    boSafeAreaLimited: False;
    dwTryDealTime: 3000;
    dwDealOKTime: 1000;
    boCanNotGetBackDeal: True;
    boDisableDeal: False;
    nMasterOKLevel: 500;
    nMasterOKCreditPoint: 0;
    nMasterOKBonusPoint: 0;
    boPKLevelProtect: False;
    nPKProtectLevel: 10;
    nRedPKProtectLevel: 10;
    nItemPowerRate: 10000;
    nItemExpRate: 10000;
    nScriptGotoCountLimit: 30;
    btHearMsgFColor: $00; //前景
    btHearMsgBColor: $FF; //背景
    btRedMsgFColor: $FF;
    btRedMsgBColor: $38;
    btCryMsgFColor: $00;
    btCryMsgBColor: $97;
    btCustMsgFColor: $FC;
    btCustMsgBColor: $FF;
    btWhisperMsgFColor: $FC; //前景
    btWhisperMsgBColor: $FF; //背景
    btGreenMsgFColor: $DB;
    btGreenMsgBColor: $FF;
    btGuildMsgFColor: $DB;
    btGuildMsgBColor: $FF;
    btCudtMsgFColor: $FF;
    btCudtMsgBColor: $FD;
    btGMWhisperMsgFColor: $FF; //前景
    btGMWhisperMsgBColor: $38; //背景
    btBlueMsgFColor: $FF; //前景
    btBlueMsgBColor: $FC; //背景
    btGroupMsgFColor: $C4; //前景
    btGroupMsgBColor: $FF; //背景

    nHearMsgFColor: $FFFF;
    nHearMsgBColor: $800;
    nWhisperMsgFColor: $FDA0;
    nWhisperMsgBColor: $800;
    nGMWhisperMsgFColor: $FA84;
    nGMWhisperMsgBColor: $800;
    nCryMsgFColor: $FFE0;
    nCryMsgBColor: $800;
    nGreenMsgFColor: $7E0;
    nGreenMsgBColor: $800;
    nBlueMsgFColor: $7E0;
    nBlueMsgBColor: $800;
    nRedMsgFColor: $EB2A;
    nRedMsgBColor: $800;
    nGuildMsgFColor: $97F1;
    nGuildMsgBColor: $160;
    nGroupMsgFColor: $8D1F;
    nGroupMsgBColor: $13;
    nCustMsgFColor: $FC;//前景
    nCustMsgBColor: $FF;//前景
    nCudtMsgFColor: $FF;
    nCudtMsgBColor: $FD;
    nWorldMsgFColor: $9E7F;
    nWorldMsgBColor: $800;
    nBugleMsgFColor: $7FF;
    nBugleMsgBColor: $800;
    nHintMsgRColor: $32F4;
    nHintMsgGColor: $FF9900;
    nHintMsgWColor: $FFFFFF;

    nMonRandomAddValue: 3;
    nMakeRandomAddValue: 3;
    nNpcMakeRandomAddValue: 3;
    boMonRandomIsOpenShow: False;
    boMakeRandomIsOpenShow: True;
    boNPCMakeRandomIsOpenShow: False;
    nFlute1RateValue: 10;
    nFlute2RateValue: 20;
    nFlute3RateValue: 40;
    nWuXinMinRate: 5;
    nWuXinMaxRate: 15;

    IHelmet: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IWeapon: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IDress: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    INeckLace: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IArmRing: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IRing: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IBelt: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IBoot: (
    nACMaxLimit: 3;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 3;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 3;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 3;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IRein: (
    nACMaxLimit: 6;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 6;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 6;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 200;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IBell: (
    nACMaxLimit: 6;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 6;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 6;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 200;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    ISaddle: (
    nACMaxLimit: 6;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 6;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 6;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 200;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    IDecoration: (
    nACMaxLimit: 6;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 6;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 6;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 200;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );
    INail: (
    nACMaxLimit: 6;
    nACAddValueRate: 20;
    nACAddRate: 30;
    nMACMaxLimit: 6;
    nMACAddValueRate: 20;
    nMACAddRate: 30;
    nDCMaxLimit: 6;
    nDCAddValueRate: 20;
    nDCAddRate: 40;
    nMCMaxLimit: 3;
    nMCAddValueRate: 20;
    nMCAddRate: 40;
    nSCMaxLimit: 3;
    nSCAddValueRate: 20;
    nSCAddRate: 40;
    nCCMaxLimit: 200;
    nCCAddValueRate: 20;
    nCCAddRate: 50;
    );

    nMonOneDropGoldCount: 2000;
    nMakeMineHitRate: 4; //挖矿命中率
    nMakeMineRate: 12; //挖矿率
    nStoneTypeRate: 100;
    nStoneTypeRateMin: 50;
    nGoldStoneMin: 0;
    nGoldStoneMax: 15;
    nSilverStoneMin: 16;
    nSilverStoneMax: 40;
    nSteelStoneMin: 41;
    nSteelStoneMax: 70;
    nBlackStoneMin: 46;
    nBlackStoneMax: 56;
    nStoneMinDura: 3000;
    nStoneGeneralDuraRate: 13000;
    nStoneAddDuraRate: 20;
    nStoneAddDuraMax: 10000;
    nWinLottery6Min: 1;
    nWinLottery6Max: 4999;
    nWinLottery5Min: 14000;
    nWinLottery5Max: 15999;
    nWinLottery4Min: 16000;
    nWinLottery4Max: 16149;
    nWinLottery3Min: 16150;
    nWinLottery3Max: 16169;
    nWinLottery2Min: 16170;
    nWinLottery2Max: 16179;
    nWinLottery1Min: 16180;
    nWinLottery1Max: 16185;
    nWinLottery1Gold: 1000000;
    nWinLottery2Gold: 200000;
    nWinLottery3Gold: 100000;
    nWinLottery4Gold: 10000;
    nWinLottery5Gold: 1000;
    nWinLottery6Gold: 500;
    nWinLotteryRate: 30000;
    nWinLotteryCount: 0;
    nNoWinLotteryCount: 0;
    nWinLotteryLevel1: 0;
    nWinLotteryLevel2: 0;
    nWinLotteryLevel3: 0;
    nWinLotteryLevel4: 0;
    nWinLotteryLevel5: 0;
    nWinLotteryLevel6: 0;
    {GlobalVal: (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0);   }
    nItemNumber: 0;
    nItemNumberEx: MAXGMMAKEITEMNUM;
    nGuildRecallTime: 180;
    nGroupRecallTime: 180;
    boControlDropItem: False;
    boInSafeDisableDrop: False;
    nCanDropGold: 1000;
    nCanDropPrice: 500;
    boSendCustemMsg: True;
    boSubkMasterSendMsg: True;
    nSuperRepairPriceRate: 3;//特修价格倍数
    nRepairItemDecDura: 30;//普通修理掉持久数*100,为每次修理掉的持久值

    boDieScatterBag: True;
    nDieScatterBagRate: 3;
    boDieRedScatterBagAll: True;
    nDieDropUseItemRate: 30;
    nDieRedDropUseItemRate: 15;
    boDieDropGold: False;
    boKillByHumanDropUseItem: False;
    boKillByMonstDropUseItem: True;
    boKickExpireHuman: False;
    nGuildRankNameLen: 16;
    nGuildMemberMaxLimit: 50;
    nDefGuildMemberLimit: 100;
    nGuildMemberLevelInc: 5;
    nGuildNameLen: 16;
    nAttackPosionRate: 5;
    nAttackPosionTime: 5;
    dwRevivalTime: 60 * 1000;//复活间隔时间
    boUserMoveCanDupObj: False;
    boUserMoveCanOnItem: True;
    dwUserMoveTime: 10;
    dwPKDieLostExpRate: 1000;
    nPKDieLostLevelRate: 20000;
    btPKFlagNameColor: $2F;
    btPKLevel1NameColor: $FB;
    btPKLevel2NameColor: $F9;
    btAllyAndGuildNameColor: $B4;
    btWarGuildNameColor: $45;
    btInFreePKAreaNameColor: $DD;
    boSpiritMutiny: False;
    dwSpiritMutinyTime: 30 * 60 * 1000;
    nSpiritPowerRate: 2;
    boMasterDieMutiny: False;
    nMasterDieMutinyRate: 5;
    nMasterDieMutinyPower: 10;
    nMasterDieMutinySpeed: 5;
    boBBMonAutoChangeColor: False;
    dwBBMonAutoChangeColorTime: 3000;
    boOldClientShowHiLevel: True;
    boShowScriptActionMsg: True;
    nRunSocketDieLoopLimit: 100;
    boThreadRun: False;
    boShowExceptionMsg: False;//异常错误信息 默认关闭
    boShowPreFixMsg: True;
    btMakeMagicAddPoint: 5;
    btMakeMagicUsePoint: 1;
    btMakeMagicAddRate: 10;
    btMakeMagicMaxLevel: 50;
    nMakeMagicBeginLevel: 40;
    nMagicAttackRage: 8; //魔法锁定范围
    sBoneFamm: '变异骷髅';
    nBoneFammCount: 1;

    sDogz: '神兽';
    nDogzCount: 1;
    sMoonSpirit: '月灵';
    nMoonSpiritCount: 1;
    sBoneDog: '尸兽';

    nAmyOunsulPoint: 10;

    boDisableInSafeZoneFireCross: False;
    boGroupMbAttackPlayObject: True;
    dwPosionDecHealthTime: 2500;
    nPosionDamagarmor: 12; //中红毒着持久及减防量（实际大小为 12 / 10）
    nSetupInfo: 0;
    boExpIsCumulative: True;
    boExpOffLienSave: True;
    boExpOffLineRunTime: True;

    boLimitSwordLong: False;
    nSwordLongPowerRate: 100;
    nFireBoomRage: 1;
    nSnowWindRange: 1;
    nElecBlizzardRange: 2;//地狱雷光攻击范围
    nMagTurnUndeadLevel: 50; //圣言怪物等级限制
    nMagTammingLevel: 50; //诱惑之光怪物等级限制
    nMagTammingTargetLevel: 10; //诱惑怪物相差等级机率，此数字越小机率越大；
    nSkill110PowerRate: 100;
    nSkill111PowerRate: 100;
    nSkill112PowerRate: 100;
    nSkill113PowerRate: 100;
    nSkill114PowerRate: 100;
    nSkill115PowerRate: 100;
    nSkill116PowerRate: 100;
    nSkill117PowerRate: 100;
    nSkill118PowerRate: 100;
    nSkill119PowerRate: 100;
    nSkill120PowerRate: 100;
    nSkill121PowerRate: 100;

    boSkill63RunHum: False;
    boSkill63RunMon: True;
    boSkill63RunNpc: False;
    boSkill63RunGuard: False;
    boSkill63WarDisHumRun: False;

    nSkill70PowerRate: 100;
    boSkill70MbAttackMon: True;
    boSkill70MbAttackHuman: False;
    boSkill70MbAttackSlave: False;
    boSkill70MbFastParalysis: True;
    boSkill70RunHum: True;
    boSkill70RunMon: True;
    boSkill70RunNpc: False;
    boSkill70RunGuard: False;
    boSkill70WarDisHumRun: False;

    nSkill71PowerRate: 100;
    boSkill71MbAttackMon: True;
    boSkill71MbAttackHuman: False;
    boSkill71MbAttackSlave: False;
    boSkill71MbFastParalysis: True;

    nSkill72PowerRate: 100;
    boSkill72MbAttackMon: True;
    boSkill72MbAttackHuman: False;
    boSkill72MbAttackSlave: False;
    boSkill72Damagearmor: True;
    boSkill72DecHealth: False;
    boSkill72MbFastParalysis: True;

    boAllow32HorseGetExp: True;
    n32HorseGetExpRate: 20;
    boAllow33HorseGetExp: False;
    n33HorseGetExpRate: 20;
    n33HorseGetExpRate2: 50;
    nHorseAliveTime: 10;
    nTakeOnHorseUseTime: 5;
    nDomesticationRate: 40;
    boDomesticationUseWeapon: True;
    boDomesticationCheckLevel: True;

    nEtenMagicSize: 8;
    nEtenPowerRate: 100;
    nProtectShieldRunRate0: 10;
    nProtectShieldRunRate1: 20;
    nProtectShieldRunRate2: 30;
    nProtectShieldRunRate3: 40;
    nProtectShieldDelDamage0: 10;
    nProtectShieldDelDamage1: 20;
    nProtectShieldDelDamage2: 30;
    nProtectShieldDelDamage3: 40;
    nMagTammingHPRate: 100; //成功机率=怪物最高HP 除以 此倍率，此倍率越大诱惑机率越高

    nMagTammingCount: 5;
    nMabMabeHitRandRate: 100;
    nMabMabeHitMinLvLimit: 10;
    nMabMabeHitSucessRate: 21;
    nMabMabeHitMabeTimeRate: 20;
    sCASTLENAME: '沙巴克';
    sCastleHomeMap: '3';
    nCastleHomeX: 644;
    nCastleHomeY: 290;
    nCastleWarRangeX: 100;
    nCastleWarRangeY: 100;
    nCastleTaxRate: 5;
    boGetAllNpcTax: False;
    nHireGuardPrice: 300000;
    nHireArcherPrice: 300000;
    nCastleGoldMax: 10000000;
    nCastleOneDayGold: 2000000;
    nRepairDoorPrice: 2000000;
    nRepairWallPrice: 500000;
    nCastleMemberPriceRate: 80;
    nMaxHitMsgCount: 2;
    nMaxSpellMsgCount: 2;
    nMaxRunMsgCount: 2;
    nMaxWalkMsgCount: 2;
    nMaxTurnMsgCount: 2;
    nMaxSitDonwMsgCount: 2;
    nMaxDigUpMsgCount: 2;
    nMaxButchMsgCount: 2;
    boSpellSendUpdateMsg: False;
    boActionSendActionMsg: False;
    boKickOverSpeed: False;
    btSpeedControlMode: 0;
    nOverSpeedKickCount: 10;
    dwDropOverSpeed: 10;
    dwHitFrameTime: 450;
    dwMagicHitFrameTime: 450;
    dwHitIntervalTime: 1100;//攻击间隔
    dwMagicHitIntervalTime: 1200;//魔法间隔
    dwRunIntervalTime: 550;//跑步间隔
    dwWalkIntervalTime: 550;//走路间隔
    dwTurnIntervalTime: 750;//换方向间隔
    dwButchIntervalTime: 550;
    boControlActionInterval: True;
    boControlWalkHit: True;
    boControlRunLongHit: True;
    boControlRunHit: True;
    boControlRunMagic: True;
    dwActionIntervalTime: 350; //组合操作间隔
    dwRunLongHitIntervalTime: 800; //跑位刺杀间隔
    dwRunHitIntervalTime: 800; //跑位攻击间隔
    dwWalkHitIntervalTime: 800; //走位攻击间隔
    dwRunMagicIntervalTime: 900; //跑位魔法间隔
    boDisableStruck: False; //不显示人物弯腰动作
    boDisableSelfStruck: False; //自己不显示人物弯腰动作
    dwStruckTime: 100; //人物弯腰停留时间
    dwKillMonExpMultiple: 1; //杀怪经验倍数
{$IF SoftVersion = VERENT}
    dwRequestVersion: 98;
{$ELSE}
    dwRequestVersion: RequestVersion;
{$IFEND}
    boHighLevelKillMonFixExp: False;
    boAddUserItemNewValue: True;
    boLowLevelKillMonContainExp: False;
    nLowLevelKillMonLevel: 0;
    nLowLevelKillMonGetExpRate: 100;
    sLineNoticePreFix: '〖公告〗';
    sSysMsgPreFix: '〖系统〗';
    sGuildMsgPreFix: '〖行会〗';
    sGroupMsgPreFix: '〖组队〗';
    sHintMsgPreFix: '〖提示〗';
    sGMRedMsgpreFix: '〖ＧＭ〗';
    sMonSayMsgpreFix: '〖怪物〗';
    sCustMsgpreFix: '〖祝福〗';
    sCastleMsgpreFix: '〖城主〗';
    sClairaudientFix: '〖传音〗';
    sGuildInfo: '行会信息';
    sGuildNotice: '公告';
    sGuildWar: '敌对行会';
    sGuildAll: '联盟行会';
    sGuildMember: '行会成员';
    sGuildMemberRank: '行会成员';
    sGuildChief: '掌门人';
    boKickAllUser: False;
    boTestSpeedMode: False;
    ClientConf: (
    boClientCanSet: True;
    boRUNHUMAN: True;
    boRUNMON: True;
    boRunNpc: True;
    boWarRunAll: True;
    btDieColor: 5;
    wSpellTime: 500;
    wHitIime: 1400;
    wItemFlashTime: 5 * 100;
    btItemSpeed: 25;
    boCanStartRun: True;
    boParalyCanRun: False;
    boParalyCanWalk: False;
    boParalyCanHit: False;
    boParalyCanSpell: False;
    boShowRedHPLable: True;
    boShowHPNumber: True;
    boShowJobLevel: True;
    boDuraAlert: True;
    boMagicLock: True;
    boAutoPuckUpItem: False;
    );
    nWeaponMakeUnLuckRate: 20;
    nWeaponMakeLuckPoint1: 1;
    nWeaponMakeLuckPoint2: 3;
    nWeaponMakeLuckPoint3: 7;
    nWeaponMakeLuckPoint2Rate: 6;
    nWeaponMakeLuckPoint3Rate: 10 + 30;
    nWeaponMakeUnLuckMaxCount: 7;
    boCheckUserItemPlace: True;
{$IF DEMOCLIENT = 1}
    nClientKey: 6534;
{$ELSE}
    nClientKey: 500;
{$IFEND}
    nLevelValueOfTaosHP: 6;
    nLevelValueOfTaosHPRate: 2.5;
    nLevelValueOfTaosMP: 8;
    nLevelValueOfWizardHP: 15;
    nLevelValueOfWizardHPRate: 1.8;
    nLevelValueOfWarrHP: 4;
    nLevelValueOfWarrHPRate: 4.5;
    nProcessMonsterInterval: 10;

    pDBSocketRecvBuff: nil;
    nDBSocketRecvLeng: 0;
    nDBSocketSendLeng: 0;

    nMagDelayTimeDoubly: 100;
    nMagPowerDoubly: 100;
    boPlayObjectReduceMP: True;
    boGroupMbAttackSlave: False;
    nBigStorageLimitCount: 100;
    boDropGoldToPlayBag: True;
    boChangeUseItemNameByPlayName: True;
    sChangeUseItemName: '〖改〗';
    boUseFixExp: True;
    nBaseExp: 100000000;
    nAddExp: 1000000;
    nDedingUseTime: 10;
    boDedingAllowPK: True;
    boRegenMonsters: True;
    boShowMonLevel: False;
    sShowMonLevelFormat: '%s\(Lv:%d)';
    boSkill66ReduceMP: True;

    dwGetDBSockMsgTime: 10000;
    boPullCrossInSafeZone: True;
    boHighLevelGroupFixExp: True;
    boStartDropItemMapEvent: False;
    boStartPickUpItemMapEvent: False;
    boStartHeavyHitMapEvent: False;
    boStartWalkMapEvent: False;
    boStartRunMapEvent: False;
    nLimitExpLevel: 1000;
    nLimitExpValue: 10;

    boChangeMapFireExtinguish: True;
    nFireDelayTimeRate: 100;
    nFirePowerRate: 100;
    nFirePlayDamageTimeRate: 1000;
    nFireMonDamageTimeRate: 1000;
    nDidingPowerRate: 100;
    boCheckGuild: True;
    boCloseWuXin: False;

    );

  sDBName: string = 'HeroDB'; //BDE 数据源名称

{$IF OEMVER = OEM775}
  g_LevelInfo: array[0..MAXLEVEL] of TLevelInfo;
{$IFEND}
  g_dwOldNeedExps: TLevelNeedExp;

  g_GameCommand: TGameCommand = (
    Data: (sCmd: 'Date'; nPermissionMin: 0; nPermissionMax: 10);
    PRVMSG: (sCmd: '拒绝'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWMSG: (sCmd: '拒绝私聊'; nPermissionMin: 0; nPermissionMax: 10);
    LETSHOUT: (sCmd: '拒绝组队'; nPermissionMin: 0; nPermissionMax: 10);
    LETTRADE: (sCmd: '拒绝交易'; nPermissionMin: 0; nPermissionMax: 10);
    LETGUILD: (sCmd: '加入行会'; nPermissionMin: 0; nPermissionMax: 10);
    ENDGUILD: (sCmd: '退出行会'; nPermissionMin: 0; nPermissionMax: 10);
    BANGUILDCHAT: (sCmd: '拒绝行会聊天'; nPermissionMin: 0; nPermissionMax: 10);
    AUTHALLY: (sCmd: '允许联盟'; nPermissionMin: 0; nPermissionMax: 10);
    AUTH: (sCmd: '联盟'; nPermissionMin: 0; nPermissionMax: 10);
    AUTHCANCEL: (sCmd: '取消联盟'; nPermissionMin: 0; nPermissionMax: 10);
    DIARY: (sCmd: 'Diary'; nPermissionMin: 0; nPermissionMax: 10);
    USERMOVE: (sCmd: '传送'; nPermissionMin: 0; nPermissionMax: 10);
    SEARCHING: (sCmd: '探测'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWGROUPCALL: (sCmd: '允许天地合一'; nPermissionMin: 0; nPermissionMax: 10);
    GROUPRECALLL: (sCmd: '天地合一'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWGUILDRECALL: (sCmd: '允许行会合一'; nPermissionMin: 0; nPermissionMax: 10);
    GUILDRECALLL: (sCmd: '行会合一'; nPermissionMin: 0; nPermissionMax: 10);
    UNLOCKSTORAGE: (sCmd: '仓库解锁'; nPermissionMin: 0; nPermissionMax: 10);
    UnLock: (sCmd: '游戏解锁'; nPermissionMin: 0; nPermissionMax: 10);
    Lock: (sCmd: '锁定仓库'; nPermissionMin: 0; nPermissionMax: 10);
    PASSWORDLOCK: (sCmd: '开启保护'; nPermissionMin: 0; nPermissionMax: 10);
    SETPASSWORD: (sCmd: '设置密码'; nPermissionMin: 0; nPermissionMax: 10);
    CHGPASSWORD: (sCmd: '修改密码'; nPermissionMin: 0; nPermissionMax: 10);
    CLRPASSWORD: (sCmd: '清除玩家仓库密码'; nPermissionMin: 10; nPermissionMax: 10);
    UNPASSWORD: (sCmd: '清除密码'; nPermissionMin: 0; nPermissionMax: 10);
    MEMBERFUNCTION: (sCmd: '会员'; nPermissionMin: 0; nPermissionMax: 10);
    MEMBERFUNCTIONEX: (sCmd: '帮助'; nPermissionMin: 0; nPermissionMax: 10);
    DEAR: (sCmd: '查询夫妻'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWDEARRCALL: (sCmd: '允许夫妻传送'; nPermissionMin: 0; nPermissionMax: 10);
    DEARRECALL: (sCmd: '夫妻传送'; nPermissionMin: 0; nPermissionMax: 10);
    MASTER: (sCmd: '查询师徒'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWMASTERRECALL: (sCmd: '允许师徒传送'; nPermissionMin: 0; nPermissionMax: 10);
    MASTERECALL: (sCmd: '师徒传送'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWFIREND: (sCmd: '允许加为好友'; nPermissionMin: 0; nPermissionMax: 10);
    ATTACKMODE: (sCmd: 'AttackMode'; nPermissionMin: 0; nPermissionMax: 10);
    REST: (sCmd: 'Rest'; nPermissionMin: 0; nPermissionMax: 10);
    TAKEONHORSE: (sCmd: '骑马'; nPermissionMin: 0; nPermissionMax: 10);
    TAKEOFHORSE: (sCmd: '下马'; nPermissionMin: 0; nPermissionMax: 10);
    HUMANLOCAL: (sCmd: '查看人物IP'; nPermissionMin: 3; nPermissionMax: 10);
    Move: (sCmd: 'Move'; nPermissionMin: 3; nPermissionMax: 6);
    POSITIONMOVE: (sCmd: '飞'; nPermissionMin: 3; nPermissionMax: 6);
    INFO: (sCmd: '人物信息'; nPermissionMin: 3; nPermissionMax: 10);
    MOBLEVEL: (sCmd: '身边角色'; nPermissionMin: 3; nPermissionMax: 10);
    MOBCOUNT: (sCmd: '怪物数量'; nPermissionMin: 3; nPermissionMax: 10);
    HUMANCOUNT: (sCmd: '身边人数'; nPermissionMin: 3; nPermissionMax: 10);
    Map: (sCmd: 'Map'; nPermissionMin: 3; nPermissionMax: 10);
    KICK: (sCmd: 'Kick'; nPermissionMin: 10; nPermissionMax: 10);
    TING: (sCmd: '随机传送'; nPermissionMin: 10; nPermissionMax: 10);
    SUPERTING: (sCmd: '身边传送'; nPermissionMin: 10; nPermissionMax: 10);
    MAPMOVE: (sCmd: '集体传送'; nPermissionMin: 10; nPermissionMax: 10);
    SHUTUP: (sCmd: '禁言'; nPermissionMin: 10; nPermissionMax: 10);
    RELEASESHUTUP: (sCmd: '解除禁言'; nPermissionMin: 10; nPermissionMax:
    10);
    SHUTUPLIST: (sCmd: '查看禁言列表'; nPermissionMin: 10; nPermissionMax: 10);
    GAMEMASTER: (sCmd: 'GM模式'; nPermissionMin: 10; nPermissionMax: 10);
    OBSERVER: (sCmd: '隐身模式'; nPermissionMin: 10; nPermissionMax: 10);
    SUEPRMAN: (sCmd: '无敌模式'; nPermissionMin: 10; nPermissionMax: 10);
    Level: (sCmd: 'Level'; nPermissionMin: 10; nPermissionMax: 10);
    SABUKWALLGOLD: (sCmd: 'SabukWallGold'; nPermissionMin: 10; nPermissionMax:
    10);
    RECALL: (sCmd: '召唤'; nPermissionMin: 10; nPermissionMax: 10);
    REGOTO: (sCmd: '跟踪'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWFLAG: (sCmd: 'Showflag'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWOPEN: (sCmd: 'Showopen'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWUNIT: (sCmd: 'Showunit'; nPermissionMin: 10; nPermissionMax: 10);
    Attack: (sCmd: 'Attack'; nPermissionMin: 10; nPermissionMax: 10);
    MOB: (sCmd: 'Mob'; nPermissionMin: 10; nPermissionMax: 10);
    MOBNPC: (sCmd: 'MobNpc'; nPermissionMin: 10; nPermissionMax: 10);
    DELNPC: (sCmd: 'DelNpc'; nPermissionMin: 10; nPermissionMax: 10);
    NPCSCRIPT: (sCmd: 'NpcScript'; nPermissionMin: 10; nPermissionMax: 10);
    RECALLMOB: (sCmd: 'RecallMob'; nPermissionMin: 10; nPermissionMax: 10);
    LUCKYPOINT: (sCmd: 'LuckyPoint'; nPermissionMin: 10; nPermissionMax: 10);
    LOTTERYTICKET: (sCmd: 'LotteryTicket'; nPermissionMin: 10; nPermissionMax:
    10);
    RELOADGUILD: (sCmd: 'ReloadGuild'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADLINENOTICE: (sCmd: 'ReloadLineNotice'; nPermissionMin: 10;
    nPermissionMax: 10);
    RELOADABUSE: (sCmd: 'ReloadAbuse'; nPermissionMin: 10; nPermissionMax: 10);
    BACKSTEP: (sCmd: 'Backstep'; nPermissionMin: 10; nPermissionMax: 10);
    BALL: (sCmd: 'Ball'; nPermissionMin: 10; nPermissionMax: 10);
    FREEPENALTY: (sCmd: 'FreePK'; nPermissionMin: 10; nPermissionMax: 10);
    PKPOINT: (sCmd: 'PKpoint'; nPermissionMin: 10; nPermissionMax: 10);
    IncPkPoint: (sCmd: 'IncPkPoint'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGELUCK: (sCmd: 'ChangeLuck'; nPermissionMin: 10; nPermissionMax: 10);
    HUNGER: (sCmd: 'Hunger'; nPermissionMin: 10; nPermissionMax: 10);
    HAIR: (sCmd: 'hair'; nPermissionMin: 10; nPermissionMax: 10);
    TRAINING: (sCmd: 'Training'; nPermissionMin: 10; nPermissionMax: 10);
    DELETESKILL: (sCmd: 'DeleteSkill'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEJOB: (sCmd: 'ChangeJob'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEGENDER: (sCmd: 'ChangeGender'; nPermissionMin: 10; nPermissionMax:
    10);
    NAMECOLOR: (sCmd: 'NameColor'; nPermissionMin: 10; nPermissionMax: 10);
    Mission: (sCmd: 'Mission'; nPermissionMin: 10; nPermissionMax: 10);
    MobPlace: (sCmd: 'MobPlace'; nPermissionMin: 10; nPermissionMax: 10);
    TRANSPARECY: (sCmd: 'Transparency'; nPermissionMin: 10; nPermissionMax: 10);
    DELETEITEM: (sCmd: 'DeleteItem'; nPermissionMin: 10; nPermissionMax: 10);
    LEVEL0: (sCmd: 'Level0'; nPermissionMin: 10; nPermissionMax: 10);
    CLEARMISSION: (sCmd: 'ClearMission'; nPermissionMin: 10; nPermissionMax:
    10);
    SETFLAG: (sCmd: 'setflag'; nPermissionMin: 10; nPermissionMax: 10);
    SETOPEN: (sCmd: 'setopen'; nPermissionMin: 10; nPermissionMax: 10);
    SETUNIT: (sCmd: 'setunit'; nPermissionMin: 10; nPermissionMax: 10);
    RECONNECTION: (sCmd: 'Reconnection'; nPermissionMin: 10; nPermissionMax:
    10);
    DISABLEFILTER: (sCmd: 'DisableFilter'; nPermissionMin: 10; nPermissionMax:
    10);
    CHGUSERFULL: (sCmd: 'CHGUSERFULL'; nPermissionMin: 10; nPermissionMax: 10);
    CHGZENFASTSTEP: (sCmd: 'CHGZENFASTSTEP'; nPermissionMin: 10; nPermissionMax:
    10);
    CONTESTPOINT: (sCmd: 'ContestPoint'; nPermissionMin: 10; nPermissionMax:
    10);
    STARTCONTEST: (sCmd: 'StartContest'; nPermissionMin: 10; nPermissionMax:
    10);
    ENDCONTEST: (sCmd: 'EndContest'; nPermissionMin: 10; nPermissionMax: 10);
    ANNOUNCEMENT: (sCmd: 'Announcement'; nPermissionMin: 10; nPermissionMax:
    10);
    OXQUIZROOM: (sCmd: 'OXQuizRoom'; nPermissionMin: 10; nPermissionMax: 10);
    GSA: (sCmd: 'gsa'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEITEMNAME: (sCmd: 'ChangeItemName'; nPermissionMin: 10; nPermissionMax:
    10);
    DISABLESENDMSG: (sCmd: 'DisableSendMsg'; nPermissionMin: 10; nPermissionMax:
    10);
    ENABLESENDMSG: (sCmd: 'EnableSendMsg'; nPermissionMin: 10; nPermissionMax:
    10);
    DISABLESENDMSGLIST: (sCmd: 'DisableSendMsgList'; nPermissionMin: 10;
    nPermissionMax: 10);
    KILL: (sCmd: 'Kill'; nPermissionMin: 10; nPermissionMax: 10);
    MAKE: (sCmd: 'make'; nPermissionMin: 10; nPermissionMax: 10);
    SMAKE: (sCmd: 'Supermake'; nPermissionMin: 10; nPermissionMax: 10);
    BonusPoint: (sCmd: 'BonusPoint'; nPermissionMin: 10; nPermissionMax: 10);
    DELBONUSPOINT: (sCmd: 'DelBonusPoint'; nPermissionMin: 10; nPermissionMax:
    10);
    RESTBONUSPOINT: (sCmd: 'RestBonusPoint'; nPermissionMin: 10; nPermissionMax:
    10);
    FIREBURN: (sCmd: 'FireBurn'; nPermissionMin: 10; nPermissionMax: 10);
    TESTFIRE: (sCmd: 'TestFire'; nPermissionMin: 10; nPermissionMax: 10);
    TESTSTATUS: (sCmd: 'TestStatus'; nPermissionMin: 10; nPermissionMax: 10);
    DELGOLD: (sCmd: 'DelGold'; nPermissionMin: 10; nPermissionMax: 10);
    ADDGOLD: (sCmd: 'AddGold'; nPermissionMin: 10; nPermissionMax: 10);
    DELGAMEGOLD: (sCmd: 'DelGamePoint'; nPermissionMin: 10; nPermissionMax: 10);
    ADDGAMEGOLD: (sCmd: 'AddGamePoint'; nPermissionMin: 10; nPermissionMax: 10);
    GAMEGOLD: (sCmd: 'GameGold'; nPermissionMin: 10; nPermissionMax: 10);
    GAMEPOINT: (sCmd: 'GamePoint'; nPermissionMin: 10; nPermissionMax: 10);
    CREDITPOINT: (sCmd: 'CreditPoint'; nPermissionMin: 10; nPermissionMax: 10);
    TESTGOLDCHANGE: (sCmd: 'Test_GOLD_Change'; nPermissionMin: 10;
    nPermissionMax: 10);
    REFINEWEAPON: (sCmd: 'RefineWeapon'; nPermissionMin: 10; nPermissionMax:
    10);
    RELOADADMIN: (sCmd: 'ReloadAdmin'; nPermissionMin: 10; nPermissionMax: 10);
    ReLoadNpc: (sCmd: 'ReloadNpc'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADMANAGE: (sCmd: 'ReloadManage'; nPermissionMin: 10; nPermissionMax:
    10);
    RELOADROBOTMANAGE: (sCmd: 'ReloadRobotManage'; nPermissionMin: 10;
    nPermissionMax: 10);
    RELOADROBOT: (sCmd: 'ReloadRobot'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADMONITEMS: (sCmd: 'ReloadMonItems'; nPermissionMin: 10; nPermissionMax:
    10);
    RELOADDIARY: (sCmd: 'ReloadDiary'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADITEMDB: (sCmd: 'ReloadItemDB'; nPermissionMin: 10; nPermissionMax:
    10);
    RELOADMAGICDB: (sCmd: 'ReloadMagicDB'; nPermissionMin: 10; nPermissionMax:
    10);
    RELOADMONSTERDB: (sCmd: 'ReloadMonsterDB'; nPermissionMin: 10;
    nPermissionMax: 10);
    RELOADMINMAP: (sCmd: 'ReLoadMinMap'; nPermissionMin: 10; nPermissionMax:
    10);
    ReAlive: (sCmd: 'ReAlive'; nPermissionMin: 10; nPermissionMax: 10);
    ADJUESTLEVEL: (sCmd: 'AdjustLevel'; nPermissionMin: 10; nPermissionMax: 10);
    ADJUESTEXP: (sCmd: 'AdjustExp'; nPermissionMin: 10; nPermissionMax: 10);
    AddGuild: (sCmd: 'AddGuild'; nPermissionMin: 10; nPermissionMax: 10);
    DELGUILD: (sCmd: 'DelGuild'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGESABUKLORD: (sCmd: 'ChangeSabukLord'; nPermissionMin: 10;
    nPermissionMax: 10);
    FORCEDWALLCONQUESTWAR: (sCmd: 'ForcedWallconquestWar'; nPermissionMin: 10;
    nPermissionMax: 10);
    ADDTOITEMEVENT: (sCmd: 'AddToItemEvent'; nPermissionMin: 10; nPermissionMax:
    10);
    ADDTOITEMEVENTASPIECES: (sCmd: 'AddToItemEventAsPieces'; nPermissionMin: 10;
    nPermissionMax: 10);
    ItemEventList: (sCmd: 'ItemEventList'; nPermissionMin: 10; nPermissionMax:
    10);
    STARTINGGIFTNO: (sCmd: 'StartingGiftNo'; nPermissionMin: 10; nPermissionMax:
    10);
    DELETEALLITEMEVENT: (sCmd: 'DeleteAllItemEvent'; nPermissionMin: 10;
    nPermissionMax: 10);
    STARTITEMEVENT: (sCmd: 'StartItemEvent'; nPermissionMin: 10; nPermissionMax:
    10);
    ITEMEVENTTERM: (sCmd: 'ItemEventTerm'; nPermissionMin: 10; nPermissionMax:
    10);
    ADJUESTTESTLEVEL: (sCmd: 'AdjustTestLevel'; nPermissionMin: 10;
    nPermissionMax: 10);
    TRAININGSKILL: (sCmd: 'TrainingSkill'; nPermissionMin: 10; nPermissionMax:
    10);
    OPDELETESKILL: (sCmd: 'OPDeleteSkill'; nPermissionMin: 10; nPermissionMax:
    10);
    CHANGEWEAPONDURA: (sCmd: 'ChangeWeaponDura'; nPermissionMin: 10;
    nPermissionMax: 10);
    RELOADGUILDALL: (sCmd: 'ReloadGuildAll'; nPermissionMin: 10; nPermissionMax:
    10);
    WHO: (sCmd: 'Who'; nPermissionMin: 3; nPermissionMax: 10);
    TOTAL: (sCmd: 'Total'; nPermissionMin: 5; nPermissionMax: 10);
    TESTGA: (sCmd: 'Testga'; nPermissionMin: 10; nPermissionMax: 10);
    MAPINFO: (sCmd: 'MapInfo'; nPermissionMin: 10; nPermissionMax: 10);
    SBKDOOR: (sCmd: 'SbkDoor'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEDEARNAME: (sCmd: 'DearName'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEMASTERNAME: (sCmd: 'MasterName'; nPermissionMin: 10; nPermissionMax:
    10);
    STARTQUEST: (sCmd: 'StartQuest'; nPermissionMin: 10; nPermissionMax: 10);
    SETPERMISSION: (sCmd: 'SetPermission'; nPermissionMin: 10; nPermissionMax:
    10);
    CLEARMON: (sCmd: 'ClearMon'; nPermissionMin: 10; nPermissionMax: 10);
    RENEWLEVEL: (sCmd: 'ReNewLevel'; nPermissionMin: 10; nPermissionMax: 10);
    DENYIPLOGON: (sCmd: 'DenyIPLogon'; nPermissionMin: 10; nPermissionMax: 10);

    DENYACCOUNTLOGON: (sCmd: 'DenyAccountLogon'; nPermissionMin: 10;
    nPermissionMax: 10);
    DENYCHARNAMELOGON: (sCmd: 'DenyCharNameLogon'; nPermissionMin: 10;
    nPermissionMax: 10);
    DELDENYIPLOGON: (sCmd: 'DelDenyIPLogon'; nPermissionMin: 10; nPermissionMax:
    10);
    DELDENYACCOUNTLOGON: (sCmd: 'DelDenyAccountLogon'; nPermissionMin: 10;
    nPermissionMax: 10);
    DELDENYCHARNAMELOGON: (sCmd: 'DelDenyCharNameLogon'; nPermissionMin: 10;
    nPermissionMax: 10);
    SHOWDENYIPLOGON: (sCmd: 'ShowDenyIPLogon'; nPermissionMin: 10;
    nPermissionMax: 10);
    SHOWDENYACCOUNTLOGON: (sCmd: 'ShowDenyAccountLogon'; nPermissionMin: 10;
    nPermissionMax: 10);
    SHOWDENYCHARNAMELOGON: (sCmd: 'ShowDenyCharNameLogon'; nPermissionMin: 10;
    nPermissionMax: 10);
    VIEWWHISPER: (sCmd: 'ViewWhisper'; nPermissionMin: 10; nPermissionMax: 10);
    SPIRIT: (sCmd: '祈祷生效'; nPermissionMin: 10; nPermissionMax: 10);
    SPIRITSTOP: (sCmd: '停止叛变'; nPermissionMin: 10; nPermissionMax: 10);
    SETMAPMODE: (sCmd: 'SetMapMode'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWMAPMODE: (sCmd: 'ShowMapMode'; nPermissionMin: 10; nPermissionMax: 10);
    TESTSERVERCONFIG: (sCmd: 'TestServerConfig'; nPermissionMin: 10;
    nPermissionMax: 10);
    SERVERSTATUS: (sCmd: 'ServerStatus'; nPermissionMin: 10; nPermissionMax:
    10);
    TESTGETBAGITEM: (sCmd: 'TestGetBagItem'; nPermissionMin: 10; nPermissionMax:
    10);
    CLEARBAG: (sCmd: 'ClearBag'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWUSEITEMINFO: (sCmd: 'ShowUseItemInfo'; nPermissionMin: 10;
    nPermissionMax: 10);
    BINDUSEITEM: (sCmd: 'BindUseItem'; nPermissionMin: 10; nPermissionMax: 10);
    MOBFIREBURN: (sCmd: 'MobFireBurn'; nPermissionMin: 10; nPermissionMax: 10);
    TESTSPEEDMODE: (sCmd: 'TestSpeedMode'; nPermissionMin: 10; nPermissionMax:
    10);
    REMTEMSG: (sCmd: 'RemoteMsg'; nPermissionMin: 10; nPermissionMax: 10);
    COLORSAY: (sCmd: '允许彩色字体聊天'; nPermissionMin: 10;
    nPermissionMax:
    10);
    SETCOLORSAY: (sCmd: '设置聊天字体颜色'; nPermissionMin: 0;
    nPermissionMax:
    0);
    AllowReAlive: (sCmd: '允许复活'; nPermissionMin: 0; nPermissionMax: 0);
    USERITEM: (sCmd: '拿来'; nPermissionMin: 10; nPermissionMax: 10);

    LOCKLOGON: (sCmd: 'LockLogin'; nPermissionMin: 0; nPermissionMax: 0);
    SHOWEFFECT: (sCmd: 'ShowEffect'; nPermissionMin: 10; nPermissionMax: 10);
    OPENBOX: (sCmd: 'OpenBox'; nPermissionMin: 10; nPermissionMax: 10);
    AllSysMsg: (sCmd: '传'; nPermissionMin: 0; nPermissionMax: 10); );

  sClientSoftVersionError: string = '游戏版本错误.';
  sDownLoadNewClientSoft: string = '请到网站上下载最新版本游戏客户端软件。';
  sForceDisConnect: string = '连接被强行中断.';
  sClientSoftVersionTooOld: string = '您现在使用的客户端软件版本太老了，大量的游戏效果新将无法使用。';
  sDownLoadAndUseNewClient: string = '为了更好的进行游戏，请下载最新的客户端软件.';
  sOnlineUserFull: string = '可允许的玩家数量已满';
  sYouNowIsTryPlayMode: string = '你现在处于测试中，你可以在七级以前使用，但是会限制你的一些功能.';
  g_sNowIsFreePlayMode: string = '当前服务器运行于测试模式.';
  sAttackModeOfAll: string = '[攻击模式: 全体攻击]';
  sAttackModeOfPeaceful: string = '[攻击模式: 和平攻击]';
  sAttackModeOfDear: string = '[攻击模式: 夫妻攻击]';
  sAttackModeOfMaster: string = '[攻击模式: 师徒攻击]';
  sAttackModeOfGroup: string = '[攻击模式: 编组攻击]';
  sAttackModeOfGuild: string = '[攻击模式: 行会攻击]';
  sAttackModeOfRedWhite: string = '[攻击模式: 红名攻击]';
  sStartChangeAttackModeHelp: string = '使用组合快捷键 CTRL-H 更改攻击模式.';
  sStartNoticeMsg: string = '欢迎进入本服务器进行游戏.';

  sThrustingOn: string = '启用刺杀剑法';
  sThrustingOff: string = '关闭刺杀剑法';
  sHalfMoonOn: string = '开启半月弯刀';
  sHalfMoonOff: string = '关闭半月弯刀';
  sCrsHitOn: string = '开启光风斩';
  sCrsHitOff: string = '关闭光风斩';
  sFireSpiritsSummoned: string = '召唤烈火精灵成功...';
  sFireSpiritsFail: string = '召唤烈火精灵失败';
  sSpiritsGone: string = '召唤烈火结束.';
  sMateDoTooweak: string = '冲撞力不够.';

  g_sTheWeaponBroke: string = '武器破碎.';
  sTheWeaponRefineSuccessfull: string = '升级成功.';

  sYouPoisoned: string = '你中毒了.';

  sPetRest: string = '下属：休息';
  sPetAttack: string = '下属：攻击';

  sWearNotOfWoMan: string = '该装备为男性专用.';
  sWearNotOfMan: string = '该装备为女性专用.';
  sHandWeightNot: string = '你的腕力不够.';
  sWearWeightNot: string = '你的负重力不够.';

  g_sCastleMasterNot: string = '你不能穿戴城主专用装备.';
  g_sLevelNot: string = '你的等级不符合要求.';
  g_sJobNot: string = '你的职业不符合要求.';
  g_sDCNot: string = '你的攻击不符合要求.';
  g_sMCNot: string = '你的魔法不符合要求.';
  g_sSCNot: string = '你的道术不符合要求.';
  g_sReNewLevelNot: string = '你的转生等级不符合要求.';
  g_sCreditPointNot: string = '你的声望不符合要求.';
  g_sGuildNot: string = '你不是行会成员不能穿戴.';
  g_sGuildMasterNot: string = '你不是行会掌门人不能穿戴.';
  g_sSabukHumanNot: string = '你不是沙巴克成员不能穿戴.';
  g_sSabukMasterManNot: string = '你不是沙城城主不能穿戴.';
  g_sMemberNot: string = '你不是会员不能穿戴.';
  g_sMemberTypeNot: string = '你的会员类型不符号要求';
  g_sMemberLevelNot: string = '你的会员等级不符号要求';
  

  sCanotUseDrugOnThisMap: string = '此地图不允许使用任何药品.';
  sGameMasterMode: string = '已进入管理员模式';
  sReleaseGameMasterMode: string = '已退出管理员模式';
  sObserverMode: string = '已进入隐身模式';
  g_sReleaseObserverMode: string = '已退出隐身模式';
  sSupermanMode: string = '已进入无敌模式';
  sReleaseSupermanMode: string = '已退出无敌模式';
  sYouFoundNothing: string = '未获取任何物品.';

  g_sCanotDropGoldMsg: string = '太少的金币不允许扔在地上.';
  g_sCanotDropInSafeZoneMsg: string = '安全区不允许扔东西在地上.';
  g_sCanotDropItemMsg: string = '当前无法进行此操作.';
  g_sCanotUseItemMsg: string = '当前无法进行此操作.';
  g_sCanotMapUseItemMsg: string = '当前地图不允许使用%s.';

  g_sCanotUserDropItem: string = '此物品禁止扔在地上.';
  g_sCanotUserRepairItem: string = '此物品禁止修理.';
  g_sCanotUserStorageItem: string = '此物品禁止存仓库.';
  g_sCanotUserDealItem: string = '当前物品不允许进行交易！';

  g_sCanotTryDealMsg: string = '当前无法进行此操作.';
  g_sPleaseTryDealLaterMsg: string = '请稍候再交易.';
  g_sDealItemsDenyGetBackMsg: string = '交易的金币或物品不可以取回，要取回请取消再重新交易.';
  g_sDisableDealItemsMsg: string = '交易功能暂时关闭.';
  g_sDealActionCancelMsg: string = '交易取消.';
  g_sPoseDisableDealMsg: string = '对方禁止进入交易';
  g_sDealSuccessMsg: string = '交易成功...';
  g_sDealOKTooFast: string = '过早按了成交按钮。';
  g_sYourBagSizeTooSmall: string = '你的背包空间不够，无法装下对方交易给你的物品.';
  g_sDealHumanBagSizeTooSmall: string = '交易对方的背包空间不够，无法装下对方交易给你的物品.';
  g_sYourGoldLargeThenLimit: string = '你的所带的金币太多，无法装下对方交易给你的金币.';
  g_sDealHumanGoldLargeThenLimit: string = '交易对方的所带的金币太多，无法装下对方交易给你的金币.';
  g_sYouDealOKMsg: string = '你已经确认交易了。';
  g_sPoseDealOKMsg: string = '对方已经确认交易了。';
  g_sKickClientUserMsg: string = '请不要使用非法外挂软件.';

  g_sStartMarryManMsg: string = '[%n]: #7%s#7 与 #7%d#7 的婚礼现在开始！';
  g_sStartMarryWoManMsg: string = '[%n]: #%d7 与 #7%s#7 的婚礼现在开始！';
  g_sStartMarryManAskQuestionMsg: string = '[%n]: #7%s#7 你愿意娶 #7%d#7 小姐为妻，并且照顾她一生一世吗？';
  g_sStartMarryWoManAskQuestionMsg: string = '[%n]: #7%d#7 你愿意娶 #7%s#7 小姐为妻，并且照顾她一生一世吗？';

  g_sMarryManAnswerQuestionMsg: string =
  '[#7%s#7]: 我愿意！ #7%d#7 小姐我会尽我一生的时间来照顾您，让您过上快乐美满的日子的。';
  g_sMarryManAskQuestionMsg: string = '[%n]: #7%d#7 你愿意嫁给 #7%s#7 先生为妻，并照顾他一生一世吗？';

  g_sMarryWoManAnswerQuestionMsg: string = '[#7%s#7]: 我愿意！ #7%d#7 先生我愿意让你来照顾我，保护我。';
  g_sMarryWoManGetMarryMsg: string = '[%n]: 恭喜 #7%d#7 先生与 #7%s#7 小姐正式成为合法夫妻。';

  g_sMarryWoManDenyMsg: string = '[#7%s#7]: #7%d#7 你这个好色之徒，谁会愿意嫁给你呀！癞蛤蟆想吃天鹅肉。';
  g_sMarryWoManCancelMsg: string = '[%n]: 真是可惜，二个人这个时候才翻脸，你们培养好感情后再来找我吧。';

  g_sfUnMarryManLoginMsg: string = '你的老婆[#7%d#7]已经强行与你脱离了夫妻关系了.';
  g_sfUnMarryWoManLoginMsg: string = '你的老公[#7%d#7]已经强行与你脱离了夫妻关系了.';

  g_sManLoginDearOnlineSelfMsg: string = '你的老婆[#7%d#7]当前位于[%m(%x,%y)].';
  g_sManLoginDearOnlineDearMsg: string = '你的老公[#7%s#7]在[%m(%x,%y)]上线了.';

  g_sWoManLoginDearOnlineSelfMsg: string = '你的老公[#7%d#7]当前位于[%m(%x,%y)].';
  g_sWoManLoginDearOnlineDearMsg: string = '你的老婆[#7%s#7]在[%m(%x,%y)]上线了.';

  g_sManLoginDearNotOnlineMsg: string = '你的老婆现在不在线.';
  g_sWoManLoginDearNotOnlineMsg: string = '你的老公现在不在线.';

  g_sManLongOutDearOnlineMsg: string = '你的老公在[%m(%x,%y)]下线了.';
  g_sWoManLongOutDearOnlineMsg: string = '你的老婆在[%m(%x,%y)]下线了.';

  g_sYouAreNotMarryedMsg: string = '你都没结婚查什么？';
  g_sYourWifeNotOnlineMsg: string = '你的老婆没有在线.';
  g_sYourHusbandNotOnlineMsg: string = '你的老公没有在线.';

  g_sYourWifeNowLocateMsg: string = '你的老婆[#7%d#7]现在位于:';
  g_sYourHusbandSearchLocateMsg: string = '你的老公[#7%s#7]正找你，他位于:';
  g_sYourHusbandNowLocateMsg: string = '你的老公[#7%d#7]现在位于:';
  g_sYourWifeSearchLocateMsg: string = '你的老婆[#7%s#7]正找你，他位于:';

  g_sfUnMasterLoginMsg: string = '你的徒弟[#7%s#7]已经背叛师门了.';
  g_sfUnMasterListLoginMsg: string = '你的师父[#7%s#7]已经将你逐出师门了.';

  g_sMasterListOnlineSelfMsg: string = '你的师父[#7%d#7]当前位于%m(%x,%y).';
  g_sMasterListOnlineMasterMsg: string = '你的徒弟[#7%s#7]在%m(%x,%y)上线了.';

  g_sMasterOnlineSelfMsg: string = '你的徒弟[#7%d#7]当前位于%m(%x,%y).';
  g_sMasterOnlineSelfMsgEx: string = '你的徒弟[#7%d#7]没有上线.';
  g_sMasterOnlineMasterListMsg: string = '你的师父[#7%s#7]在%m(%x,%y)上线了.';

  g_sMasterLongOutMasterListOnlineMsg: string = '你的师父[#7%s#7]在[%m(%x,%y)]下线了.';
  g_sMasterListLongOutMasterOnlineMsg: string = '你的徒弟[#7%s#7]在[%m(%x,%y)]下线了.';

  g_sMasterListNotOnlineMsg: string = '你的师父现不在线.';
  g_sMasterNotOnlineMsg: string = '你的徒弟没有一个在线.';

  g_sYouAreNotMasterMsg: string = '你都没师徒关系查什么？';
  g_sYourMasterNotOnlineMsg: string = '你的师父还没有上线.';
  g_sYourMasterListNotOnlineMsg: string = '你的徒弟没有一个在线.';

  g_sYourMasterNowLocateMsg: string = '你的师父[#7%d#7]现在位于:';
  g_sYourMasterListSearchLocateMsg: string = '你的徒弟[#7%s#7]正在找你，他现在位于:';
  g_sYourMasterListNowLocateMsg: string = '你的徒弟[#7%d#7]现在位于:';
  g_sYourMasterSearchLocateMsg: string = '你的师父[#7%s#7]正在找你，他现在位于:';
  g_sYourMasterListUnMasterOKMsg: string = '你的徒弟[#7%s#7]已经出师了.';
  g_sYouAreUnMasterOKMsg: string = '你已经出师了.';

  g_sUnMasterLoginMsg: string = '你的徒弟[#7%s#7]已经出师了.';

  g_sNPCSayUnMasterOKMsg: string = '[%n]: 我宣布%d与%s正式脱离师徒关系。';

  g_sNPCSayForceUnMasterMsg: string = '[%n]: 我宣布%s与%d已经正式脱离师徒关系.';

  g_sMyInfo: string =
  '『人物名称』:%name 『当前位置』:%map(%x:%y)\『当前等级』:%level ' +
    '『金 币 数』:%gold 『PK 点 数』:%pk\『生 命 值』:%minhp/%maxhp 『魔 法 值』:%minmp/%maxmp\' +
    '『攻 击 力』:%mindc/%maxdc『魔 法 力』:%minmc/%maxmc『道 术 力』:%minsc/%maxsc\『登录时间』' +
    ':%logontime 『在线时长』:%logonlong 分钟';

  g_sSendOnlineCountMsg: string = '当前在线人数: %c';

  g_sOpenedDealMsg: string = '开始交易。';
  g_sSendCustMsgCanNotUseNowMsg: string =
  '祝福语功能还没有开放.';
  g_sSubkMasterMsgCanNotUseNowMsg: string =
  '城主发信息功能还没有开放.';
  g_sWeaponRepairSuccess: string = '武器修复成功.';
  g_sDefenceUpTime: string = '防御力增加%d秒';
  g_sDefenceDownTime: string = '防御力减少%d秒';
  g_sMagDefenceUpTime: string = '魔法防御力增加%d秒';
  g_sMagDefenceDownTime: string = '魔法防御力减少%d秒';
  g_sWinLottery1Msg: string = '祝贺您，中了一等奖。';
  g_sWinLottery2Msg: string = '祝贺您，中了二等奖。';
  g_sWinLottery3Msg: string = '祝贺您，中了三等奖。';
  g_sWinLottery4Msg: string = '祝贺您，中了四等奖。';
  g_sWinLottery5Msg: string = '祝贺您，中了五等奖。';
  g_sWinLottery6Msg: string = '祝贺您，中了六等奖。';
  g_sNotWinLotteryMsg: string = '等下次机会吧.';
  g_sWeaptonMakeLuck: string = '武器被加幸运了.';
  g_sWeaptonNotMakeLuck: string = '无效.';
  g_sTheWeaponIsCursed: string = '你的武器被诅咒了.';
  g_sCanotTakeOffItem: string = '无法取下物品.';
  g_sJoinGroup: string = '%s 加入小组.';
  g_sTryModeCanotUseStorage: string = '试玩模式不可以使用仓库功能.';
  g_sCanotGetItems: string = '无法携带更多的东西.';
  g_sEnableDearRecall: string = '允许夫妻传送.';
  g_sDisableDearRecall: string = '禁止夫妻传送.';
  g_sEnableMasterRecall: string = '允许师徒传送.';
  g_sDisableMasterRecall: string = '禁止师徒传送.';
  g_sNowCurrDateTime: string = '服务器时间: ';
  g_sEnableAllowRebirth: string = '[允许复活]';
  g_sDisableAllowRebirth: string = '[禁止复活]';
  g_sEnableHearWhisper: string = '[允许私聊]';
  g_sDisableHearWhisper: string = '[禁止私聊]';
  g_sEnableShoutMsg: string = '[允许群聊]';
  g_sDisableShoutMsg: string = '[禁止群聊]';
  g_sEnableDealMsg: string = '[允许交易]';
  g_sDisableDealMsg: string = '[禁止交易]';
  g_sEnableGuildChat: string = '[允许行会聊天]';
  g_sDisableGuildChat: string = '[禁止行会聊天]';
  g_sEnableJoinGuild: string = '[允许加入行会]';
  g_sDisableJoinGuild: string = '[禁止加入行会]';
  g_sEnableAuthAllyGuild: string = '[允许行会联盟]';
  g_sDisableAuthAllyGuild: string = '[禁止行会联盟]';
  g_sEnableGroupRecall: string = '[允许天地合一]';
  g_sDisableGroupRecall: string = '[禁止天地合一]';
  g_sEnableGuildRecall: string = '[允许行会合一]';
  g_sDisableGuildRecall: string = '[禁止行会合一]';
  g_sEnableAddFriend: string = '[允许加为好友]';
  g_sDisableAddFriend: string = '[拒绝加为好友]';
  g_sPleaseInputPassword: string = '请输入密码:';
  g_sTheMapDisableMove: string = '地图%s(%s)不允许传送.';
  g_sTheMapNotFound: string = '%s 此地图号不存在.';
  g_sYourIPaddrDenyLogon: string = '你当前登录的IP地址已被禁止登录了.';
  g_sYourAccountDenyLogon: string = '你当前登录的帐号已被禁止登录了.';
  g_sYourCharNameDenyLogon: string = '你当前登录的人物已被禁止登录了.';
  g_sCanotPickUpItem: string = '在一定时间以内无法捡起此物品.';
  g_sCanotSendmsg: string = '无法发送信息.';
  g_sUserDenyWhisperMsg: string = ' 拒绝私聊.';
  g_sUserNotOnLine: string = '  没有在线.';
  g_sRevivalRecoverMsg: string = '复活戒指生效，体力恢复.';
  g_sClientVersionTooOld: string =
  '由于您使用的客户端版本太老了，无法正确显示人物信息.';

  g_sCastleGuildName: string = '(%CastleName)%Guildname[%RankName]';
  g_sNoCastleGuildName: string = '%GuildName[%RankName]';
  g_sWarrReNewName: string = '%ChrName\*<圣>*';
  g_sWizardReNewName: string = '%ChrName\*<神>*';
  g_sTaosReNewName: string = '%ChrName\*<尊>*';
  g_sRankLevelName: string = '%s';
  g_sManDearName: string = '[%s 的老公]';
  g_sWoManDearName: string = '[%s 的老婆]';
  g_sMasterName: string = '[%s 的师父]';
  g_sNoMasterName: string = '[%s 的徒弟]';
  g_sHumanShowName: string = '%ChrName\%GuildName\%DearName\%MasterName';

  g_sChangePermissionMsg: string = '当前权限等级为:%d';
  g_sChangeKillMonExpRateMsg: string = '经验倍数:%g 时长%d秒';
  g_sChangePowerRateMsg: string = '攻击力倍数:%g 时长%d秒';
  g_sChangeMemberLevelMsg: string = '当前会员等级为:%d';
  g_sChangeMemberTypeMsg: string = '当前会员类型为:%d';
  g_sScriptChangeHumanHPMsg: string = '当前HP值为:%d';
  g_sScriptChangeHumanMPMsg: string = '当前MP值为:%d';

  g_sScriptGuildAuraePointNoGuild: string = '你还没加入行会.';
  g_sScriptGuildAuraePointMsg: string = '你的行会人气值为:%d';

  g_sScriptGuildBuildPointNoGuild: string = '你还没加入行会.';
  g_sScriptGuildBuildPointMsg: string = '你的行会的建设值为:%d';

  g_sScriptGuildFlourishPointNoGuild: string = '你还没加入行会.';
  g_sScriptGuildFlourishPointMsg: string = '你的行会的繁荣值为:%d';

  g_sScriptGuildStabilityPointNoGuild: string = '你还没加入行会.';
  g_sScriptGuildStabilityPointMsg: string = '你的行会的安定值为:%d';

  g_sScriptChiefItemCountMsg: string = '你的行会的超级装备数为:%d';

  g_sDisableSayMsg: string = '[%d分钟内你将被禁止发言]';
  g_sOnlineCountMsg: string = '在线数: (%d/%d) %d';
  g_sTotalOnlineCountMsg: string = '总在线数: (%d/%d) %d';
  g_sYouNeedLevelMsg: string = '你的等级要在%d级以上才能用此功能.';
  g_sThisMapDisableSendCyCyMsg: string = '本地图不允许喊话.';
  g_sYouCanSendCyCyLaterMsg: string = '%d秒后才可以再发文字.';
  g_sYouIsDisableSendMsg: string = '禁止聊天.';
  g_sYouMurderedMsg: string = '你犯了谋杀罪.';
  g_sYouKilledByMsg: string = '你被[#7%s#7]杀害了.';
  g_sYouProtectedByLawOfDefense: string = '[你受到正当防卫的规则保护]';
  g_sYourUseItemIsNul: string = '你的%s处没有放上装备.';

  g_sSlaveLevelUp: string = '您的宠物升级了.';
  g_sRepairItemMsg: string = '(%s)修复成功.';

  g_sGropuIsCheckMsg: string = '正在发送组队邀请，请稍候.';
  g_sGropuIsCheckMsgNot: string = '请不要重复提交操作.';
  g_sGropuIsCheckMsgTimeOut: string = '你发送给[#7%s#7]的组队邀请,因超时已取消.';
  g_sGropuIsCheckMsgNo: string = '[#7%s#7] 拒绝了你的组队邀请.';

  g_sGroupCheckMsg: string = '[%s](%d级)  想邀请你加入队伍，你是否同意？\分配模式[%s].';
  g_sGroupItemClass1: string = '默认自由分配';
  g_sGroupItemClass2: string = '共享随机分配';

  g_sGuildCheckMsg: string = '[%s] 想邀请你加入行会[%s]，你是否同意？';
  g_sGuildIsCheckMsg: string = '正在发送邀请，请稍候.';
  g_sGuildIsCheckMsgNot: string = '请不要重复提交操作.';
  g_sGuildIsCheckMsgNo: string = '[#7%s#7] 拒绝了你的行会邀请.';

  g_sFriendCheckMsg: string = '[%s] 希望将你加为好友. 你是否同意?';
  g_sFriendIsCheckMsg: string = '正在发送好友申请，请稍候.';
  g_sFriendIsCheckMsgNot: string = '请不要重复提交操作.';
  g_sFriendIsCheckMsgNo: string = '[#7%s#7] 拒绝了你的好友申请.';

  g_sDealCheckMsg: string = '[%s] 请求与你进行交易，你是否同意?';
  g_sDealIsCheckMsg: string = '正在发送交易请求，请稍候.';
  g_sDealIsCheckMsgNot: string = '请不要重复提交操作.';
  g_sDealIsCheckMsgNo: string = '[#7%s#7] 拒绝了你的交易请求.';

resourcestring
  g_sGameLogMsg1 = '%d'#9'%s'#9'%d'#9'%d'#9'%s'#9'%s'#9'%d'#9'%s'#9'%s';
  g_sHumanDieEvent = '人物死亡事件';
  g_sHitOverSpeed = '[攻击超速] %s 间隔:%d 数量:%d';
  g_sRunOverSpeed = '[跑步超速] %s 间隔:%d 数量:%d';
  g_sWalkOverSpeed = '[行走超速] %s 间隔:%d 数量:%d';
  g_sSpellOverSpeed = '[魔法超速] %s 间隔:%d 数量:%d';
  g_sBunOverSpeed = '[游戏超速] %s 间隔:%d 数量:%d';

  g_sGameCommandPermissionTooLow = '权限不够.';
  g_sGameCommandParamUnKnow = '命令格式: @%s %s';
  g_sGameCommandMoveHelpMsg = '地图号';
  g_sGameCommandPositionMoveHelpMsg = '地图号 座标X 座标Y';
  g_sGameCommandPositionMoveCanotMoveToMap =
    '无法移动到地图: %s X:%s Y:%s';
  g_sGameCommandInfoHelpMsg = '人物名称';

  g_sNowNotOnLineOrOnOtherServer = '%s 现在不在线，或在其它服务器上.';
  g_sGameCommandMobCountHelpMsg = '地图号';
  g_sGameCommandMobCountMapNotFound = '指定的地图不存在.';
  g_sGameCommandMobCountMonsterCount = '怪物数量：%d';
  g_sGameCommandHumanCountHelpMsg = '地图号';
  g_sGameCommandKickHumanHelpMsg = '人物名称';
  g_sGameCommandTingHelpMsg = '人物名称';
  g_sGameCommandSuperTingHelpMsg = '人物名称 范围(0-10)';
  g_sGameCommandMapMoveHelpMsg = '源地图  目标地图';
  g_sGameCommandMapMoveMapNotFound = '地图%s不存在.';
  g_sGameCommandShutupHelpMsg = '人物名称  时间长度(分钟)';
  g_sGameCommandShutupHumanMsg = '%s 已被禁言%d分钟';
  g_sGameCommandGamePointHelpMsg =
    '人物名称 控制符(+,-,=) 游戏点数(1-100000000)';
  g_sGameCommandGamePointHumanMsg =
    '你的游戏点已增加%d点，当前总点数为%d点。';
  g_sGameCommandGamePointGMMsg =
    '%s的游戏点已增加%d点，当前总点数为%d点。';

  g_sGameCommandCreditPointHelpMsg =
    '人物名称 控制符(+,-,=) 声望点数(0-255)';
  g_sGameCommandCreditPointHumanMsg =
    '你的声望点已增加%d点，当前总声望点数为%d点。';
  g_sGameCommandCreditPointGMMsg =
    '%s的声望点已增加%d点，当前总声望点数为%d点。';

  g_sGameCommandGameGoldHelpMsg =
    ' 人物名称 控制符(+,-,=) 元宝(1-200000000)';
  g_sGameCommandGameGoldHumanMsg = '你的%s已增加%d，当前拥有%d%s。';
  g_sGameCommandGameGoldGMMsg = '%s的%s已增加%d，当前拥有%d%s。';

  g_sGameCommandMapInfoMsg = '地图名称: %s(%s)';
  g_sGameCommandMapInfoSizeMsg = '地图大小: X(%d) Y(%d)';
  g_sGameCommandMapInfoCountMsg = '地图人数: %d';

  g_sGameCommandShutupReleaseHelpMsg = '人物名称';
  g_sGameCommandShutupReleaseCanSendMsg =
    '你已经恢复聊天功能.';
  g_sGameCommandShutupReleaseHumanCanSendMsg = '%s 已经恢复聊天。';
  g_sGameCommandShutupListIsNullMsg = '禁言列表为空.';

  g_sGameCommandLevelConsoleMsg = '[等级调整] %s (%d -> %d)';
  g_sGameCommandSbkGoldHelpMsg =
    '城堡名称 控制符(=、-、+) 金币数(1-100000000)';
  g_sGameCommandSbkGoldCastleNotFoundMsg = '城堡%s未找到.';
  g_sGameCommandSbkGoldShowMsg = '%s的金币数为: %d 今天收入: %d';
  g_sGameCommandRecallHelpMsg = '人物名称';
  g_sGameCommandReGotoHelpMsg = '人物名称';
  g_sGameCommandShowHumanFlagHelpMsg = '人物名称 标识号';
  g_sGameCommandShowHumanFlagONMsg = '%s: [%d] = ON';
  g_sGameCommandShowHumanFlagOFFMsg = '%s: [%d] = OFF';

  g_sGameCommandShowHumanUnitHelpMsg = '人物名称 单元号';
  g_sGameCommandShowHumanUnitONMsg = '%s: [%d] = ON';
  g_sGameCommandShowHumanUnitOFFMsg = '%s: [%d] = OFF';
  g_sGameCommandMobHelpMsg = '怪物名称 数量 等级 五行(1-5)';
  g_sGameCommandMobMsg = '怪物名称不正确或其它未问题.';
  g_sGameCommandMobNpcHelpMsg =
    'NPC名称 脚本文件名 外形(数字) 属沙城(0,1)';
  g_sGameCommandNpcScriptHelpMsg = '？？？？';
  g_sGameCommandDelNpcMsg =
    '命令使用方法不正确，必须与NPC面对面，才能使用此命令.';
  g_sGameCommandRecallMobHelpMsg = '怪物名称 数量 等级';
  g_sGameCommandLuckPointHelpMsg = '人物名称 控制符 幸运点数';

  g_sGameCommandLuckPointMsg = '%s 的幸运点数为:%d/%g 幸运值为:%d';
  g_sGameCommandLotteryTicketMsg =
    '已中彩票数:%d 未中彩票数:%d 一等奖:%d 二等奖:%d 三等奖:%d 四等奖:%d 五等奖:%d 六等奖:%d ';
  g_sGameCommandReloadGuildHelpMsg = '行会名称';
  g_sGameCommandReloadGuildOnMasterserver =
    '此命令只能在主游戏服务器上执行.';
  g_sGameCommandReloadGuildNotFoundGuildMsg = '未找到行会%s.';
  g_sGameCommandReloadGuildSuccessMsg = '行会%s重加载成功...';

  g_sGameCommandReloadLineNoticeSuccessMsg = '重新加载公告设置信息完成.';
  g_sGameCommandReloadLineNoticeFailMsg = '重新加载公告设置信息失败.';
  g_sGameCommandFreePKHelpMsg = '人物名称';
  g_sGameCommandFreePKHumanMsg = '你的PK值已经被清除...';
  g_sGameCommandFreePKMsg = '%s的PK值已经被清除...';
  g_sGameCommandPKPointHelpMsg = '人物名称';
  g_sGameCommandPKPointMsg = '%s的PK点数为:%d';
  g_sGameCommandIncPkPointHelpMsg = '人物名称 PK点数';
  g_sGameCommandIncPkPointAddPointMsg = '%s的PK值已增加%d点...';
  g_sGameCommandIncPkPointDecPointMsg = '%s的PK值已减少%d点...';
  g_sGameCommandHumanLocalHelpMsg = '人物名称';
  g_sGameCommandHumanLocalMsg = '%s来自:%s';
  g_sGameCommandPrvMsgHelpMsg = '人物名称';
  g_sGameCommandPrvMsgUnLimitMsg = '%s 已从禁止私聊列表中删除...';
  g_sGameCommandPrvMsgLimitMsg = '%s 已被加入禁止私聊列表...';
  g_sGamecommandMakeHelpMsg = ' 物品名称  数量';
  g_sGamecommandMakeItemNameOrPerMissionNot = '输入的物品名称不正确，或权限不够.';
  g_sGamecommandMakeInCastleWarRange = '攻城区域，禁止使用此功能.';
  g_sGamecommandMakeInSafeZoneRange =
    '非安全区，禁止使用此功能.';

  g_sGamecommandMakeItemNameNotFound = '%s 物品名称不正确.';
  g_sGamecommandSuperMakeHelpMsg = '身上没指定物品.';
  g_sGameCommandViewWhisperHelpMsg = ' 人物名称';
  g_sGameCommandViewWhisperMsg1 = '已停止侦听%s的私聊信息...';
  g_sGameCommandViewWhisperMsg2 = '正在侦听%s的私聊信息...';
  g_sGameCommandReAliveHelpMsg = ' 人物名称';
  g_sGameCommandReAliveMsg = '%s 已获重生.';
  g_sGameCommandChangeJobHelpMsg =
    ' 人物名称 职业类型(Warr Wizard Taos)';
  g_sGameCommandChangeJobMsg = '%s 的职业更改成功。';
  g_sGameCommandChangeJobHumanMsg = '职业更改成功。';
  g_sGameCommandTestGetBagItemsHelpMsg =
    '(用于测试升级武器方面参数)';
  g_sGameCommandShowUseItemInfoHelpMsg = '人物名称';
  g_sGameCommandBindUseItemHelpMsg = '人物名称 物品类型 绑定方法';
  g_sGameCommandBindUseItemNoItemMsg = '%s的%s没有戴物品.';
  g_sGameCommandBindUseItemAlreadBindMsg =
    '%s的%s上的物品早已绑定过了.';
  g_sGameCommandMobFireBurnHelpMsg = '命令格式: %s %s %s %s %s %s %s';
  g_sGameCommandMobFireBurnMapNotFountMsg = '地图%s 不存在';

resourcestring
  U_DRESSNAME = '衣服';
  U_WEAPONNAME = '武器';
  U_RIGHTHANDNAME = '照明物';
  U_NECKLACENAME = '项链';
  U_HELMETNAME = '头盔';
  U_ARMRINGLNAME = '左手镯';
  U_ARMRINGRNAME = '右手镯';
  U_RINGLNAME = '左戒指';
  U_RINGRNAME = '右戒指';

  U_BUJUKNAME = '物品';
  U_BELTNAME = '腰带';
  U_BOOTSNAME = '鞋子';
  U_CHARMNAME = '宝石';

var
{$IFDEF PLUGOPEN}
  nIPLocal: Integer = -1;
  nFriendModule: Integer = -1;
{$ENDIF}
  dwStartTime: LongWord = 0;
  dwStartTimeTick: LongWord = 0;
  g_boCheckOk: Boolean = False;
  boCheckED: Boolean = False;
  boCanConned: Boolean = False;
  boTeledata: Boolean = False;
  boEncrypt: Boolean = False;
  LoginPlayObject: array[0..PLAYOBJECTINDEXCOUNT - 1] of TPlayObject;
  g_boTestServer: Boolean = True;
  g_sMissionData: string;
  g_sMissionDataMD5: string;
  g_nMissionDataLen: Integer;

  g_sMapDescData: string;
  g_sMapDescDataMD5: string;
  g_nMapDescDataLen: Integer;

  g_sItemData: string;
  g_sItemDataMD5: string;
  g_nItemDataLen: Integer;

  g_sHintData: string;
  g_nHintDataLen: Integer;

  g_sMagicData: string;
  g_sMagicDataMD5: string;
  g_nMagicDataLen: Integer;
  g_TopInfo: array[0..13] of array of TTopInfo;

  g_wYear: Word = 0;
  g_wMonth: Word = 0;
  g_wDay: Word = 0;
  g_wHour: Word = 0;
  g_wMin: Word = 0;
  g_wSec: Word = 0;
  g_wMSec: Word = 0;
  g_boSaveMonDropLimit: Boolean = False;
type
  TZIPLevel = 0..9;

  TMsgStringList = class(TStringList)
  public
    procedure LoadFromFile(const FileName: string); override;
  end;

function MyFileExists(const FileName: string): Boolean;
function GetWaitMsgID(): Integer;
function ZIPCompress(const InBuf: Pointer; InBytes: Integer; Level: TZIPLevel; out OutBuf: PChar): Integer;
function ZIPDecompress(const InBuf: Pointer; InBytes: Integer; OutEstimate: Integer; out OutBuf: PChar): Integer;
function CheckItemBindMode(UserItem: pTUserItem; BindMode: TBindMode): Boolean;

implementation

uses HUtil32, EDcodeEx, CheckDll, CoralWry, MD5Unit;

var
  nAddGameDataLog: Integer = -1;
  g_nWaitMsgIndex: Integer = 0;

function GetLoginPlay(Index: Integer): TPlayObject;
begin
  Result := nil;
  if (Index > 0) and (Index < PLAYOBJECTINDEXCOUNT) then
    Result := LoginPlayObject[Index];
end;

procedure SetLoginPlay(Index: Integer; PlayObject: TPlayObject);
begin
  if (Index > 0) and (Index < PLAYOBJECTINDEXCOUNT) then
    LoginPlayObject[Index] := PlayObject;
end;

function SetSayItem(UserItem: pTUserItem): Integer;
begin
  Inc(g_SayItemIndex);
  if g_SayItemIndex > MAXSAYITEMCOUNT then
    g_SayItemIndex := 0;
  if g_SayItemIndex < 0 then
    g_SayItemIndex := 0;
  g_SayItemList[g_SayItemIndex] := UserItem^;
  Result := g_SayItemIndex;
end;

function GetSayItem(Index: Integer): pTUserItem;
begin
  Result := nil;
  if (Index >= 0) and (Index <= MAXSAYITEMCOUNT) then
    Result := @g_SayItemList[Index];
end;

function GetFilesSize(FileName: string): Integer;
var
  Size: Integer;
  SearchRec: TSearchRec;
begin
  Size := 0;
  FindFirst(FileName, faAnyFile, SearchRec);
  Size := Size + SearchRec.Size;
  FindClose(SearchRec);
  Result := Size;
end;

procedure SetProcessName(sName: string);
begin

end;

function GetStartTime(nTime: LongWord): string;
var
  h, s, m, s1: LongWord;
begin
  if nTime >= 3600 then begin
    h := nTime div 3600;
    s := nTime mod 3600;
    m := s div 60;
    s1 := s mod 60;
    Result := Format('%d小时%d分钟%d秒', [h, m, s1]);
  end
  else begin
    if nTime >= 60 then begin
      m := nTime div 60;
      s := nTime mod 60;
      Result := Format('%d分钟%d秒', [m, s]);
    end
    else begin
      Result := Format('%d秒', [nTime]);
    end;
  end;
end;
{$IFDEF PLUGOPEN}

function AddToPulgProcTable(sProcName: string; nCheckCode: Integer): Integer;

var
  i: Integer;
begin
  Result := -1;
  for i := Low(PlugProcArray) to High(PlugProcArray) do begin
    if PlugProcArray[i].sProcName = '' then begin
      PlugProcArray[i].sProcName := sProcName;
      PlugProcArray[i].nCheckCode := nCheckCode;
      Result := i;
      break;
    end;
  end;
end;
{$ENDIF}

function LoadLineHint(FileName: string): Boolean;
var
  sText: string;
  StrList: TStringList;
  OutLen: Integer;
  OutBuffer: PChar;
begin
  Result := False;
  if FileExists(FileName) then begin
    StrList := TStringList.Create;
    StrList.LoadFromFile(FileName);
    sText := StrList.Text;
    OutLen := ZIPCompress(PChar(sText), Length(sText) + 1, 9, OutBuffer);
    if OutLen > 0 then begin
      g_nHintDataLen := OutLen;
      g_sHintData := EncodeLongBuffer(OutBuffer, OutLen);
      FreeMem(OutBuffer);
    end;
    Result := True;
    StrList.Free;
  end;
end;

//读取公告内容
function LoadLineNotice(FileName: string): Boolean;
var
  i: Integer;
  sText: string;
begin
  Result := False;
  if FileExists(FileName) then begin
    LineNoticeList.LoadFromFile(FileName);
    i := 0;
    while (True) do begin
      if LineNoticeList.Count <= i then
        break;
      sText := Trim(LineNoticeList.Strings[i]);
      if sText = '' then begin
        LineNoticeList.Delete(i);
        Continue;
      end;

      LineNoticeList.Strings[i] := UserEngine.GetDefiniensConstText(sText);
      Inc(i);
    end;
    Result := True;
  end;
end;

function GetMultiServerAddrPort(btServerIndex: Byte; var sIPaddr: string; var nPort: Integer): Boolean;
begin
  Result := False;

end;

procedure MainOutMessage(Msg: string);
begin
  if not g_Config.boShowExceptionMsg then begin
    if (Length(Msg) > 2) and ((Msg[2] = 'E') or (Msg[1] = 'A')) then
      Exit;
  end;
  EnterCriticalSection(LogMsgCriticalSection);
  try
    MainLogMsgList.Add(DateTimeToStr(Now) + ' ' + Msg);
  finally
    LeaveCriticalSection(LogMsgCriticalSection);
  end;
end;

function GetExVersionNO(nVersionDate: Integer; var nOldVerstionDate: Integer):
  Integer;
begin
  Result := 0;
  nOldVerstionDate := 0;
  if nVersionDate > 100000000 then begin
    while (nVersionDate > 100000000) do begin
      Dec(nVersionDate, 100000000);
      Inc(Result, 100000000);
    end;
  end;
  nOldVerstionDate := nVersionDate;
end;

function GetNextDirection(sX, sY, dx, dy: Integer): Byte;
var
  flagx, flagy: Integer;
begin
  Result := DR_DOWN;
  if sX < dx then
    flagx := 1
  else if sX = dx then
    flagx := 0
  else
    flagx := -1;
  if abs(sY - dy) > 2 then
    if (sX >= dx - 1) and (sX <= dx + 1) then
      flagx := 0;

  if sY < dy then
    flagy := 1
  else if sY = dy then
    flagy := 0
  else
    flagy := -1;
  if abs(sX - dx) > 2 then
    if (sY > dy - 1) and (sY <= dy + 1) then
      flagy := 0;

  if (flagx = 0) and (flagy = -1) then
    Result := DR_UP;
  if (flagx = 1) and (flagy = -1) then
    Result := DR_UPRIGHT;
  if (flagx = 1) and (flagy = 0) then
    Result := DR_RIGHT;
  if (flagx = 1) and (flagy = 1) then
    Result := DR_DOWNRIGHT;
  if (flagx = 0) and (flagy = 1) then
    Result := DR_DOWN;
  if (flagx = -1) and (flagy = 1) then
    Result := DR_DOWNLEFT;
  if (flagx = -1) and (flagy = 0) then
    Result := DR_LEFT;
  if (flagx = -1) and (flagy = -1) then
    Result := DR_UPLEFT;
end;
//检查是否可以穿上装备
function CheckUserItems(nIdx: Integer; StdItem: pTStdItem): Boolean;
begin
  Result := False;
  case nIdx of
    U_DRESS: if StdItem.StdMode = tm_Dress then
        Result := True;
    U_WEAPON: if StdItem.StdMode = tm_Weapon then
        Result := True;
    U_RIGHTHAND: if StdItem.StdMode = tm_Light then
        Result := True;
    U_NECKLACE: if StdItem.StdMode = tm_Necklace then
        Result := True;
    U_HELMET: if StdItem.StdMode = tm_Helmet then
        Result := True;
    U_ARMRINGR,
      U_ARMRINGL: if StdItem.StdMode = tm_ArmRing then
        Result := True;
    U_RINGL,
      U_RINGR: if StdItem.StdMode = tm_ring then
        Result := True;
    U_BUJUK: if StdItem.StdMode = tm_Amulet then
        Result := True;
    U_BELT: if StdItem.StdMode = tm_Belt then
        Result := True;
    U_BOOTS: if StdItem.StdMode = tm_Boot then
        Result := True;
    U_CHARM: if (StdItem.StdMode = tm_Stone) or (StdItem.StdMode = tm_Rock) then
        Result := True;
    U_HOUSE: if (StdItem.StdMode = tm_House) then
        Result := True;
    U_CIMELIA: if (StdItem.StdMode = tm_Cowry) then
        Result := True;
    U_REIN: if (StdItem.StdMode = tm_Rein) then
        Result := True;
    U_BELL: if (StdItem.StdMode = tm_Bell) then
        Result := True;
    U_SADDLE: if (StdItem.StdMode = tm_Saddle) then
        Result := True;
    U_DECORATION: if (StdItem.StdMode = tm_Decoration) then
        Result := True;
    U_NAIL: if (StdItem.StdMode = tm_Nail) then
        Result := True;
  end;
end;

function AddDateTimeOfDay(DateTime: TDateTime; nDay: Integer): TDateTime;

var
  Year, Month, Day: Word;
begin
  if nDay > 0 then begin
    Dec(nDay);
    DecodeDate(DateTime, Year, Month, Day);
    while (True) do begin
      if MonthDays[False][Month] >= (Day + nDay) then
        break;
      nDay := (Day + nDay) - MonthDays[False][Month] - 1;
      Day := 1;
      if Month <= 11 then begin
        Inc(Month);
        Continue;
      end;
      Month := 1;
      if Year = 99 then begin
        Year := 2000;
        Continue;
      end;
      Inc(Year);
    end;

    Inc(Day, nDay);
    Result := EncodeDate(Year, Month, Day);
  end
  else begin
    Result := DateTime;
  end;
end;

function GetGoldShape(nGold: Integer): Word;

begin
  Result := 112;
  if nGold >= 30 then
    Result := 113;
  if nGold >= 70 then
    Result := 114;
  if nGold >= 300 then
    Result := 115;
  if nGold >= 1000 then
    Result := 116;
end;

function GetRandomLook(nBaseLook, nRage: Integer): Integer;
begin
  Result := nBaseLook + Random(nRage);
end;

function CheckGuildName(sGuildName: string): Boolean;
var
  i: Integer;
begin
  Result := True;
  if Length(sGuildName) > g_Config.nGuildNameLen then begin
    Result := False;
    Exit;
  end;
  for i := 1 to Length(sGuildName) do begin
    if (sGuildName[i] < '0') or
      (sGuildName[i] = '/') or
      (sGuildName[i] = '\') or
      (sGuildName[i] = ':') or
      (sGuildName[i] = '*') or
      (sGuildName[i] = ' ') or
      (sGuildName[i] = '"') or
      (sGuildName[i] = '''') or
      (sGuildName[i] = '<') or
      (sGuildName[i] = '|') or
      (sGuildName[i] = '?') or
      (sGuildName[i] = '>') then begin
      Result := False;
    end;
  end;
end;
//取物品制造ID
function GetItemNumber(): Integer;
begin
  Inc(g_Config.nItemNumber);
  if g_Config.nItemNumber > MAXGMMAKEITEMNUM then begin
    g_Config.nItemNumber := 1;
  end;
  Result := g_Config.nItemNumber;
end;

function GetItemNumberEx(): Integer;
begin
  Inc(g_Config.nItemNumberEx);
  if g_Config.nItemNumberEx < MAXGMMAKEITEMNUM then
    g_Config.nItemNumberEx := MAXGMMAKEITEMNUM;

  if g_Config.nItemNumberEx > (High(Integer) - 1) then begin
    g_Config.nItemNumberEx := MAXGMMAKEITEMNUM;
  end;
  Result := g_Config.nItemNumberEx;
end;
//过滤客户端显示的名字,去除数字及-符号
function FilterShowName(sName: string): string;
var
  i: Integer;
  SC: string;
  bo11: Boolean;
begin
  Result := '';
  SC := '';
  bo11 := False;
  for i := 1 to Length(sName) do begin
    if ((sName[i] >= '0') and (sName[i] <= '9')) or (sName[i] = '-') then begin
      Result := Copy(sName, 1, i - 1);
      SC := Copy(sName, i, Length(sName));
      bo11 := True;
      break;
    end;
  end;
  if not bo11 then
    Result := sName;
end;

function sub_4B2F80(nDir, nRage: Integer): Byte;
begin
  Result := (nDir + nRage) mod 8;
end;

  {
  变量类型：全局变量、人物变量
  变量数值类型：字符型、整型
  变量持久化方式：不保存、保存到文件、保存到数据库
  人物临时变量、切换 NPC 清空 P 0 - 999
  全局整型变量、保存到文件 G 1000 - 1999
  全局整型变量、不保存 I 3000 - 3999
  人物整型变量、保存到数据库 C 5000 - 5099
  人物整型变量、不保存 N 7000 - 7999
  人物临时变量、切换地图清空 M 9000 - 9999
  摇骰子变量 D 10000 - 10009
  全局字符型变量、保存到文件 A 2000 - 2999
  全局字符型变量、不保存 U 4000 - 4999
  人物字符串变量、保存到数据库 B 6000 - 6099
  人物字符串变量、不保存 S 8000 - 8999
  T 11000 - 11009
  }
function GetValNameNo(sText: string): Integer;
var
  nValNo: Integer;
begin
  Result := -1;
  if Length(sText) >= 2 then begin
    // 人物临时变量，切换 NPC 清空
    if UpCase(sText[1]) = 'P' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo;
      end
      else if Length(sText) = 3 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
        if nValNo < 100 then
          Result := nValNo;
      end
      else begin
        nValNo := StrToIntDef(sText[2], 1000);
        if nValNo < 10 then
          Result := nValNo;
      end;
    end
    else if UpCase(sText[1]) = 'G' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo + 1000;
      end
      else if Length(sText) = 3 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
        if nValNo < 100 then
          Result := nValNo + 1000;
      end
      else begin
        nValNo := StrToIntDef(sText[2], 1000);
        if nValNo < 10 then
          Result := nValNo + 1000;
      end;
    end
    else if UpCase(sText[1]) = 'A' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo + 2000;
      end
      else
        if Length(sText) = 3 then begin
          nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
          if nValNo < 100 then
            Result := nValNo + 2000;
        end
        else begin
          nValNo := StrToIntDef(sText[2], 1000);
          if nValNo < 10 then
            Result := nValNo + 2000;
        end;
    end
    else if UpCase(sText[1]) = 'I' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo + 3000;
      end
      else if Length(sText) = 3 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
        if nValNo < 100 then
          Result := nValNo + 3000;
      end
      else begin
        nValNo := StrToIntDef(sText[2], 1000);
        if nValNo < 10 then
          Result := nValNo + 3000;
      end;
    end
    else if UpCase(sText[1]) = 'U' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo + 4000;
      end
      else if Length(sText) = 3 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
        if nValNo < 100 then
          Result := nValNo + 4000;
      end
      else begin
        nValNo := StrToIntDef(sText[2], 1000);
        if nValNo < 10 then
          Result := nValNo + 4000;
      end;
    end
    else if UpCase(sText[1]) = 'C' then begin
      if Length(sText) = 3 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
        if nValNo < 100 then
          Result := nValNo + 5000;
      end
      else begin
        nValNo := StrToIntDef(sText[2], 1000);
        if nValNo < 10 then
          Result := nValNo + 5000;
      end;
    end
    else if UpCase(sText[1]) = 'B' then begin
      if Length(sText) = 3 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
        if nValNo < 100 then
          Result := nValNo + 6000;
      end
      else begin
        nValNo := StrToIntDef(sText[2], 1000);
        if nValNo < 10 then
          Result := nValNo + 6000;
      end;
    end
    else if UpCase(sText[1]) = 'N' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo + 7000;
      end
      else
        if Length(sText) = 3 then begin
          nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
          if nValNo < 100 then
            Result := nValNo + 7000;
        end
        else begin
          nValNo := StrToIntDef(sText[2], 1000);
          if nValNo < 10 then
            Result := nValNo + 7000;
        end;
    end
    else if UpCase(sText[1]) = 'S' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo + 8000;
      end
      else
        if Length(sText) = 3 then begin
          nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
          if nValNo < 100 then
            Result := nValNo + 8000;
        end
        else begin
          nValNo := StrToIntDef(sText[2], 1000);
          if nValNo < 10 then
            Result := nValNo + 8000;
        end;
    end
    else if UpCase(sText[1]) = 'M' then begin
      if Length(sText) = 4 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 3), 1000);
        if nValNo < 1000 then
          Result := nValNo + 9000;
      end
      else if Length(sText) = 3 then begin
        nValNo := StrToIntDef(Copy(sText, 2, 2), 1000);
        if nValNo < 100 then
          Result := nValNo + 9000;
      end
      else begin
        nValNo := StrToIntDef(sText[2], 1000);
        if nValNo < 10 then
          Result := nValNo + 9000;
      end;
    end
    else if UpCase(sText[1]) = 'D' then begin
      nValNo := StrToIntDef(sText[2], 1000);
      if nValNo < 10 then
        Result := nValNo + 10000;
    end
    else if UpCase(sText[1]) = 'T' then
    begin
      nValNo := StrToIntDef(sText[2], 1000);
      if nValNo < 10 then
        Result := nValNo + 11000;
    end
  end;
end;

function GetMakeItemInfo(wIdent: Word): pTMakeItem;
var
  i: Integer;
begin
  Result := nil;
  for i := 0 to g_MakeItemList.Count - 1 do begin
    if pTMakeItem(g_MakeItemList[i]).ItemArr[0].wIdent = wIdent then begin
      Result := pTMakeItem(g_MakeItemList[i]);
      break;
    end;
  end;
end;

procedure AddGameLog(BaseObject: TBaseObject; nLogID: Integer; ItemName: string; ItemIndex, ItemCount: Integer;
  sDealName, sTest1, sTest2, sTest3: string; Item: pTUserItem);
var
  UserItem: pTUserItem;
begin
  if sDealName = '' then
    sDealName := ' ';
  if sTest1 = '' then
    sTest1 := ' ';
  if sTest2 = '' then
    sTest2 := ' ';
  if sTest3 = '' then
    sTest3 := ' ';
  try
    EnterCriticalSection(LogMsgCriticalSection);
    try
      if BaseObject = nil then begin
        LogStringList.Add(IntToStr(nLogID) + #9 +
          '0' + #9 +
          '0' + #9 +
          '0' + #9 +
          '0' + #9 +
          ItemName + #9 +
          IntToStr(ItemIndex) + #9 +
          IntToStr(ItemCount) + #9 +
          sDealName + #9 +
          sTest1 + #9 +
          sTest2 + #9 +
          sTest3);
      end
      else begin
        if Item <> nil then begin
          New(UserItem);
          UserItem^ := Item^;
          LogStringList.AddObject(IntToStr(nLogID) + #9 +
            BaseObject.m_sMapName + #9 +
            IntToStr(BaseObject.m_nCurrX) + #9 +
            IntToStr(BaseObject.m_nCurrY) + #9 +
            BaseObject.m_sCharName + #9 +
            ItemName + #9 +
            IntToStr(ItemIndex) + #9 +
            IntToStr(ItemCount) + #9 +
            sDealName + #9 +
            sTest1 + #9 +
            sTest2 + #9 +
            sTest3, TObject(UserItem));
        end
        else begin
          LogStringList.Add(IntToStr(nLogID) + #9 +
            BaseObject.m_sMapName + #9 +
            IntToStr(BaseObject.m_nCurrX) + #9 +
            IntToStr(BaseObject.m_nCurrY) + #9 +
            BaseObject.m_sCharName + #9 +
            ItemName + #9 +
            IntToStr(ItemIndex) + #9 +
            IntToStr(ItemCount) + #9 +
            sDealName + #9 +
            sTest1 + #9 +
            sTest2 + #9 +
            sTest3);
        end;
      end;
    finally
      LeaveCriticalSection(LogMsgCriticalSection);
    end;
  except

  end;
end;

{procedure AddGameDataLog(PlayObject: TPlayObject; sMsg: string);
begin
  try

    EnterCriticalSection(LogMsgCriticalSection);
    try
      LogStringList.Add(sMsg);
    finally
      LeaveCriticalSection(LogMsgCriticalSection);
    end;
  except

  end;
end;  }

function IntegerChange(var pInt: Integer; nCount: Integer; btChange: Byte): Boolean;
var
  OldInt, nInt: Integer;
begin
  Result := False;
  if nCount < 0 then
    exit;
  if nCount > MAXINTCOUNT then
    nCount := MAXINTCOUNT;
  nInt := pInt;
  OldInt := nInt;
  case btChange of
    INT_ADD: begin
        if (nInt + nCount) > MAXINTCOUNT then
          nInt := MAXINTCOUNT
        else
          Inc(nInt, nCount);
      end;
    INT_DEL: begin
        if (nInt - nCount < 0) then
          nInt := 0
        else
          Dec(nInt, nCount);
      end;
    INT_SET: begin

        if nCount > MAXINTCOUNT then
          nInt := MAXINTCOUNT
        else
          nInt := nCount;
      end;
  end;
  if nInt <> OldInt then begin
    pInt := nInt;
    Result := True;
  end;
end;

function WordChange(var pInt: Word; nCount: Integer; btChange: Byte): Boolean;
var
  OldInt, nInt: Word;
begin
  Result := False;
  if nCount < 0 then
    exit;
  if nCount > MAXWORDCOUNT then
    nCount := MAXWORDCOUNT;
  nInt := pInt;
  OldInt := nInt;
  case btChange of
    INT_ADD: begin
        if (nInt + nCount) > MAXWORDCOUNT then
          nInt := MAXWORDCOUNT
        else
          Inc(nInt, nCount);
      end;
    INT_DEL: begin
        if (nInt - nCount < 0) then
          nInt := 0
        else
          Dec(nInt, nCount);
      end;
    INT_SET: begin
        if nCount > MAXWORDCOUNT then
          nInt := MAXWORDCOUNT
        else
          nInt := nCount;
      end;
  end;
  if nInt <> OldInt then begin
    pInt := nInt;
    Result := True;
  end;
end;

function ByteChange(var pInt: Byte; nCount: Integer; btChange: Byte): Boolean;
var
  OldInt, nInt: Byte;
begin
  Result := False;
  if nCount < 0 then
    exit;
  if nCount > MAXBYTECOUNT then
    nCount := MAXBYTECOUNT;
  nInt := pInt;
  OldInt := nInt;
  case btChange of
    INT_ADD: begin
        if (nInt + nCount) > MAXBYTECOUNT then
          nInt := MAXBYTECOUNT
        else
          Inc(nInt, nCount);
      end;
    INT_DEL: begin
        if (nInt - nCount < 0) then
          nInt := 0
        else
          Dec(nInt, nCount);
      end;
    INT_SET: begin
        if nCount > MAXBYTECOUNT then
          nInt := MAXBYTECOUNT
        else
          nInt := nCount;
      end;
  end;
  if nInt <> OldInt then begin
    pInt := nInt;
    Result := True;
  end;
end;

procedure AddLogonCostLog(sMsg: string);
begin
  EnterCriticalSection(LogMsgCriticalSection);
  try
    LogonCostLogList.Add(sMsg);
  finally
    LeaveCriticalSection(LogMsgCriticalSection);
  end;
end;

procedure TrimStringList(sList: TStringList);
var
  n8: Integer;
  SC: string;
begin
  n8 := 0;
  while (True) do begin
    if (sList.Count) <= n8 then
      break;
    SC := Trim(sList.Strings[n8]);
    if SC = '' then begin
      sList.Delete(n8);
      Continue;
    end;
    Inc(n8);
  end;
end;

function GetStartPointInfo(nIndex: Integer; var nX, nY: Integer): string;
var
  StartPoint: pTStartPoint;
begin
  Result := '';
  nX := 0;
  nY := 0;
  if (nIndex >= 0) and (nIndex < g_StartPointList.Count) then begin
    StartPoint := pTStartPoint(g_StartPointList.Objects[nIndex]);
    if StartPoint <> nil then begin
      nX := StartPoint.m_nCurrX;
      nY := StartPoint.m_nCurrY;
      Result := StartPoint.m_sMapName;
    end;
  end;
end;

function SaveAdminList(): Boolean;
var
  i: Integer;
  sFileName: string;
  SaveList: TStringList;
  sPermission: string;
  nPermission: Integer;
  AdminInfo: pTAdminInfo;
begin
  sFileName := g_Config.sGameDataDir + 'AdminList.txt';
  SaveList := TStringList.Create;
  UserEngine.m_AdminList.Lock;
  try
    for i := 0 to UserEngine.m_AdminList.Count - 1 do begin
      AdminInfo := pTAdminInfo(UserEngine.m_AdminList.Items[i]);
      nPermission := AdminInfo.nLv;
      if nPermission = 10 then
        sPermission := '*';
      if nPermission = 9 then
        sPermission := '1';
      if nPermission = 8 then
        sPermission := '2';
      if nPermission = 7 then
        sPermission := '3';
      if nPermission = 6 then
        sPermission := '4';
      if nPermission = 5 then
        sPermission := '5';
      if nPermission = 4 then
        sPermission := '6';
      if nPermission = 3 then
        sPermission := '7';
      if nPermission = 2 then
        sPermission := '8';
      if nPermission = 1 then
        sPermission := '9';
      SaveList.Add(sPermission + #9 + AdminInfo.sChrName);
    end;
    SaveList.SaveToFile(sFileName);
  finally
    UserEngine.m_AdminList.UnLock;
  end;
  Result := True;
end;

function LoadUnMarryList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'UnMarry.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_UnMarryList.Lock;
    try
      g_UnMarryList.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        if Trim(LoadList[i]) <> '' then
          g_UnMarryList.Add(Trim(LoadList[i]));
      end;
    finally
      g_UnMarryList.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveUnMarryList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sGameDataDir + 'UnMarry.txt';
  g_UnMarryList.Lock;
  try
    g_UnMarryList.SaveToFile(sFileName);
  finally
    g_UnMarryList.UnLock;
  end;
  Result := True;
end;

function LoadUnMasterList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName, sName1, sName2: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'UnMaster.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_UnMasterList.Lock;
    try
      g_UnMasterList.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        if Trim(LoadList[i]) <> '' then begin
          sName2 := GetValidStr3(Trim(LoadList[i]), sName1, [' ', #9]);
          if (sName1 <> '') and (sName2 <> '') then
            g_UnMasterList.AddObject(sName1, TObject(StrNew(PChar(sName2))));
        end;
      end;
    finally
      g_UnMasterList.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveUnMasterList(): Boolean;
var
  sFileName: string;
  SaveList: TStringList;
  I: Integer;
begin
  sFileName := g_Config.sGameDataDir + 'UnMaster.txt';
  g_UnMasterList.Lock;
  SaveList := TStringList.Create;
  try
    for I := 0 to g_UnMasterList.Count - 1 do begin
      SaveList.Add(g_UnMasterList[I] + #9 + PChar(g_UnMasterList.Objects[I]));
    end;
    SaveList.SaveToFile(sFileName);
  finally
    SaveList.Free;
    g_UnMasterList.UnLock;
  end;
  Result := True;
end;

function LoadUnForceMasterList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName, sName1, sName2: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'UnForceMaster.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_UnForceMasterList.Lock;
    try
      g_UnForceMasterList.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        if Trim(LoadList[i]) <> '' then begin
          sName2 := GetValidStr3(Trim(LoadList[i]), sName1, [' ', #9]);
          if (sName1 <> '') and (sName2 <> '') then
            g_UnForceMasterList.AddObject(sName1, TObject(StrNew(PChar(sName2))));
        end;
      end;
    finally
      g_UnForceMasterList.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveUnForceMasterList(): Boolean;
var
  sFileName: string;
  SaveList: TStringList;
  I: Integer;
begin
  sFileName := g_Config.sGameDataDir + 'UnForceMaster.txt';
  g_UnForceMasterList.Lock;
  SaveList := TStringList.Create;
  try
    for I := 0 to g_UnForceMasterList.Count - 1 do begin
      SaveList.Add(g_UnForceMasterList[I] + #9 + PChar(g_UnForceMasterList.Objects[I]));
    end;
    SaveList.SaveToFile(sFileName);
  finally
    SaveList.Free;
    g_UnForceMasterList.UnLock;
  end;
  Result := True;
end;

function LoadUnFriendList(): Boolean;
var
  sFileName, sName1, sName2: string;
  sStr: string;
  I: Integer;
  NameBuff: PChar;
begin
  Result := True;
  sFileName := g_Config.sGameDataDir + 'UnFriend.txt';
  if FileExists(sFileName) then begin
    g_UnFriendList.LoadFromFile(sFileName);
    for I := g_UnFriendList.Count - 1 downto 0 do begin
      sStr := Trim(g_UnFriendList[i]);
      sName2 := Trim(GetValidStr3(sStr, sName1, [' ', ',', #9]));
      if (sName1 <> '') and (sName2 <> '') then begin
        g_UnFriendList[I] := sName1;
        GetMem(NameBuff, Length(sName2) + 1);
        Move(sName2[1], NameBuff^, Length(sName2) + 1);
        g_UnFriendList.Objects[I] := TObject(NameBuff);
      end
      else
        g_UnFriendList.Delete(I);
    end;
  end;
end;

function SaveUnFriendList(): Boolean;
var
  sFileName: string;
  I: Integer;
  SaveList: TStringList;
begin
  Result := True;
  sFileName := g_Config.sGameDataDir + 'UnFriend.txt';
  SaveList := TStringList.Create;
  try
    for I := 0 to g_UnFriendList.Count - 1 do begin
      SaveList.Add(g_UnFriendList[I] + #9 + Strpas(PChar(g_UnFriendList.Objects[I])));
    end;
    SaveList.SaveToFile(sFileName);
  finally
    SaveList.Free;
  end;
end;

function LoadRuleItemList(): Boolean;
var
  sFileName, sTemp, sTop: string;
  TempList: TStringList;
  I, II: Integer;
  RuleItems: pTItemRule;
begin
  Result := True;
  try
    sFileName := g_Config.sGameDataDir + 'RuleItemList.txt';
    TempList := TStringList.Create;
    try
      if FileExists(sFileName) then begin
        TempList.LoadFromFile(sFileName);
        for I := 0 to TempList.Count - 1 do begin
          sTop := TempList.Strings[I];
          if (Length(sTop) > 0) and (sTop[1] <> ';') then begin
            sTop := GetValidStr3(sTop, sTemp, [' ', ',', #9]);
            if (sTemp <> '') then begin
              RuleItems := UserEngine.GetStdItemRule(sTemp);
              if RuleItems <> nil then begin
                for II := Low(RuleItems.Rule) to High(RuleItems.Rule) do begin
                  sTop := GetValidStr3(sTop, sTemp, [' ', ',', #9]);
                  RuleItems.Rule[II] := (StrToIntDef(sTemp, 0) = 1);
                end;
              end;
            end;
          end;
        end;
      end;
    finally
      TempList.Free;
    end;
  except
    MainOutMessage('[Exception] UnM2Share.LoadRuleItemList');
  end;
end;

function SaveRuleItemList(): Boolean;
var
  StdItem: pTStdItem;
  ItemRule: pTItemRule;
  i, II: Integer;
  sFileName, sText: string;
  TempList: TStringList;
begin
  Result := True;
  EnterCriticalSection(ProcessHumanCriticalSection);
  sFileName := g_Config.sGameDataDir + 'RuleItemList.txt';
  TempList := TStringList.Create;
  try
    for i := 0 to UserEngine.StdItemList.Count - 1 do begin
      StdItem := UserEngine.StdItemList.Items[i];
      ItemRule := pTItemRule(StdItem.Rule);
      if ItemRule.nCheck > 0 then begin
        sText := StdItem.Name + #9;
        for II := Low(ItemRule.Rule) to High(ItemRule.Rule) do begin
          sText := sText + IntToStr(Integer(ItemRule.Rule[II])) + #9;
        end;
        TempList.Add(sText);
      end;
    end;
    TempList.SaveToFile(sFileName);
  finally
    TempList.Free;
    LeaveCriticalSection(ProcessHumanCriticalSection);
  end;
end;

function LoadMonDropLimitList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sLineText: string;
  sFileName: string;
  sItemName, sItemCount, sItemMaxCount, sItemTime: string;
  nItemCount, nItemMaxCount: Integer;
  dwTime: LongWord;
  MonDropLimit: pTMonDropLimitInfo;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'MonDropLimitList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    LoadList.LoadFromFile(sFileName);
    for I := 0 to LoadList.Count - 1 do begin
      sLineText := Trim(LoadList.Strings[I]);
      if (sLineText = '') or (sLineText[1] = ';') then
        Continue;
      sLineText := GetValidStr3(sLineText, sItemName, [' ', '/', ',', #9]);
      sLineText := GetValidStr3(sLineText, sItemCount, [' ', '/', ',', #9]);
      sLineText := GetValidStr3(sLineText, sItemMaxCount, [' ', '/', ',', #9]);
      sLineText := GetValidStr3(sLineText, sItemTime, [' ', '/', ',', #9]);
      nItemCount := StrToIntDef(sItemCount, -1);
      nItemMaxCount := StrToIntDef(sItemMaxCount, -1);
      dwTime := StrToIntDef(sItemTime, 0);
      if (sItemName <> '') and (nItemCount >= 0) and (nItemMaxCount >= 0) then begin
        New(MonDropLimit);
        MonDropLimit.sItemName := sItemName;
        MonDropLimit.nMaxCount := nItemMaxCount;
        MonDropLimit.nMinCount := nItemCount;
        MonDropLimit.dwTime := dwTime;
        g_MonDropLimitList.Add(MonDropLimit);
      end;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveMonDropLimitList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText: string;
  MonDropLimit: pTMonDropLimitInfo;
begin
  sFileName := g_Config.sGameDataDir + 'MonDropLimitList.txt';
  LoadList := TStringList.Create;
  for I := 0 to g_MonDropLimitList.Count - 1 do begin
    MonDropLimit := pTMonDropLimitInfo(g_MonDropLimitList[I]);
    sLineText := MonDropLimit.sItemName + #9 + IntToStr(MonDropLimit.nMinCount) + #9 + IntToStr(MonDropLimit.nMaxCount) + #9 + IntToStr(MonDropLimit.dwTime);
    LoadList.Add(sLineText);
  end;
  LoadList.SaveToFile(sFileName);
  LoadList.Free;
  Result := True;
end;

function GetMonDropLimitByName(sName: string): pTMonDropLimitInfo;
var
  I: integer;
  MonDropLimit: pTMonDropLimitInfo;
begin
  Result := nil;
  for I := 0 to g_MonDropLimitList.Count - 1 do begin
    MonDropLimit := pTMonDropLimitInfo(g_MonDropLimitList[I]);
    if CompareText(sName, MonDropLimit.sItemName) = 0 then begin
      Result := MonDropLimit;
      Break;
    end;
  end;
end;
{
function GetRuleItem(sItemName: string): pTItemRule;
begin
 New(Result);
 SafeFillChar(Result^, SizeOf(TItemRule), #0);
end;  }

procedure LoadBindItemTypeFromUnbindList();
  function AddBindItemType(sItemName: string; nShape: Integer): Boolean;
  var
    BindItem: pTBindItem;
    i: Integer;
    StdItem: pTStdItem;
  begin
    Result := False;
    for i := 0 to UserEngine.StdItemList.Count - 1 do begin
      StdItem := UserEngine.StdItemList.Items[i];
      if CompareText(StdItem.Name, sItemName) = 0 then begin
        if StdItem.StdMode = tm_Drug then begin
          if (StdItem.Shape = 0) and (StdItem.nAC > 0) and (StdItem.nMAC = 0) then begin
            New(BindItem);
            BindItem.sUnbindItemName := StdItem.Name;
            BindItem.nStdMode := 31;
            BindItem.nShape := nShape;
            BindItem.btItemType := 0;
            g_BindItemTypeList.Add(BindItem);
            Result := True;
            break;
          end
          else if (StdItem.Shape = 0) and (StdItem.nAC = 0) and (StdItem.nMAC > 0) then begin
            New(BindItem);
            BindItem.sUnbindItemName := StdItem.Name;
            BindItem.nStdMode := 31;
            BindItem.nShape := nShape;
            BindItem.btItemType := 1;
            g_BindItemTypeList.Add(BindItem);
            Result := True;
            break;
          end
          else if (StdItem.Shape = 1) and (StdItem.nAC > 0) and (StdItem.nMAC > 0) then begin
            New(BindItem);
            BindItem.sUnbindItemName := StdItem.Name;
            BindItem.nStdMode := 31;
            BindItem.nShape := nShape;
            BindItem.btItemType := 2;
            g_BindItemTypeList.Add(BindItem);
            Result := True;
            break;
          end;
        end;
      end;
    end;
  end;
var
  i: Integer;
  sItemName: string;
  nShape: Integer;
begin
  if UserEngine <> nil then begin
    g_BindItemTypeList := TGList.Create;
    for i := 0 to g_UnbindList.Count - 1 do begin
      sItemName := g_UnbindList.Strings[i];
      nShape := Integer(g_UnbindList.Objects[i]);
      AddBindItemType(sItemName, nShape);
    end;
  end;
end;

function GetBindItemType(nShape: Integer): Integer;
var
  BindItem: pTBindItem;
  i: Integer;
begin
  Result := -1;
  if g_BindItemTypeList <> nil then begin
    for i := 0 to g_BindItemTypeList.Count - 1 do begin
      BindItem := g_BindItemTypeList.Items[i];
      if BindItem.nShape = nShape then begin
        Result := BindItem.btItemType;
        break;
      end;
    end;
  end;
end;

function GetUseItemIdx(sName: string): Integer;
begin
  Result := -1;
  if CompareText(sName, U_DRESSNAME) = 0 then begin
    Result := 0;
  end
  else if CompareText(sName, U_WEAPONNAME) = 0 then begin
    Result := 1;
  end
  else if CompareText(sName, U_RIGHTHANDNAME) = 0 then begin
    Result := 2;
  end
  else if CompareText(sName, U_NECKLACENAME) = 0 then begin
    Result := 3;
  end
  else if CompareText(sName, U_HELMETNAME) = 0 then begin
    Result := 4;
  end
  else if CompareText(sName, U_ARMRINGLNAME) = 0 then begin
    Result := 5;
  end
  else if CompareText(sName, U_ARMRINGRNAME) = 0 then begin
    Result := 6;
  end
  else if CompareText(sName, U_RINGLNAME) = 0 then begin
    Result := 7;
  end
  else if CompareText(sName, U_RINGRNAME) = 0 then begin
    Result := 8;
  end
  else if CompareText(sName, U_BUJUKNAME) = 0 then begin
    Result := 9;
  end
  else if CompareText(sName, U_BELTNAME) = 0 then begin
    Result := 10;
  end
  else if CompareText(sName, U_BOOTSNAME) = 0 then begin
    Result := 11;
  end
  else if CompareText(sName, U_CHARMNAME) = 0 then begin
    Result := 12;
  end;
end;

function GetUseItemName(nIndex: Integer): string;
begin
  case nIndex of
    0: Result := U_DRESSNAME;
    1: Result := U_WEAPONNAME;
    2: Result := U_RIGHTHANDNAME;
    3: Result := U_NECKLACENAME;
    4: Result := U_HELMETNAME;
    5: Result := U_ARMRINGLNAME;
    6: Result := U_ARMRINGRNAME;
    7: Result := U_RINGLNAME;
    8: Result := U_RINGRNAME;
    9: Result := U_BUJUKNAME;
    10: Result := U_BELTNAME;
    11: Result := U_BOOTSNAME;
    12: Result := U_CHARMNAME;
  end;
end;

function LoadDisableSendMsgList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'DisableSendMsgList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_DisableSendMsgList.Clear;
    LoadList.LoadFromFile(sFileName);
    for i := 0 to LoadList.Count - 1 do begin
      g_DisableSendMsgList.Add(Trim(LoadList.Strings[i]));
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveDisableSendMsgList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  sFileName := g_Config.sGameDataDir + 'DisableSendMsgList.txt';
  LoadList := TStringList.Create;
  for i := 0 to g_DisableSendMsgList.Count - 1 do begin
    LoadList.Add(g_DisableSendMsgList.Strings[i]);
  end;
  LoadList.SaveToFile(sFileName);
  LoadList.Free;
  Result := True;
end;

function GetDisableSendMsgList(sHumanName: string): Boolean;
var
  i: Integer;
begin
  Result := False;
  for i := 0 to g_DisableSendMsgList.Count - 1 do begin
    if CompareText(sHumanName, g_DisableSendMsgList.Strings[i]) = 0 then begin
      Result := True;
      break;
    end;
  end;
end;

function LoadGameLogItemNameList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'GameLogItemNameList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_GameLogItemNameList.Lock;
    try
      g_GameLogItemNameList.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        g_GameLogItemNameList.Add(Trim(LoadList.Strings[i]));
      end;
    finally
      g_GameLogItemNameList.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetGameLogItemNameList(sItemName: string): Byte;
var
  i: Integer;
begin
  Result := 0;
  g_GameLogItemNameList.Lock;
  try
    for i := 0 to g_GameLogItemNameList.Count - 1 do begin
      if CompareText(sItemName, g_GameLogItemNameList.Strings[i]) = 0 then begin
        Result := 1;
        break;
      end;
    end;
  finally
    g_GameLogItemNameList.UnLock;
  end;
end;

function SaveGameLogItemNameList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sGameDataDir + 'GameLogItemNameList.txt';
  g_GameLogItemNameList.Lock;
  try
    g_GameLogItemNameList.SaveToFile(sFileName);
  finally
    g_GameLogItemNameList.UnLock;
  end;
  Result := True;
end;

function LoadDenyIPAddrList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'DenyIPAddrList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_DenyIPAddrList.Lock;
    try
      g_DenyIPAddrList.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        g_DenyIPAddrList.Add(Trim(LoadList.Strings[i]));
      end;
    finally
      g_DenyIPAddrList.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetDenyIPaddrList(sIPaddr: string): Boolean;
var
  i: Integer;
begin
  Result := False;
  g_DenyIPAddrList.Lock;
  try
    for i := 0 to g_DenyIPAddrList.Count - 1 do begin
      if CompareText(sIPaddr, g_DenyIPAddrList.Strings[i]) = 0 then begin
        Result := True;
        break;
      end;
    end;
  finally
    g_DenyIPAddrList.UnLock;
  end;
end;

function SaveDenyIPAddrList(): Boolean;
var
  i: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sGameDataDir + 'DenyIPAddrList.txt';
  SaveList := TStringList.Create;
  g_DenyIPAddrList.Lock;
  try
    for i := 0 to g_DenyIPAddrList.Count - 1 do begin
      if Integer(g_DenyIPAddrList.Objects[i]) <> 0 then begin
        SaveList.Add(g_DenyIPAddrList.Strings[i]);
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyIPAddrList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;
//读取禁止登录人物列表
function LoadDenyChrNameList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'DenyChrNameList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_DenyChrNameList.Lock;
    try
      g_DenyChrNameList.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        g_DenyChrNameList.Add(Trim(LoadList.Strings[i]));
      end;
    finally
      g_DenyChrNameList.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetDenyChrNameList(sChrName: string): Boolean;
var
  i: Integer;
begin
  Result := False;
  g_DenyChrNameList.Lock;
  try
    for i := 0 to g_DenyChrNameList.Count - 1 do begin
      if CompareText(sChrName, g_DenyChrNameList.Strings[i]) = 0 then begin
        Result := True;
        break;
      end;
    end;
  finally
    g_DenyChrNameList.UnLock;
  end;
end;
//保存禁止登录人物列表
function SaveDenyChrNameList(): Boolean;
var
  i: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sGameDataDir + 'DenyChrNameList.txt';
  SaveList := TStringList.Create;
  g_DenyChrNameList.Lock;
  try
    for i := 0 to g_DenyChrNameList.Count - 1 do begin
      if Integer(g_DenyChrNameList.Objects[i]) <> 0 then begin
        SaveList.Add(g_DenyChrNameList.Strings[i]);
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyChrNameList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;

function LoadFilterSayList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName, sStr: string;
  OutBuffer: PChar;
  OutLen: Integer;
begin
  Result := False;
  sFileName := '聊天过滤.txt';
  g_FilterData := '';
  g_FilterDataLen := 0;
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_FilterSay.Lock;
    try
      g_FilterSay.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        sStr := Trim(LoadList.Strings[i]);
        if (sStr <> '') and (sStr[1] <> ';') then
          g_FilterSay.Add(Trim(LoadList.Strings[i]));
      end;
    finally
      g_FilterSay.UnLock;
    end;
    sStr := g_FilterSay.Text;
    if sStr <> '' then begin
      OutLen := ZIPCompress(PChar(@sStr[1]), Length(sStr) + 1, 9, OutBuffer);
      if OutLen > 0 then begin
        g_FilterDataLen := OutLen;
        sStr := GetMD5TextByBuffer(OutBuffer, OutLen);
        if g_FilterMD5 <> sStr then begin
          g_FilterMD5 := sStr;
          Result := True;
        end;
        g_FilterData := EncodeLongBuffer(OutBuffer, OutLen);
        FreeMem(OutBuffer);
      end;
    end;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function LoadFilterGuildList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName, sStr: string;
begin
  Result := False;
  sFileName := '行会过滤.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_FilterGuild.Lock;
    try
      g_FilterGuild.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        sStr := Trim(LoadList.Strings[i]);
        if (sStr <> '') and (sStr[1] <> ';') then
          g_FilterGuild.Add(Trim(LoadList.Strings[i]));
      end;
    finally
      g_FilterGuild.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function LoadFilterShopList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName, sStr: string;
begin
  Result := False;
  sFileName := '摆摊过滤.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_FilterShop.Lock;
    try
      g_FilterShop.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        sStr := Trim(LoadList.Strings[i]);
        if (sStr <> '') and (sStr[1] <> ';') then
          g_FilterShop.Add(Trim(LoadList.Strings[i]));
      end;
    finally
      g_FilterShop.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function CheckFilterGuild(sName: string): Boolean;
var
  i: integer;
begin
  Result := False;
  g_FilterGuild.Lock;
  Try
    for I := 0 to g_FilterGuild.Count - 1 do begin
      if AnsiContainsText(sName, g_FilterGuild[I]) then begin
        Result := True;
        break;
      end;
    end;
  Finally
    g_FilterGuild.UnLock;
  End;
end;

function CheckFilterShop(sName: string): Boolean;
var
  i: integer;
begin
  Result := False;
  g_FilterShop.Lock;
  Try
    for I := 0 to g_FilterShop.Count - 1 do begin
      if AnsiContainsText(sName, g_FilterShop[I]) then begin
        Result := True;
        break;
      end;
    end;
  Finally
    g_FilterShop.UnLock;
  End;
end;


function LoadDenyAccountList(): Boolean;
var
  i: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sGameDataDir + 'DenyAccountList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_DenyAccountList.Lock;
    try
      g_DenyAccountList.Clear;
      LoadList.LoadFromFile(sFileName);
      for i := 0 to LoadList.Count - 1 do begin
        g_DenyAccountList.Add(Trim(LoadList.Strings[i]));
      end;
    finally
      g_DenyAccountList.UnLock;
    end;
    Result := True;
  end
  else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetDenyAccountList(sAccount: string): Boolean;
var
  i: Integer;
begin
  Result := False;
  g_DenyAccountList.Lock;
  try
    for i := 0 to g_DenyAccountList.Count - 1 do begin
      if CompareText(sAccount, g_DenyAccountList.Strings[i]) = 0 then begin
        Result := True;
        break;
      end;
    end;
  finally
    g_DenyAccountList.UnLock;
  end;
end;

function SaveDenyAccountList(): Boolean;
var
  i: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sGameDataDir + 'DenyAccountList.txt';
  SaveList := TStringList.Create;
  g_DenyAccountList.Lock;
  try
    for i := 0 to g_DenyAccountList.Count - 1 do begin
      if Integer(g_DenyAccountList.Objects[i]) <> 0 then begin
        SaveList.Add(g_DenyAccountList.Strings[i]);
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyAccountList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;

function CheckBeeline(nX, nY, sX, sY: Integer): Boolean;
begin
  Result := False;
  if nX = sX then
    Result := True;
  if nY = sY then
    Result := True;
  if abs(nX - sX) = abs(nY - sY) then
    Result := True;
end;

procedure StartFixExp();
var
  i: Integer;
begin
  SafeFillChar(g_dwOldNeedExps, SizeOf(TLevelNeedExp), 0);
  g_dwOldNeedExps[1] := 100;
  g_dwOldNeedExps[2] := 200;
  g_dwOldNeedExps[3] := 300;
  g_dwOldNeedExps[4] := 400;
  g_dwOldNeedExps[5] := 600;
  g_dwOldNeedExps[6] := 900;
  g_dwOldNeedExps[7] := 1200;
  g_dwOldNeedExps[8] := 1700;
  g_dwOldNeedExps[9] := 2500;
  g_dwOldNeedExps[10] := 6000;
  g_dwOldNeedExps[11] := 8000;
  g_dwOldNeedExps[12] := 10000;
  g_dwOldNeedExps[13] := 15000;
  g_dwOldNeedExps[14] := 30000;
  g_dwOldNeedExps[15] := 40000;
  g_dwOldNeedExps[16] := 50000;
  g_dwOldNeedExps[17] := 70000;
  g_dwOldNeedExps[18] := 10000;
  g_dwOldNeedExps[19] := 120000;
  g_dwOldNeedExps[20] := 140000;
  g_dwOldNeedExps[21] := 250000;
  g_dwOldNeedExps[22] := 300000;
  g_dwOldNeedExps[23] := 350000;
  g_dwOldNeedExps[24] := 400000;
  g_dwOldNeedExps[25] := 500000;
  g_dwOldNeedExps[26] := 700000;
  g_dwOldNeedExps[27] := 1000000;
  g_dwOldNeedExps[28] := 1400000;
  g_dwOldNeedExps[29] := 1800000;
  g_dwOldNeedExps[30] := 2000000;
  g_dwOldNeedExps[31] := 2400000;
  g_dwOldNeedExps[32] := 2800000;
  g_dwOldNeedExps[33] := 3200000;
  g_dwOldNeedExps[34] := 3600000;
  g_dwOldNeedExps[35] := 4000000;
  g_dwOldNeedExps[36] := 4800000;
  g_dwOldNeedExps[37] := 5600000;
  g_dwOldNeedExps[38] := 8200000;
  g_dwOldNeedExps[39] := 9000000;
  g_dwOldNeedExps[40] := 12000000;
  g_dwOldNeedExps[41] := 16000000;
  g_dwOldNeedExps[42] := 30000000;
  g_dwOldNeedExps[43] := 50000000;
  g_dwOldNeedExps[44] := 80000000;
  g_dwOldNeedExps[45] := 120000000;
  g_dwOldNeedExps[46] := 480000000;
  g_dwOldNeedExps[47] := 1000000000;
  g_dwOldNeedExps[48] := 1500000000;
  g_dwOldNeedExps[49] := 1800000000;
  for i := 50 to High(g_dwOldNeedExps) do
    g_dwOldNeedExps[i] := 2000000000;
end;

procedure LoadExp();
var
  i: Integer;
  LoadInteger: Integer;
  LoadString: string;
begin
  LoadInteger := ExpConf.ReadInteger('Exp', 'KillMonExpMultiple', -1);
  if LoadInteger < 0 then begin
    ExpConf.WriteInteger('Exp', 'KillMonExpMultiple',
      g_Config.dwKillMonExpMultiple);
  end
  else begin
    g_Config.dwKillMonExpMultiple := ExpConf.ReadInteger('Exp',
      'KillMonExpMultiple', g_Config.dwKillMonExpMultiple);
  end;

  LoadInteger := ExpConf.ReadInteger('Exp', 'HighLevelKillMonFixExp', -1);
  if LoadInteger < 0 then begin
    ExpConf.WriteBool('Exp', 'HighLevelKillMonFixExp',
      g_Config.boHighLevelKillMonFixExp);
  end
  else begin
    g_Config.boHighLevelKillMonFixExp := ExpConf.ReadBool('Exp',
      'HighLevelKillMonFixExp', g_Config.boHighLevelKillMonFixExp);
  end;

  if ExpConf.ReadInteger('Exp', 'HighLevelGroupFixExp', -1) < 0 then
    ExpConf.WriteBool('Exp', 'HighLevelGroupFixExp',
      g_Config.boHighLevelGroupFixExp);
  g_Config.boHighLevelGroupFixExp := ExpConf.ReadBool('Exp',
    'HighLevelGroupFixExp', g_Config.boHighLevelGroupFixExp);

  LoadInteger := ExpConf.ReadInteger('Exp', 'LimitExpLevel', -1);
  if LoadInteger < 0 then
    ExpConf.WriteInteger('Exp', 'LimitExpLevel', g_Config.nLimitExpLevel)
  else
    g_Config.nLimitExpLevel := LoadInteger;

  LoadInteger := ExpConf.ReadInteger('Exp', 'LimitExpValue', -1);
  if LoadInteger < 0 then
    ExpConf.WriteInteger('Exp', 'LimitExpValue', g_Config.nLimitExpValue)
  else
    g_Config.nLimitExpValue := LoadInteger;

  if ExpConf.ReadInteger('Exp', 'UseFixExp', -1) < 0 then
    ExpConf.WriteBool('Exp', 'UseFixExp', g_Config.boUseFixExp);
  g_Config.boUseFixExp := ExpConf.ReadBool('Setup', 'UseFixExp',
    g_Config.boUseFixExp);

  LoadInteger := ExpConf.ReadInteger('Exp', 'BaseExp', -1);
  if LoadInteger < 0 then
    ExpConf.WriteInteger('Exp', 'BaseExp', g_Config.nBaseExp)
  else
    g_Config.nBaseExp := LoadInteger;

  LoadInteger := ExpConf.ReadInteger('Setup', 'AddExp', -1);
  if LoadInteger < 0 then
    ExpConf.WriteInteger('Exp', 'AddExp', g_Config.nAddExp)
  else
    g_Config.nAddExp := LoadInteger;

  for i := 1 to MAXCHANGELEVEL do begin
    LoadString := ExpConf.ReadString('Exp', 'Level' + IntToStr(i), '');
    if LoadString = '' then begin
      ExpConf.WriteString('Exp', 'Level' + IntToStr(i), IntToStr(g_dwOldNeedExps[i]));
      g_Config.dwNeedExps[i] := g_dwOldNeedExps[i];
    end else begin
      g_Config.dwNeedExps[i] := StrToIntDef(LoadString, g_dwOldNeedExps[i]);
    end;
    {LoadInteger := StrToIntDef(LoadString, 0);
    if LoadInteger = 0 then begin
      ExpConf.WriteString('Exp', 'Level' + IntToStr(i), IntToStr(g_dwOldNeedExps[i]));
      g_Config.dwNeedExps[i] := g_dwOldNeedExps[i];
    end
    else begin
      if (LoadInteger > 0) then
        g_Config.dwNeedExps[i] := LoadInteger
      else
        g_Config.dwNeedExps[i] := g_dwOldNeedExps[i];
    end;  }
  end;

  for i := Low(g_Config.GuildLevelExp) to High(g_Config.GuildLevelExp) do begin

    LoadInteger := ExpConf.ReadInteger('GuildExp' + IntToStr(i), 'Gold', -1);
    if LoadInteger < 0 then begin
      ExpConf.WriteInteger('GuildExp' + IntToStr(i), 'Gold', I * 300000);
    end
    else
      g_Config.GuildLevelExp[i].nGold := LoadInteger;

    LoadInteger := ExpConf.ReadInteger('GuildExp' + IntToStr(i), 'BuildPoint', -1);
    if LoadInteger < 0 then begin
      if i > 10 then begin
        ExpConf.WriteInteger('GuildExp' + IntToStr(i), 'BuildPoint', (i - 10) * 200);
      end
      else
        ExpConf.WriteInteger('GuildExp' + IntToStr(i), 'BuildPoint', 0);
    end
    else
      g_Config.GuildLevelExp[i].nBuildPoint := LoadInteger;

    LoadInteger := ExpConf.ReadInteger('GuildExp' + IntToStr(i), 'FlourishingPoint', -1);
    if LoadInteger < 0 then begin
      ExpConf.WriteInteger('GuildExp' + IntToStr(i), 'FlourishingPoint', i * 20);
    end
    else
      g_Config.GuildLevelExp[i].nFlourishingPoint := LoadInteger;

    LoadInteger := ExpConf.ReadInteger('GuildExp' + IntToStr(i), 'StabilityPoint', -1);
    if LoadInteger < 0 then begin
      ExpConf.WriteInteger('GuildExp' + IntToStr(i), 'StabilityPoint', i * 10);
    end
    else
      g_Config.GuildLevelExp[i].nStabilityPoint := LoadInteger;

    LoadInteger := ExpConf.ReadInteger('GuildExp' + IntToStr(i), 'ActivityPoint', -1);
    if LoadInteger < 0 then begin
      ExpConf.WriteInteger('GuildExp' + IntToStr(i), 'ActivityPoint', 1500);
    end
    else
      g_Config.GuildLevelExp[i].nActivityPoint := LoadInteger;

    { m_nBuildPoint: Integer; //建筑度
   m_nFlourishingPoint: Integer; //繁荣度
   m_nStabilityPoint: Integer; //安定度
   m_nActivityPoint: Integer; //人气度

       }
  end;

  for I := Low(g_Config.HorseLevelExp) to High(g_Config.HorseLevelExp) do begin
    LoadString := ExpConf.ReadString('HorseExp', 'Level' + IntToStr(i), '');
    if LoadString = '' then begin
      ExpConf.WriteString('HorseExp', 'Level' + IntToStr(i), IntToStr(g_dwOldNeedExps[i]));
      g_Config.HorseLevelExp[i] := g_dwOldNeedExps[i];
    end else begin
      g_Config.HorseLevelExp[i] := StrToIntDef(LoadString, g_dwOldNeedExps[i]);
    end;
  end;

end;

procedure LoadGameCommand();

var
  LoadString: string;
  nLoadInteger: Integer;
begin
  LoadString := CommandConf.ReadString('Command', 'Data', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Data', g_GameCommand.Data.sCmd)
  else
    g_GameCommand.Data.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Data', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Data',
      g_GameCommand.Data.nPermissionMin)
  else
    g_GameCommand.Data.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PRVMSG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PRVMSG', g_GameCommand.PRVMSG.sCmd)
  else
    g_GameCommand.PRVMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'PRVMSG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PRVMSG',
      g_GameCommand.PRVMSG.nPermissionMin)
  else
    g_GameCommand.PRVMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ALLOWMSG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ALLOWMSG', g_GameCommand.ALLOWMSG.sCmd)
  else
    g_GameCommand.ALLOWMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ALLOWMSG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ALLOWMSG',
      g_GameCommand.ALLOWMSG.nPermissionMin)
  else
    g_GameCommand.ALLOWMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LETSHOUT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LETSHOUT', g_GameCommand.LETSHOUT.sCmd)
  else
    g_GameCommand.LETSHOUT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'LETSHOUT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LETSHOUT',
      g_GameCommand.LETSHOUT.nPermissionMin)
  else
    g_GameCommand.LETSHOUT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LETTRADE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LETTRADE', g_GameCommand.LETTRADE.sCmd)
  else
    g_GameCommand.LETTRADE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'LETTRADE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LETTRADE',
      g_GameCommand.LETTRADE.nPermissionMin)
  else
    g_GameCommand.LETTRADE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LETGUILD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LETGUILD', g_GameCommand.LETGUILD.sCmd)
  else
    g_GameCommand.LETGUILD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'LETGUILD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LETGUILD',
      g_GameCommand.LETGUILD.nPermissionMin)
  else
    g_GameCommand.LETGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ENDGUILD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ENDGUILD', g_GameCommand.ENDGUILD.sCmd)
  else
    g_GameCommand.ENDGUILD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ENDGUILD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ENDGUILD',
      g_GameCommand.ENDGUILD.nPermissionMin)
  else
    g_GameCommand.ENDGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BANGUILDCHAT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BANGUILDCHAT',
      g_GameCommand.BANGUILDCHAT.sCmd)
  else
    g_GameCommand.BANGUILDCHAT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'BANGUILDCHAT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BANGUILDCHAT',
      g_GameCommand.BANGUILDCHAT.nPermissionMin)
  else
    g_GameCommand.BANGUILDCHAT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AUTHALLY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AUTHALLY', g_GameCommand.AUTHALLY.sCmd)
  else
    g_GameCommand.AUTHALLY.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AUTHALLY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AUTHALLY',
      g_GameCommand.AUTHALLY.nPermissionMin)
  else
    g_GameCommand.AUTHALLY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AUTH', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AUTH', g_GameCommand.AUTH.sCmd)
  else
    g_GameCommand.AUTH.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AUTH', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AUTH',
      g_GameCommand.AUTH.nPermissionMin)
  else
    g_GameCommand.AUTH.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AUTHCANCEL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AUTHCANCEL',
      g_GameCommand.AUTHCANCEL.sCmd)
  else
    g_GameCommand.AUTHCANCEL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AUTHCANCEL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AUTHCANCEL',
      g_GameCommand.AUTHCANCEL.nPermissionMin)
  else
    g_GameCommand.AUTHCANCEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DIARY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DIARY', g_GameCommand.DIARY.sCmd)
  else
    g_GameCommand.DIARY.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DIARY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DIARY',
      g_GameCommand.DIARY.nPermissionMin)
  else
    g_GameCommand.DIARY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'USERMOVE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'USERMOVE', g_GameCommand.USERMOVE.sCmd)
  else
    g_GameCommand.USERMOVE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'USERMOVE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'USERMOVE',
      g_GameCommand.USERMOVE.nPermissionMin)
  else
    g_GameCommand.USERMOVE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SEARCHING', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SEARCHING', g_GameCommand.SEARCHING.sCmd)
  else
    g_GameCommand.SEARCHING.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SEARCHING', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SEARCHING',
      g_GameCommand.SEARCHING.nPermissionMin)
  else
    g_GameCommand.SEARCHING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ALLOWGROUPCALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ALLOWGROUPCALL',
      g_GameCommand.ALLOWGROUPCALL.sCmd)
  else
    g_GameCommand.ALLOWGROUPCALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ALLOWGROUPCALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ALLOWGROUPCALL',
      g_GameCommand.ALLOWGROUPCALL.nPermissionMin)
  else
    g_GameCommand.ALLOWGROUPCALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GROUPRECALLL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GROUPRECALLL',
      g_GameCommand.GROUPRECALLL.sCmd)
  else
    g_GameCommand.GROUPRECALLL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'GROUPRECALLL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GROUPRECALLL',
      g_GameCommand.GROUPRECALLL.nPermissionMin)
  else
    g_GameCommand.GROUPRECALLL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ALLOWGUILDRECALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ALLOWGUILDRECALL',
      g_GameCommand.ALLOWGUILDRECALL.sCmd)
  else
    g_GameCommand.ALLOWGUILDRECALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ALLOWGUILDRECALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ALLOWGUILDRECALL',
      g_GameCommand.ALLOWGUILDRECALL.nPermissionMin)
  else
    g_GameCommand.ALLOWGUILDRECALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GUILDRECALLL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GUILDRECALLL',
      g_GameCommand.GUILDRECALLL.sCmd)
  else
    g_GameCommand.GUILDRECALLL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'GUILDRECALLL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GUILDRECALLL',
      g_GameCommand.GUILDRECALLL.nPermissionMin)
  else
    g_GameCommand.GUILDRECALLL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'UNLOCKSTORAGE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'UNLOCKSTORAGE',
      g_GameCommand.UNLOCKSTORAGE.sCmd)
  else
    g_GameCommand.UNLOCKSTORAGE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'UNLOCKSTORAGE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'UNLOCKSTORAGE',
      g_GameCommand.UNLOCKSTORAGE.nPermissionMin)
  else
    g_GameCommand.UNLOCKSTORAGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'UnLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'UnLock', g_GameCommand.UnLock.sCmd)
  else
    g_GameCommand.UnLock.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'UnLock', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'UnLock',
      g_GameCommand.UnLock.nPermissionMin)
  else
    g_GameCommand.UnLock.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Lock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Lock', g_GameCommand.Lock.sCmd)
  else
    g_GameCommand.Lock.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Lock', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Lock',
      g_GameCommand.Lock.nPermissionMin)
  else
    g_GameCommand.Lock.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PASSWORDLOCK', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PASSWORDLOCK',
      g_GameCommand.PASSWORDLOCK.sCmd)
  else
    g_GameCommand.PASSWORDLOCK.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'PASSWORDLOCK', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PASSWORDLOCK',
      g_GameCommand.PASSWORDLOCK.nPermissionMin)
  else
    g_GameCommand.PASSWORDLOCK.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETPASSWORD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETPASSWORD',
      g_GameCommand.SETPASSWORD.sCmd)
  else
    g_GameCommand.SETPASSWORD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETPASSWORD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETPASSWORD',
      g_GameCommand.SETPASSWORD.nPermissionMin)
  else
    g_GameCommand.SETPASSWORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHGPASSWORD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHGPASSWORD',
      g_GameCommand.CHGPASSWORD.sCmd)
  else
    g_GameCommand.CHGPASSWORD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHGPASSWORD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHGPASSWORD',
      g_GameCommand.CHGPASSWORD.nPermissionMin)
  else
    g_GameCommand.CHGPASSWORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CLRPASSWORD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CLRPASSWORD',
      g_GameCommand.CLRPASSWORD.sCmd)
  else
    g_GameCommand.CLRPASSWORD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CLRPASSWORD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CLRPASSWORD',
      g_GameCommand.CLRPASSWORD.nPermissionMin)
  else
    g_GameCommand.CLRPASSWORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'UNPASSWORD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'UNPASSWORD',
      g_GameCommand.UNPASSWORD.sCmd)
  else
    g_GameCommand.UNPASSWORD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'UNPASSWORD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'UNPASSWORD',
      g_GameCommand.UNPASSWORD.nPermissionMin)
  else
    g_GameCommand.UNPASSWORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MEMBERFUNCTION', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MEMBERFUNCTION',
      g_GameCommand.MEMBERFUNCTION.sCmd)
  else
    g_GameCommand.MEMBERFUNCTION.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MEMBERFUNCTION', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MEMBERFUNCTION',
      g_GameCommand.MEMBERFUNCTION.nPermissionMin)
  else
    g_GameCommand.MEMBERFUNCTION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MEMBERFUNCTIONEX', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MEMBERFUNCTIONEX',
      g_GameCommand.MEMBERFUNCTIONEX.sCmd)
  else
    g_GameCommand.MEMBERFUNCTIONEX.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MEMBERFUNCTIONEX', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MEMBERFUNCTIONEX',
      g_GameCommand.MEMBERFUNCTIONEX.nPermissionMin)
  else
    g_GameCommand.MEMBERFUNCTIONEX.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DEAR', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DEAR', g_GameCommand.DEAR.sCmd)
  else
    g_GameCommand.DEAR.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DEAR', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DEAR',
      g_GameCommand.DEAR.nPermissionMin)
  else
    g_GameCommand.DEAR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ALLOWDEARRCALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ALLOWDEARRCALL',
      g_GameCommand.ALLOWDEARRCALL.sCmd)
  else
    g_GameCommand.ALLOWDEARRCALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ALLOWDEARRCALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ALLOWDEARRCALL',
      g_GameCommand.ALLOWDEARRCALL.nPermissionMin)
  else
    g_GameCommand.ALLOWDEARRCALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DEARRECALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DEARRECALL',
      g_GameCommand.DEARRECALL.sCmd)
  else
    g_GameCommand.DEARRECALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DEARRECALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DEARRECALL',
      g_GameCommand.DEARRECALL.nPermissionMin)
  else
    g_GameCommand.DEARRECALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MASTER', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MASTER', g_GameCommand.MASTER.sCmd)
  else
    g_GameCommand.MASTER.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MASTER', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MASTER',
      g_GameCommand.MASTER.nPermissionMin)
  else
    g_GameCommand.MASTER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ALLOWMASTERRECALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ALLOWMASTERRECALL',
      g_GameCommand.ALLOWMASTERRECALL.sCmd)
  else
    g_GameCommand.ALLOWMASTERRECALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ALLOWMASTERRECALL',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ALLOWMASTERRECALL',
      g_GameCommand.ALLOWMASTERRECALL.nPermissionMin)
  else
    g_GameCommand.ALLOWMASTERRECALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MASTERECALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MASTERECALL',
      g_GameCommand.MASTERECALL.sCmd)
  else
    g_GameCommand.MASTERECALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MASTERECALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MASTERECALL',
      g_GameCommand.MASTERECALL.nPermissionMin)
  else
    g_GameCommand.MASTERECALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ALLOWFIREND', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ALLOWFIREND', g_GameCommand.ALLOWFIREND.sCmd)
  else
    g_GameCommand.ALLOWFIREND.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ALLOWFIREND', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ALLOWFIREND', g_GameCommand.ALLOWFIREND.nPermissionMin)
  else
    g_GameCommand.ALLOWFIREND.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ATTACKMODE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ATTACKMODE',
      g_GameCommand.ATTACKMODE.sCmd)
  else
    g_GameCommand.ATTACKMODE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ATTACKMODE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ATTACKMODE',
      g_GameCommand.ATTACKMODE.nPermissionMin)
  else
    g_GameCommand.ATTACKMODE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'REST', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'REST', g_GameCommand.REST.sCmd)
  else
    g_GameCommand.REST.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'REST', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'REST',
      g_GameCommand.REST.nPermissionMin)
  else
    g_GameCommand.REST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TAKEONHORSE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TAKEONHORSE',
      g_GameCommand.TAKEONHORSE.sCmd)
  else
    g_GameCommand.TAKEONHORSE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TAKEONHORSE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TAKEONHORSE',
      g_GameCommand.TAKEONHORSE.nPermissionMin)
  else
    g_GameCommand.TAKEONHORSE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TAKEOFHORSE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TAKEOFHORSE',
      g_GameCommand.TAKEOFHORSE.sCmd)
  else
    g_GameCommand.TAKEOFHORSE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TAKEOFHORSE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TAKEOFHORSE',
      g_GameCommand.TAKEOFHORSE.nPermissionMin)
  else
    g_GameCommand.TAKEOFHORSE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'HUMANLOCAL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HUMANLOCAL',
      g_GameCommand.HUMANLOCAL.sCmd)
  else
    g_GameCommand.HUMANLOCAL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'HUMANLOCAL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HUMANLOCAL',
      g_GameCommand.HUMANLOCAL.nPermissionMin)
  else
    g_GameCommand.HUMANLOCAL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Move', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Move', g_GameCommand.Move.sCmd)
  else
    g_GameCommand.Move.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Move', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Move',
      g_GameCommand.Move.nPermissionMin)
  else
    g_GameCommand.Move.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'POSITIONMOVE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'POSITIONMOVE',
      g_GameCommand.POSITIONMOVE.sCmd)
  else
    g_GameCommand.POSITIONMOVE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'POSITIONMOVE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'POSITIONMOVE',
      g_GameCommand.POSITIONMOVE.nPermissionMin)
  else
    g_GameCommand.POSITIONMOVE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'INFO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'INFO', g_GameCommand.INFO.sCmd)
  else
    g_GameCommand.INFO.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'INFO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'INFO',
      g_GameCommand.INFO.nPermissionMin)
  else
    g_GameCommand.INFO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MOBLEVEL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MOBLEVEL', g_GameCommand.MOBLEVEL.sCmd)
  else
    g_GameCommand.MOBLEVEL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MOBLEVEL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MOBLEVEL',
      g_GameCommand.MOBLEVEL.nPermissionMin)
  else
    g_GameCommand.MOBLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MOBCOUNT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MOBCOUNT', g_GameCommand.MOBCOUNT.sCmd)
  else
    g_GameCommand.MOBCOUNT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MOBCOUNT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MOBCOUNT',
      g_GameCommand.MOBCOUNT.nPermissionMin)
  else
    g_GameCommand.MOBCOUNT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'HUMANCOUNT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HUMANCOUNT',
      g_GameCommand.HUMANCOUNT.sCmd)
  else
    g_GameCommand.HUMANCOUNT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'HUMANCOUNT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HUMANCOUNT',
      g_GameCommand.HUMANCOUNT.nPermissionMin)
  else
    g_GameCommand.HUMANCOUNT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Map', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Map', g_GameCommand.Map.sCmd)
  else
    g_GameCommand.Map.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Map', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Map',
      g_GameCommand.Map.nPermissionMin)
  else
    g_GameCommand.Map.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'KICK', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'KICK', g_GameCommand.KICK.sCmd)
  else
    g_GameCommand.KICK.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'KICK', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'KICK',
      g_GameCommand.KICK.nPermissionMin)
  else
    g_GameCommand.KICK.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TING', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TING', g_GameCommand.TING.sCmd)
  else
    g_GameCommand.TING.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TING', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TING',
      g_GameCommand.TING.nPermissionMin)
  else
    g_GameCommand.TING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SUPERTING', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SUPERTING', g_GameCommand.SUPERTING.sCmd)
  else
    g_GameCommand.SUPERTING.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SUPERTING', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SUPERTING',
      g_GameCommand.SUPERTING.nPermissionMin)
  else
    g_GameCommand.SUPERTING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MAPMOVE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MAPMOVE', g_GameCommand.MAPMOVE.sCmd)
  else
    g_GameCommand.MAPMOVE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MAPMOVE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MAPMOVE',
      g_GameCommand.MAPMOVE.nPermissionMin)
  else
    g_GameCommand.MAPMOVE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHUTUP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHUTUP', g_GameCommand.SHUTUP.sCmd)
  else
    g_GameCommand.SHUTUP.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHUTUP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHUTUP',
      g_GameCommand.SHUTUP.nPermissionMin)
  else
    g_GameCommand.SHUTUP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELEASESHUTUP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELEASESHUTUP',
      g_GameCommand.RELEASESHUTUP.sCmd)
  else
    g_GameCommand.RELEASESHUTUP.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELEASESHUTUP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELEASESHUTUP',
      g_GameCommand.RELEASESHUTUP.nPermissionMin)
  else
    g_GameCommand.RELEASESHUTUP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHUTUPLIST', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHUTUPLIST',
      g_GameCommand.SHUTUPLIST.sCmd)
  else
    g_GameCommand.SHUTUPLIST.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHUTUPLIST', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHUTUPLIST',
      g_GameCommand.SHUTUPLIST.nPermissionMin)
  else
    g_GameCommand.SHUTUPLIST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GAMEMASTER', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GAMEMASTER',
      g_GameCommand.GAMEMASTER.sCmd)
  else
    g_GameCommand.GAMEMASTER.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'GAMEMASTER', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GAMEMASTER',
      g_GameCommand.GAMEMASTER.nPermissionMin)
  else
    g_GameCommand.GAMEMASTER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'OBSERVER', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OBSERVER', g_GameCommand.OBSERVER.sCmd)
  else
    g_GameCommand.OBSERVER.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'OBSERVER', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OBSERVER',
      g_GameCommand.OBSERVER.nPermissionMin)
  else
    g_GameCommand.OBSERVER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SUEPRMAN', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SUEPRMAN', g_GameCommand.SUEPRMAN.sCmd)
  else
    g_GameCommand.SUEPRMAN.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SUEPRMAN', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SUEPRMAN',
      g_GameCommand.SUEPRMAN.nPermissionMin)
  else
    g_GameCommand.SUEPRMAN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Level', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Level', g_GameCommand.Level.sCmd)
  else
    g_GameCommand.Level.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Level', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Level',
      g_GameCommand.Level.nPermissionMin)
  else
    g_GameCommand.Level.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SABUKWALLGOLD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SABUKWALLGOLD',
      g_GameCommand.SABUKWALLGOLD.sCmd)
  else
    g_GameCommand.SABUKWALLGOLD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SABUKWALLGOLD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SABUKWALLGOLD',
      g_GameCommand.SABUKWALLGOLD.nPermissionMin)
  else
    g_GameCommand.SABUKWALLGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RECALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RECALL', g_GameCommand.RECALL.sCmd)
  else
    g_GameCommand.RECALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RECALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RECALL',
      g_GameCommand.RECALL.nPermissionMin)
  else
    g_GameCommand.RECALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'REGOTO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'REGOTO', g_GameCommand.REGOTO.sCmd)
  else
    g_GameCommand.REGOTO.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'REGOTO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'REGOTO',
      g_GameCommand.REGOTO.nPermissionMin)
  else
    g_GameCommand.REGOTO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWFLAG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWFLAG', g_GameCommand.SHOWFLAG.sCmd)
  else
    g_GameCommand.SHOWFLAG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWFLAG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWFLAG',
      g_GameCommand.SHOWFLAG.nPermissionMin)
  else
    g_GameCommand.SHOWFLAG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWOPEN', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWOPEN', g_GameCommand.SHOWOPEN.sCmd)
  else
    g_GameCommand.SHOWOPEN.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWOPEN', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWOPEN',
      g_GameCommand.SHOWOPEN.nPermissionMin)
  else
    g_GameCommand.SHOWOPEN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWUNIT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWUNIT', g_GameCommand.SHOWUNIT.sCmd)
  else
    g_GameCommand.SHOWUNIT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWUNIT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWUNIT',
      g_GameCommand.SHOWUNIT.nPermissionMin)
  else
    g_GameCommand.SHOWUNIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Attack', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Attack', g_GameCommand.Attack.sCmd)
  else
    g_GameCommand.Attack.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Attack', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Attack',
      g_GameCommand.Attack.nPermissionMin)
  else
    g_GameCommand.Attack.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MOB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MOB', g_GameCommand.MOB.sCmd)
  else
    g_GameCommand.MOB.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MOB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MOB', g_GameCommand.MOB.nPermissionMin)
  else
    g_GameCommand.MOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MOBNPC', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MOBNPC', g_GameCommand.MOBNPC.sCmd)
  else
    g_GameCommand.MOBNPC.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MOBNPC', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MOBNPC',
      g_GameCommand.MOBNPC.nPermissionMin)
  else
    g_GameCommand.MOBNPC.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELNPC', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELNPC', g_GameCommand.DELNPC.sCmd)
  else
    g_GameCommand.DELNPC.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELNPC', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELNPC',
      g_GameCommand.DELNPC.nPermissionMin)
  else
    g_GameCommand.DELNPC.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'NPCSCRIPT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'NPCSCRIPT', g_GameCommand.NPCSCRIPT.sCmd)
  else
    g_GameCommand.NPCSCRIPT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'NPCSCRIPT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'NPCSCRIPT',
      g_GameCommand.NPCSCRIPT.nPermissionMin)
  else
    g_GameCommand.NPCSCRIPT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RECALLMOB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RECALLMOB', g_GameCommand.RECALLMOB.sCmd)
  else
    g_GameCommand.RECALLMOB.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RECALLMOB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RECALLMOB',
      g_GameCommand.RECALLMOB.nPermissionMin)
  else
    g_GameCommand.RECALLMOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LUCKYPOINT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LUCKYPOINT',
      g_GameCommand.LUCKYPOINT.sCmd)
  else
    g_GameCommand.LUCKYPOINT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'LUCKYPOINT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LUCKYPOINT',
      g_GameCommand.LUCKYPOINT.nPermissionMin)
  else
    g_GameCommand.LUCKYPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LOTTERYTICKET', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LOTTERYTICKET',
      g_GameCommand.LOTTERYTICKET.sCmd)
  else
    g_GameCommand.LOTTERYTICKET.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'LOTTERYTICKET', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LOTTERYTICKET',
      g_GameCommand.LOTTERYTICKET.nPermissionMin)
  else
    g_GameCommand.LOTTERYTICKET.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADGUILD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADGUILD',
      g_GameCommand.RELOADGUILD.sCmd)
  else
    g_GameCommand.RELOADGUILD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADGUILD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADGUILD',
      g_GameCommand.RELOADGUILD.nPermissionMin)
  else
    g_GameCommand.RELOADGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADLINENOTICE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADLINENOTICE',
      g_GameCommand.RELOADLINENOTICE.sCmd)
  else
    g_GameCommand.RELOADLINENOTICE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADLINENOTICE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADLINENOTICE',
      g_GameCommand.RELOADLINENOTICE.nPermissionMin)
  else
    g_GameCommand.RELOADLINENOTICE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADABUSE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADABUSE',
      g_GameCommand.RELOADABUSE.sCmd)
  else
    g_GameCommand.RELOADABUSE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADABUSE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADABUSE',
      g_GameCommand.RELOADABUSE.nPermissionMin)
  else
    g_GameCommand.RELOADABUSE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BACKSTEP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BACKSTEP', g_GameCommand.BACKSTEP.sCmd)
  else
    g_GameCommand.BACKSTEP.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'BACKSTEP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BACKSTEP',
      g_GameCommand.BACKSTEP.nPermissionMin)
  else
    g_GameCommand.BACKSTEP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BALL', g_GameCommand.BALL.sCmd)
  else
    g_GameCommand.BALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'BALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BALL',
      g_GameCommand.BALL.nPermissionMin)
  else
    g_GameCommand.BALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'FREEPENALTY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'FREEPENALTY',
      g_GameCommand.FREEPENALTY.sCmd)
  else
    g_GameCommand.FREEPENALTY.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'FREEPENALTY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'FREEPENALTY',
      g_GameCommand.FREEPENALTY.nPermissionMin)
  else
    g_GameCommand.FREEPENALTY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PKPOINT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PKPOINT', g_GameCommand.PKPOINT.sCmd)
  else
    g_GameCommand.PKPOINT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'PKPOINT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PKPOINT',
      g_GameCommand.PKPOINT.nPermissionMin)
  else
    g_GameCommand.PKPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'IncPkPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'IncPkPoint',
      g_GameCommand.IncPkPoint.sCmd)
  else
    g_GameCommand.IncPkPoint.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'IncPkPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'IncPkPoint',
      g_GameCommand.IncPkPoint.nPermissionMin)
  else
    g_GameCommand.IncPkPoint.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGELUCK', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGELUCK',
      g_GameCommand.CHANGELUCK.sCmd)
  else
    g_GameCommand.CHANGELUCK.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGELUCK', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGELUCK',
      g_GameCommand.CHANGELUCK.nPermissionMin)
  else
    g_GameCommand.CHANGELUCK.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'HUNGER', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HUNGER', g_GameCommand.HUNGER.sCmd)
  else
    g_GameCommand.HUNGER.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'HUNGER', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HUNGER',
      g_GameCommand.HUNGER.nPermissionMin)
  else
    g_GameCommand.HUNGER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'HAIR', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HAIR', g_GameCommand.HAIR.sCmd)
  else
    g_GameCommand.HAIR.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'HAIR', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HAIR',
      g_GameCommand.HAIR.nPermissionMin)
  else
    g_GameCommand.HAIR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TRAINING', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TRAINING', g_GameCommand.TRAINING.sCmd)
  else
    g_GameCommand.TRAINING.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TRAINING', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TRAINING',
      g_GameCommand.TRAINING.nPermissionMin)
  else
    g_GameCommand.TRAINING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELETESKILL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELETESKILL',
      g_GameCommand.DELETESKILL.sCmd)
  else
    g_GameCommand.DELETESKILL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELETESKILL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELETESKILL',
      g_GameCommand.DELETESKILL.nPermissionMin)
  else
    g_GameCommand.DELETESKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGEJOB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGEJOB', g_GameCommand.CHANGEJOB.sCmd)
  else
    g_GameCommand.CHANGEJOB.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGEJOB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGEJOB',
      g_GameCommand.CHANGEJOB.nPermissionMin)
  else
    g_GameCommand.CHANGEJOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGEGENDER', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGEGENDER',
      g_GameCommand.CHANGEGENDER.sCmd)
  else
    g_GameCommand.CHANGEGENDER.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGEGENDER', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGEGENDER',
      g_GameCommand.CHANGEGENDER.nPermissionMin)
  else
    g_GameCommand.CHANGEGENDER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'NAMECOLOR', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'NAMECOLOR', g_GameCommand.NAMECOLOR.sCmd)
  else
    g_GameCommand.NAMECOLOR.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'NAMECOLOR', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'NAMECOLOR',
      g_GameCommand.NAMECOLOR.nPermissionMin)
  else
    g_GameCommand.NAMECOLOR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Mission', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Mission', g_GameCommand.Mission.sCmd)
  else
    g_GameCommand.Mission.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Mission', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Mission',
      g_GameCommand.Mission.nPermissionMin)
  else
    g_GameCommand.Mission.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobPlace', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobPlace', g_GameCommand.MobPlace.sCmd)
  else
    g_GameCommand.MobPlace.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobPlace', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobPlace',
      g_GameCommand.MobPlace.nPermissionMin)
  else
    g_GameCommand.MobPlace.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TRANSPARECY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TRANSPARECY',
      g_GameCommand.TRANSPARECY.sCmd)
  else
    g_GameCommand.TRANSPARECY.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TRANSPARECY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TRANSPARECY',
      g_GameCommand.TRANSPARECY.nPermissionMin)
  else
    g_GameCommand.TRANSPARECY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELETEITEM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELETEITEM',
      g_GameCommand.DELETEITEM.sCmd)
  else
    g_GameCommand.DELETEITEM.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELETEITEM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELETEITEM',
      g_GameCommand.DELETEITEM.nPermissionMin)
  else
    g_GameCommand.DELETEITEM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LEVEL0', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LEVEL0', g_GameCommand.LEVEL0.sCmd)
  else
    g_GameCommand.LEVEL0.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'LEVEL0', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LEVEL0',
      g_GameCommand.LEVEL0.nPermissionMin)
  else
    g_GameCommand.LEVEL0.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CLEARMISSION', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CLEARMISSION',
      g_GameCommand.CLEARMISSION.sCmd)
  else
    g_GameCommand.CLEARMISSION.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CLEARMISSION', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CLEARMISSION',
      g_GameCommand.CLEARMISSION.nPermissionMin)
  else
    g_GameCommand.CLEARMISSION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETFLAG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETFLAG', g_GameCommand.SETFLAG.sCmd)
  else
    g_GameCommand.SETFLAG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETFLAG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETFLAG',
      g_GameCommand.SETFLAG.nPermissionMin)
  else
    g_GameCommand.SETFLAG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETOPEN', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETOPEN', g_GameCommand.SETOPEN.sCmd)
  else
    g_GameCommand.SETOPEN.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETOPEN', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETOPEN',
      g_GameCommand.SETOPEN.nPermissionMin)
  else
    g_GameCommand.SETOPEN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETUNIT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETUNIT', g_GameCommand.SETUNIT.sCmd)
  else
    g_GameCommand.SETUNIT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETUNIT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETUNIT',
      g_GameCommand.SETUNIT.nPermissionMin)
  else
    g_GameCommand.SETUNIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RECONNECTION', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RECONNECTION',
      g_GameCommand.RECONNECTION.sCmd)
  else
    g_GameCommand.RECONNECTION.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RECONNECTION', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RECONNECTION',
      g_GameCommand.RECONNECTION.nPermissionMin)
  else
    g_GameCommand.RECONNECTION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DISABLEFILTER', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DISABLEFILTER',
      g_GameCommand.DISABLEFILTER.sCmd)
  else
    g_GameCommand.DISABLEFILTER.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DISABLEFILTER', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DISABLEFILTER',
      g_GameCommand.DISABLEFILTER.nPermissionMin)
  else
    g_GameCommand.DISABLEFILTER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHGUSERFULL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHGUSERFULL',
      g_GameCommand.CHGUSERFULL.sCmd)
  else
    g_GameCommand.CHGUSERFULL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHGUSERFULL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHGUSERFULL',
      g_GameCommand.CHGUSERFULL.nPermissionMin)
  else
    g_GameCommand.CHGUSERFULL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHGZENFASTSTEP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHGZENFASTSTEP',
      g_GameCommand.CHGZENFASTSTEP.sCmd)
  else
    g_GameCommand.CHGZENFASTSTEP.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHGZENFASTSTEP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHGZENFASTSTEP',
      g_GameCommand.CHGZENFASTSTEP.nPermissionMin)
  else
    g_GameCommand.CHGZENFASTSTEP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CONTESTPOINT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CONTESTPOINT',
      g_GameCommand.CONTESTPOINT.sCmd)
  else
    g_GameCommand.CONTESTPOINT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CONTESTPOINT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CONTESTPOINT',
      g_GameCommand.CONTESTPOINT.nPermissionMin)
  else
    g_GameCommand.CONTESTPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'STARTCONTEST', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'STARTCONTEST',
      g_GameCommand.STARTCONTEST.sCmd)
  else
    g_GameCommand.STARTCONTEST.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'STARTCONTEST', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'STARTCONTEST',
      g_GameCommand.STARTCONTEST.nPermissionMin)
  else
    g_GameCommand.STARTCONTEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ENDCONTEST', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ENDCONTEST',
      g_GameCommand.ENDCONTEST.sCmd)
  else
    g_GameCommand.ENDCONTEST.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ENDCONTEST', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ENDCONTEST',
      g_GameCommand.ENDCONTEST.nPermissionMin)
  else
    g_GameCommand.ENDCONTEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ANNOUNCEMENT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ANNOUNCEMENT',
      g_GameCommand.ANNOUNCEMENT.sCmd)
  else
    g_GameCommand.ANNOUNCEMENT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ANNOUNCEMENT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ANNOUNCEMENT',
      g_GameCommand.ANNOUNCEMENT.nPermissionMin)
  else
    g_GameCommand.ANNOUNCEMENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'OXQUIZROOM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OXQUIZROOM',
      g_GameCommand.OXQUIZROOM.sCmd)
  else
    g_GameCommand.OXQUIZROOM.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'OXQUIZROOM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OXQUIZROOM',
      g_GameCommand.OXQUIZROOM.nPermissionMin)
  else
    g_GameCommand.OXQUIZROOM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GSA', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GSA', g_GameCommand.GSA.sCmd)
  else
    g_GameCommand.GSA.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'GSA', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GSA',
      g_GameCommand.GSA.nPermissionMin)
  else
    g_GameCommand.GSA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGEITEMNAME', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGEITEMNAME',
      g_GameCommand.CHANGEITEMNAME.sCmd)
  else
    g_GameCommand.CHANGEITEMNAME.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGEITEMNAME', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGEITEMNAME',
      g_GameCommand.CHANGEITEMNAME.nPermissionMin)
  else
    g_GameCommand.CHANGEITEMNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DISABLESENDMSG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DISABLESENDMSG',
      g_GameCommand.DISABLESENDMSG.sCmd)
  else
    g_GameCommand.DISABLESENDMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DISABLESENDMSG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DISABLESENDMSG',
      g_GameCommand.DISABLESENDMSG.nPermissionMin)
  else
    g_GameCommand.DISABLESENDMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ENABLESENDMSG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ENABLESENDMSG',
      g_GameCommand.ENABLESENDMSG.sCmd)
  else
    g_GameCommand.ENABLESENDMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ENABLESENDMSG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ENABLESENDMSG',
      g_GameCommand.ENABLESENDMSG.nPermissionMin)
  else
    g_GameCommand.ENABLESENDMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DISABLESENDMSGLIST', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DISABLESENDMSGLIST',
      g_GameCommand.DISABLESENDMSGLIST.sCmd)
  else
    g_GameCommand.DISABLESENDMSGLIST.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DISABLESENDMSGLIST',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DISABLESENDMSGLIST',
      g_GameCommand.DISABLESENDMSGLIST.nPermissionMin)
  else
    g_GameCommand.DISABLESENDMSGLIST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'KILL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'KILL', g_GameCommand.KILL.sCmd)
  else
    g_GameCommand.KILL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'KILL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'KILL',
      g_GameCommand.KILL.nPermissionMin)
  else
    g_GameCommand.KILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MAKE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MAKE', g_GameCommand.MAKE.sCmd)
  else
    g_GameCommand.MAKE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MAKE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MAKE',
      g_GameCommand.MAKE.nPermissionMin)
  else
    g_GameCommand.MAKE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SMAKE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SMAKE', g_GameCommand.SMAKE.sCmd)
  else
    g_GameCommand.SMAKE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SMAKE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SMAKE',
      g_GameCommand.SMAKE.nPermissionMin)
  else
    g_GameCommand.SMAKE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BonusPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BonusPoint',
      g_GameCommand.BonusPoint.sCmd)
  else
    g_GameCommand.BonusPoint.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'BonusPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BonusPoint',
      g_GameCommand.BonusPoint.nPermissionMin)
  else
    g_GameCommand.BonusPoint.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELBONUSPOINT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELBONUSPOINT',
      g_GameCommand.DELBONUSPOINT.sCmd)
  else
    g_GameCommand.DELBONUSPOINT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELBONUSPOINT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELBONUSPOINT',
      g_GameCommand.DELBONUSPOINT.nPermissionMin)
  else
    g_GameCommand.DELBONUSPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RESTBONUSPOINT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RESTBONUSPOINT',
      g_GameCommand.RESTBONUSPOINT.sCmd)
  else
    g_GameCommand.RESTBONUSPOINT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RESTBONUSPOINT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RESTBONUSPOINT',
      g_GameCommand.RESTBONUSPOINT.nPermissionMin)
  else
    g_GameCommand.RESTBONUSPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'FIREBURN', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'FIREBURN', g_GameCommand.FIREBURN.sCmd)
  else
    g_GameCommand.FIREBURN.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'FIREBURN', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'FIREBURN',
      g_GameCommand.FIREBURN.nPermissionMin)
  else
    g_GameCommand.FIREBURN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TESTFIRE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TESTFIRE', g_GameCommand.TESTFIRE.sCmd)
  else
    g_GameCommand.TESTFIRE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TESTFIRE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TESTFIRE',
      g_GameCommand.TESTFIRE.nPermissionMin)
  else
    g_GameCommand.TESTFIRE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TESTSTATUS', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TESTSTATUS',
      g_GameCommand.TESTSTATUS.sCmd)
  else
    g_GameCommand.TESTSTATUS.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TESTSTATUS', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TESTSTATUS',
      g_GameCommand.TESTSTATUS.nPermissionMin)
  else
    g_GameCommand.TESTSTATUS.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELGOLD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELGOLD', g_GameCommand.DELGOLD.sCmd)
  else
    g_GameCommand.DELGOLD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELGOLD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELGOLD',
      g_GameCommand.DELGOLD.nPermissionMin)
  else
    g_GameCommand.DELGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ADDGOLD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ADDGOLD', g_GameCommand.ADDGOLD.sCmd)
  else
    g_GameCommand.ADDGOLD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ADDGOLD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ADDGOLD',
      g_GameCommand.ADDGOLD.nPermissionMin)
  else
    g_GameCommand.ADDGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELGAMEGOLD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELGAMEGOLD',
      g_GameCommand.DELGAMEGOLD.sCmd)
  else
    g_GameCommand.DELGAMEGOLD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELGAMEGOLD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELGAMEGOLD',
      g_GameCommand.DELGAMEGOLD.nPermissionMin)
  else
    g_GameCommand.DELGAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ADDGAMEGOLD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ADDGAMEGOLD',
      g_GameCommand.ADDGAMEGOLD.sCmd)
  else
    g_GameCommand.ADDGAMEGOLD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ADDGAMEGOLD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ADDGAMEGOLD',
      g_GameCommand.ADDGAMEGOLD.nPermissionMin)
  else
    g_GameCommand.ADDGAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GAMEGOLD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GAMEGOLD', g_GameCommand.GAMEGOLD.sCmd)
  else
    g_GameCommand.GAMEGOLD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'GAMEGOLD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GAMEGOLD',
      g_GameCommand.GAMEGOLD.nPermissionMin)
  else
    g_GameCommand.GAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GAMEPOINT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GAMEPOINT', g_GameCommand.GAMEPOINT.sCmd)
  else
    g_GameCommand.GAMEPOINT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'GAMEPOINT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GAMEPOINT',
      g_GameCommand.GAMEPOINT.nPermissionMin)
  else
    g_GameCommand.GAMEPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CREDITPOINT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CREDITPOINT',
      g_GameCommand.CREDITPOINT.sCmd)
  else
    g_GameCommand.CREDITPOINT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CREDITPOINT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CREDITPOINT',
      g_GameCommand.CREDITPOINT.nPermissionMin)
  else
    g_GameCommand.CREDITPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TESTGOLDCHANGE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TESTGOLDCHANGE',
      g_GameCommand.TESTGOLDCHANGE.sCmd)
  else
    g_GameCommand.TESTGOLDCHANGE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TESTGOLDCHANGE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TESTGOLDCHANGE',
      g_GameCommand.TESTGOLDCHANGE.nPermissionMin)
  else
    g_GameCommand.TESTGOLDCHANGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'REFINEWEAPON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'REFINEWEAPON',
      g_GameCommand.REFINEWEAPON.sCmd)
  else
    g_GameCommand.REFINEWEAPON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'REFINEWEAPON', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'REFINEWEAPON',
      g_GameCommand.REFINEWEAPON.nPermissionMin)
  else
    g_GameCommand.REFINEWEAPON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADADMIN', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADADMIN',
      g_GameCommand.RELOADADMIN.sCmd)
  else
    g_GameCommand.RELOADADMIN.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADADMIN', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADADMIN',
      g_GameCommand.RELOADADMIN.nPermissionMin)
  else
    g_GameCommand.RELOADADMIN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReLoadNpc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReLoadNpc', g_GameCommand.ReLoadNpc.sCmd)
  else
    g_GameCommand.ReLoadNpc.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReLoadNpc', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReLoadNpc',
      g_GameCommand.ReLoadNpc.nPermissionMin)
  else
    g_GameCommand.ReLoadNpc.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADMANAGE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADMANAGE',
      g_GameCommand.RELOADMANAGE.sCmd)
  else
    g_GameCommand.RELOADMANAGE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADMANAGE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADMANAGE',
      g_GameCommand.RELOADMANAGE.nPermissionMin)
  else
    g_GameCommand.RELOADMANAGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADROBOTMANAGE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADROBOTMANAGE',
      g_GameCommand.RELOADROBOTMANAGE.sCmd)
  else
    g_GameCommand.RELOADROBOTMANAGE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADROBOTMANAGE',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADROBOTMANAGE',
      g_GameCommand.RELOADROBOTMANAGE.nPermissionMin)
  else
    g_GameCommand.RELOADROBOTMANAGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADROBOT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADROBOT',
      g_GameCommand.RELOADROBOT.sCmd)
  else
    g_GameCommand.RELOADROBOT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADROBOT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADROBOT',
      g_GameCommand.RELOADROBOT.nPermissionMin)
  else
    g_GameCommand.RELOADROBOT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADMONITEMS', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADMONITEMS',
      g_GameCommand.RELOADMONITEMS.sCmd)
  else
    g_GameCommand.RELOADMONITEMS.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADMONITEMS', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADMONITEMS',
      g_GameCommand.RELOADMONITEMS.nPermissionMin)
  else
    g_GameCommand.RELOADMONITEMS.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADDIARY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADDIARY',
      g_GameCommand.RELOADDIARY.sCmd)
  else
    g_GameCommand.RELOADDIARY.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADDIARY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADDIARY',
      g_GameCommand.RELOADDIARY.nPermissionMin)
  else
    g_GameCommand.RELOADDIARY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADITEMDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADITEMDB',
      g_GameCommand.RELOADITEMDB.sCmd)
  else
    g_GameCommand.RELOADITEMDB.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADITEMDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADITEMDB',
      g_GameCommand.RELOADITEMDB.nPermissionMin)
  else
    g_GameCommand.RELOADITEMDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADMAGICDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADMAGICDB',
      g_GameCommand.RELOADMAGICDB.sCmd)
  else
    g_GameCommand.RELOADMAGICDB.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADMAGICDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADMAGICDB',
      g_GameCommand.RELOADMAGICDB.nPermissionMin)
  else
    g_GameCommand.RELOADMAGICDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADMONSTERDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADMONSTERDB',
      g_GameCommand.RELOADMONSTERDB.sCmd)
  else
    g_GameCommand.RELOADMONSTERDB.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADMONSTERDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADMONSTERDB',
      g_GameCommand.RELOADMONSTERDB.nPermissionMin)
  else
    g_GameCommand.RELOADMONSTERDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADMINMAP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADMINMAP',
      g_GameCommand.RELOADMINMAP.sCmd)
  else
    g_GameCommand.RELOADMINMAP.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADMINMAP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADMINMAP',
      g_GameCommand.RELOADMINMAP.nPermissionMin)
  else
    g_GameCommand.RELOADMINMAP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReAlive', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReAlive', g_GameCommand.ReAlive.sCmd)
  else
    g_GameCommand.ReAlive.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReAlive', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReAlive',
      g_GameCommand.ReAlive.nPermissionMin)
  else
    g_GameCommand.ReAlive.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ADJUESTLEVEL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ADJUESTLEVEL',
      g_GameCommand.ADJUESTLEVEL.sCmd)
  else
    g_GameCommand.ADJUESTLEVEL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ADJUESTLEVEL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ADJUESTLEVEL',
      g_GameCommand.ADJUESTLEVEL.nPermissionMin)
  else
    g_GameCommand.ADJUESTLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ADJUESTEXP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ADJUESTEXP',
      g_GameCommand.ADJUESTEXP.sCmd)
  else
    g_GameCommand.ADJUESTEXP.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ADJUESTEXP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ADJUESTEXP',
      g_GameCommand.ADJUESTEXP.nPermissionMin)
  else
    g_GameCommand.ADJUESTEXP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddGuild', g_GameCommand.AddGuild.sCmd)
  else
    g_GameCommand.AddGuild.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddGuild', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddGuild',
      g_GameCommand.AddGuild.nPermissionMin)
  else
    g_GameCommand.AddGuild.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELGUILD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELGUILD', g_GameCommand.DELGUILD.sCmd)
  else
    g_GameCommand.DELGUILD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELGUILD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELGUILD',
      g_GameCommand.DELGUILD.nPermissionMin)
  else
    g_GameCommand.DELGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGESABUKLORD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGESABUKLORD',
      g_GameCommand.CHANGESABUKLORD.sCmd)
  else
    g_GameCommand.CHANGESABUKLORD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGESABUKLORD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGESABUKLORD',
      g_GameCommand.CHANGESABUKLORD.nPermissionMin)
  else
    g_GameCommand.CHANGESABUKLORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'FORCEDWALLCONQUESTWAR', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'FORCEDWALLCONQUESTWAR',
      g_GameCommand.FORCEDWALLCONQUESTWAR.sCmd)
  else
    g_GameCommand.FORCEDWALLCONQUESTWAR.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'FORCEDWALLCONQUESTWAR',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'FORCEDWALLCONQUESTWAR',
      g_GameCommand.FORCEDWALLCONQUESTWAR.nPermissionMin)
  else
    g_GameCommand.FORCEDWALLCONQUESTWAR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ADDTOITEMEVENT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ADDTOITEMEVENT',
      g_GameCommand.ADDTOITEMEVENT.sCmd)
  else
    g_GameCommand.ADDTOITEMEVENT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ADDTOITEMEVENT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ADDTOITEMEVENT',
      g_GameCommand.ADDTOITEMEVENT.nPermissionMin)
  else
    g_GameCommand.ADDTOITEMEVENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ADDTOITEMEVENTASPIECES', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ADDTOITEMEVENTASPIECES',
      g_GameCommand.ADDTOITEMEVENTASPIECES.sCmd)
  else
    g_GameCommand.ADDTOITEMEVENTASPIECES.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ADDTOITEMEVENTASPIECES',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ADDTOITEMEVENTASPIECES',
      g_GameCommand.ADDTOITEMEVENTASPIECES.nPermissionMin)
  else
    g_GameCommand.ADDTOITEMEVENTASPIECES.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ItemEventList', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ItemEventList',
      g_GameCommand.ItemEventList.sCmd)
  else
    g_GameCommand.ItemEventList.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ItemEventList', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ItemEventList',
      g_GameCommand.ItemEventList.nPermissionMin)
  else
    g_GameCommand.ItemEventList.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'STARTINGGIFTNO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'STARTINGGIFTNO',
      g_GameCommand.STARTINGGIFTNO.sCmd)
  else
    g_GameCommand.STARTINGGIFTNO.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'STARTINGGIFTNO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'STARTINGGIFTNO',
      g_GameCommand.STARTINGGIFTNO.nPermissionMin)
  else
    g_GameCommand.STARTINGGIFTNO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELETEALLITEMEVENT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELETEALLITEMEVENT',
      g_GameCommand.DELETEALLITEMEVENT.sCmd)
  else
    g_GameCommand.DELETEALLITEMEVENT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELETEALLITEMEVENT',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELETEALLITEMEVENT',
      g_GameCommand.DELETEALLITEMEVENT.nPermissionMin)
  else
    g_GameCommand.DELETEALLITEMEVENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'STARTITEMEVENT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'STARTITEMEVENT',
      g_GameCommand.STARTITEMEVENT.sCmd)
  else
    g_GameCommand.STARTITEMEVENT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'STARTITEMEVENT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'STARTITEMEVENT',
      g_GameCommand.STARTITEMEVENT.nPermissionMin)
  else
    g_GameCommand.STARTITEMEVENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ITEMEVENTTERM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ITEMEVENTTERM',
      g_GameCommand.ITEMEVENTTERM.sCmd)
  else
    g_GameCommand.ITEMEVENTTERM.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ITEMEVENTTERM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ITEMEVENTTERM',
      g_GameCommand.ITEMEVENTTERM.nPermissionMin)
  else
    g_GameCommand.ITEMEVENTTERM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ADJUESTTESTLEVEL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ADJUESTTESTLEVEL',
      g_GameCommand.ADJUESTTESTLEVEL.sCmd)
  else
    g_GameCommand.ADJUESTTESTLEVEL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ADJUESTTESTLEVEL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ADJUESTTESTLEVEL',
      g_GameCommand.ADJUESTTESTLEVEL.nPermissionMin)
  else
    g_GameCommand.ADJUESTTESTLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TRAININGSKILL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TRAININGSKILL',
      g_GameCommand.TRAININGSKILL.sCmd)
  else
    g_GameCommand.TRAININGSKILL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TRAININGSKILL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TRAININGSKILL',
      g_GameCommand.TRAININGSKILL.nPermissionMin)
  else
    g_GameCommand.TRAININGSKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'OPDELETESKILL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OPDELETESKILL',
      g_GameCommand.OPDELETESKILL.sCmd)
  else
    g_GameCommand.OPDELETESKILL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'OPDELETESKILL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OPDELETESKILL',
      g_GameCommand.OPDELETESKILL.nPermissionMin)
  else
    g_GameCommand.OPDELETESKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGEWEAPONDURA', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGEWEAPONDURA',
      g_GameCommand.CHANGEWEAPONDURA.sCmd)
  else
    g_GameCommand.CHANGEWEAPONDURA.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGEWEAPONDURA', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGEWEAPONDURA',
      g_GameCommand.CHANGEWEAPONDURA.nPermissionMin)
  else
    g_GameCommand.CHANGEWEAPONDURA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RELOADGUILDALL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RELOADGUILDALL',
      g_GameCommand.RELOADGUILDALL.sCmd)
  else
    g_GameCommand.RELOADGUILDALL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RELOADGUILDALL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RELOADGUILDALL',
      g_GameCommand.RELOADGUILDALL.nPermissionMin)
  else
    g_GameCommand.RELOADGUILDALL.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'WHO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'WHO', g_GameCommand.WHO.sCmd)
  else
    g_GameCommand.WHO.sCmd := LoadString;  }
  CommandConf.WriteString('Command', 'WHO', g_GameCommand.WHO.sCmd);

  nLoadInteger := CommandConf.ReadInteger('Permission', 'WHO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'WHO', g_GameCommand.WHO.nPermissionMin)
  else
    g_GameCommand.WHO.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'TOTAL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TOTAL', g_GameCommand.TOTAL.sCmd)
  else
    g_GameCommand.TOTAL.sCmd := LoadString;   }

  CommandConf.WriteString('Command', 'TOTAL', g_GameCommand.TOTAL.sCmd);

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TOTAL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TOTAL',
      g_GameCommand.TOTAL.nPermissionMin)
  else
    g_GameCommand.TOTAL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TESTGA', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TESTGA', g_GameCommand.TESTGA.sCmd)
  else
    g_GameCommand.TESTGA.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TESTGA', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TESTGA',
      g_GameCommand.TESTGA.nPermissionMin)
  else
    g_GameCommand.TESTGA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MAPINFO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MAPINFO', g_GameCommand.MAPINFO.sCmd)
  else
    g_GameCommand.MAPINFO.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MAPINFO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MAPINFO',
      g_GameCommand.MAPINFO.nPermissionMin)
  else
    g_GameCommand.MAPINFO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SBKDOOR', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SBKDOOR', g_GameCommand.SBKDOOR.sCmd)
  else
    g_GameCommand.SBKDOOR.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SBKDOOR', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SBKDOOR',
      g_GameCommand.SBKDOOR.nPermissionMin)
  else
    g_GameCommand.SBKDOOR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGEDEARNAME', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGEDEARNAME',
      g_GameCommand.CHANGEDEARNAME.sCmd)
  else
    g_GameCommand.CHANGEDEARNAME.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGEDEARNAME', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGEDEARNAME',
      g_GameCommand.CHANGEDEARNAME.nPermissionMin)
  else
    g_GameCommand.CHANGEDEARNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CHANGEMASTERNAME', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CHANGEMASTERNAME',
      g_GameCommand.CHANGEMASTERNAME.sCmd)
  else
    g_GameCommand.CHANGEMASTERNAME.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CHANGEMASTERNAME', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CHANGEMASTERNAME',
      g_GameCommand.CHANGEMASTERNAME.nPermissionMin)
  else
    g_GameCommand.CHANGEMASTERNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'STARTQUEST', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'STARTQUEST',
      g_GameCommand.STARTQUEST.sCmd)
  else
    g_GameCommand.STARTQUEST.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'STARTQUEST', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'STARTQUEST',
      g_GameCommand.STARTQUEST.nPermissionMin)
  else
    g_GameCommand.STARTQUEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETPERMISSION', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETPERMISSION',
      g_GameCommand.SETPERMISSION.sCmd)
  else
    g_GameCommand.SETPERMISSION.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETPERMISSION', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETPERMISSION',
      g_GameCommand.SETPERMISSION.nPermissionMin)
  else
    g_GameCommand.SETPERMISSION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CLEARMON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CLEARMON', g_GameCommand.CLEARMON.sCmd)
  else
    g_GameCommand.CLEARMON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CLEARMON', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CLEARMON',
      g_GameCommand.CLEARMON.nPermissionMin)
  else
    g_GameCommand.CLEARMON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RENEWLEVEL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RENEWLEVEL',
      g_GameCommand.RENEWLEVEL.sCmd)
  else
    g_GameCommand.RENEWLEVEL.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'RENEWLEVEL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RENEWLEVEL',
      g_GameCommand.RENEWLEVEL.nPermissionMin)
  else
    g_GameCommand.RENEWLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DENYIPLOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DENYIPLOGON',
      g_GameCommand.DENYIPLOGON.sCmd)
  else
    g_GameCommand.DENYIPLOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DENYIPLOGON', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DENYIPLOGON',
      g_GameCommand.DENYIPLOGON.nPermissionMin)
  else
    g_GameCommand.DENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DENYACCOUNTLOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DENYACCOUNTLOGON',
      g_GameCommand.DENYACCOUNTLOGON.sCmd)
  else
    g_GameCommand.DENYACCOUNTLOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DENYACCOUNTLOGON', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DENYACCOUNTLOGON',
      g_GameCommand.DENYACCOUNTLOGON.nPermissionMin)
  else
    g_GameCommand.DENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DENYCHARNAMELOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DENYCHARNAMELOGON',
      g_GameCommand.DENYCHARNAMELOGON.sCmd)
  else
    g_GameCommand.DENYCHARNAMELOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DENYCHARNAMELOGON',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DENYCHARNAMELOGON',
      g_GameCommand.DENYCHARNAMELOGON.nPermissionMin)
  else
    g_GameCommand.DENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELDENYIPLOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELDENYIPLOGON',
      g_GameCommand.DELDENYIPLOGON.sCmd)
  else
    g_GameCommand.DELDENYIPLOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELDENYIPLOGON', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELDENYIPLOGON',
      g_GameCommand.DELDENYIPLOGON.nPermissionMin)
  else
    g_GameCommand.DELDENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELDENYACCOUNTLOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELDENYACCOUNTLOGON',
      g_GameCommand.DELDENYACCOUNTLOGON.sCmd)
  else
    g_GameCommand.DELDENYACCOUNTLOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELDENYACCOUNTLOGON',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELDENYACCOUNTLOGON',
      g_GameCommand.DELDENYACCOUNTLOGON.nPermissionMin)
  else
    g_GameCommand.DELDENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DELDENYCHARNAMELOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DELDENYCHARNAMELOGON',
      g_GameCommand.DELDENYCHARNAMELOGON.sCmd)
  else
    g_GameCommand.DELDENYCHARNAMELOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'DELDENYCHARNAMELOGON',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DELDENYCHARNAMELOGON',
      g_GameCommand.DELDENYCHARNAMELOGON.nPermissionMin)
  else
    g_GameCommand.DELDENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWDENYIPLOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWDENYIPLOGON',
      g_GameCommand.SHOWDENYIPLOGON.sCmd)
  else
    g_GameCommand.SHOWDENYIPLOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWDENYIPLOGON', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWDENYIPLOGON',
      g_GameCommand.SHOWDENYIPLOGON.nPermissionMin)
  else
    g_GameCommand.SHOWDENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWDENYACCOUNTLOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWDENYACCOUNTLOGON',
      g_GameCommand.SHOWDENYACCOUNTLOGON.sCmd)
  else
    g_GameCommand.SHOWDENYACCOUNTLOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWDENYACCOUNTLOGON',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWDENYACCOUNTLOGON',
      g_GameCommand.SHOWDENYACCOUNTLOGON.nPermissionMin)
  else
    g_GameCommand.SHOWDENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWDENYCHARNAMELOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWDENYCHARNAMELOGON',
      g_GameCommand.SHOWDENYCHARNAMELOGON.sCmd)
  else
    g_GameCommand.SHOWDENYCHARNAMELOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWDENYCHARNAMELOGON',
    -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWDENYCHARNAMELOGON',
      g_GameCommand.SHOWDENYCHARNAMELOGON.nPermissionMin)
  else
    g_GameCommand.SHOWDENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'VIEWWHISPER', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'VIEWWHISPER',
      g_GameCommand.VIEWWHISPER.sCmd)
  else
    g_GameCommand.VIEWWHISPER.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'VIEWWHISPER', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'VIEWWHISPER',
      g_GameCommand.VIEWWHISPER.nPermissionMin)
  else
    g_GameCommand.VIEWWHISPER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SPIRIT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SPIRIT', g_GameCommand.SPIRIT.sCmd)
  else
    g_GameCommand.SPIRIT.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SPIRIT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SPIRIT',
      g_GameCommand.SPIRIT.nPermissionMin)
  else
    g_GameCommand.SPIRIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SPIRITSTOP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SPIRITSTOP',
      g_GameCommand.SPIRITSTOP.sCmd)
  else
    g_GameCommand.SPIRITSTOP.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SPIRITSTOP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SPIRITSTOP',
      g_GameCommand.SPIRITSTOP.nPermissionMin)
  else
    g_GameCommand.SPIRITSTOP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETMAPMODE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETMAPMODE',
      g_GameCommand.SETMAPMODE.sCmd)
  else
    g_GameCommand.SETMAPMODE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETMAPMODE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETMAPMODE',
      g_GameCommand.SETMAPMODE.nPermissionMin)
  else
    g_GameCommand.SETMAPMODE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWMAPMODE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWMAPMODE',
      g_GameCommand.SHOWMAPMODE.sCmd)
  else
    g_GameCommand.SHOWMAPMODE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWMAPMODE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWMAPMODE',
      g_GameCommand.SHOWMAPMODE.nPermissionMin)
  else
    g_GameCommand.SHOWMAPMODE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TESTSERVERCONFIG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TESTSERVERCONFIG',
      g_GameCommand.TESTSERVERCONFIG.sCmd)
  else
    g_GameCommand.TESTSERVERCONFIG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TESTSERVERCONFIG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TESTSERVERCONFIG',
      g_GameCommand.TESTSERVERCONFIG.nPermissionMin)
  else
    g_GameCommand.TESTSERVERCONFIG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SERVERSTATUS', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SERVERSTATUS',
      g_GameCommand.SERVERSTATUS.sCmd)
  else
    g_GameCommand.SERVERSTATUS.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SERVERSTATUS', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SERVERSTATUS',
      g_GameCommand.SERVERSTATUS.nPermissionMin)
  else
    g_GameCommand.SERVERSTATUS.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TESTGETBAGITEM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TESTGETBAGITEM',
      g_GameCommand.TESTGETBAGITEM.sCmd)
  else
    g_GameCommand.TESTGETBAGITEM.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TESTGETBAGITEM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TESTGETBAGITEM',
      g_GameCommand.TESTGETBAGITEM.nPermissionMin)
  else
    g_GameCommand.TESTGETBAGITEM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CLEARBAG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CLEARBAG', g_GameCommand.CLEARBAG.sCmd)
  else
    g_GameCommand.CLEARBAG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'CLEARBAG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CLEARBAG',
      g_GameCommand.CLEARBAG.nPermissionMin)
  else
    g_GameCommand.CLEARBAG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SHOWUSEITEMINFO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWUSEITEMINFO',
      g_GameCommand.SHOWUSEITEMINFO.sCmd)
  else
    g_GameCommand.SHOWUSEITEMINFO.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWUSEITEMINFO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWUSEITEMINFO',
      g_GameCommand.SHOWUSEITEMINFO.nPermissionMin)
  else
    g_GameCommand.SHOWUSEITEMINFO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BINDUSEITEM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BINDUSEITEM',
      g_GameCommand.BINDUSEITEM.sCmd)
  else
    g_GameCommand.BINDUSEITEM.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'BINDUSEITEM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BINDUSEITEM',
      g_GameCommand.BINDUSEITEM.nPermissionMin)
  else
    g_GameCommand.BINDUSEITEM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MOBFIREBURN', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MOBFIREBURN',
      g_GameCommand.MOBFIREBURN.sCmd)
  else
    g_GameCommand.MOBFIREBURN.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MOBFIREBURN', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MOBFIREBURN',
      g_GameCommand.MOBFIREBURN.nPermissionMin)
  else
    g_GameCommand.MOBFIREBURN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TESTSPEEDMODE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TESTSPEEDMODE',
      g_GameCommand.TESTSPEEDMODE.sCmd)
  else
    g_GameCommand.TESTSPEEDMODE.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'TESTSPEEDMODE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TESTSPEEDMODE',
      g_GameCommand.TESTSPEEDMODE.nPermissionMin)
  else
    g_GameCommand.TESTSPEEDMODE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'REMTEMSG', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'REMTEMSG', g_GameCommand.REMTEMSG.sCmd)
  else
    g_GameCommand.REMTEMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'REMTEMSG', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'REMTEMSG',
      g_GameCommand.REMTEMSG.nPermissionMin)
  else
    g_GameCommand.REMTEMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'COLORSAY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'COLORSAY', g_GameCommand.COLORSAY.sCmd)
  else
    g_GameCommand.COLORSAY.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'COLORSAY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'COLORSAY',
      g_GameCommand.COLORSAY.nPermissionMin)
  else
    g_GameCommand.COLORSAY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETCOLORSAY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETCOLORSAY',
      g_GameCommand.SETCOLORSAY.sCmd)
  else
    g_GameCommand.SETCOLORSAY.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETCOLORSAY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETCOLORSAY',
      g_GameCommand.SETCOLORSAY.nPermissionMin)
  else
    g_GameCommand.SETCOLORSAY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AllowReAlive', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowReAlive',
      g_GameCommand.AllowReAlive.sCmd)
  else
    g_GameCommand.AllowReAlive.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AllowReAlive', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AllowReAlive',
      g_GameCommand.AllowReAlive.nPermissionMin)
  else
    g_GameCommand.AllowReAlive.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'USERITEM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'USERITEM', g_GameCommand.USERITEM.sCmd)
  else
    g_GameCommand.USERITEM.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'USERITEM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'USERITEM',
      g_GameCommand.USERITEM.nPermissionMin)
  else
    g_GameCommand.USERITEM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LOCKLOGON', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LOCKLOGON', g_GameCommand.LOCKLOGON.sCmd)
  else
    g_GameCommand.LOCKLOGON.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'LOCKLOGON', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LOCKLOGON',
      g_GameCommand.LOCKLOGON.nPermissionMin)
  else
    g_GameCommand.LOCKLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AllSysMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllSysMsg', g_GameCommand.AllSysMsg.sCmd)
  else
    g_GameCommand.AllSysMsg.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AllSysMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AllSysMsg',
      g_GameCommand.AllSysMsg.nPermissionMin)
  else
    g_GameCommand.AllSysMsg.nPermissionMin := nLoadInteger;

end;

procedure LoadString();
  function LoadConfigString(sSection, sIdent, sDefault: string): string;
  var
    sString: string;
  begin
    sString := StringConf.ReadString(sSection, sIdent, '');
    if sString = '' then begin
      StringConf.WriteString(sSection, sIdent, sDefault);
      Result := sDefault;
    end
    else begin
      Result := sString;
    end;
  end;
var
  LoadString: string;
begin
  LoadString := StringConf.ReadString('String', 'ClientSoftVersionError', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ClientSoftVersionError',
      sClientSoftVersionError)
  else
    sClientSoftVersionError := LoadString;

  LoadString := StringConf.ReadString('String', 'DownLoadNewClientSoft', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DownLoadNewClientSoft',
      sDownLoadNewClientSoft)
  else
    sDownLoadNewClientSoft := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceDisConnect', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceDisConnect', sForceDisConnect)
  else
    sForceDisConnect := LoadString;

  LoadString := StringConf.ReadString('String', 'ClientSoftVersionTooOld', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ClientSoftVersionTooOld',
      sClientSoftVersionTooOld)
  else
    sClientSoftVersionTooOld := LoadString;

  LoadString := StringConf.ReadString('String', 'DownLoadAndUseNewClient', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DownLoadAndUseNewClient',
      sDownLoadAndUseNewClient)
  else
    sDownLoadAndUseNewClient := LoadString;

  LoadString := StringConf.ReadString('String', 'OnlineUserFull', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OnlineUserFull', sOnlineUserFull)
  else
    sOnlineUserFull := LoadString;

  LoadString := StringConf.ReadString('String', 'YouNowIsTryPlayMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouNowIsTryPlayMode', sYouNowIsTryPlayMode)
  else
    sYouNowIsTryPlayMode := LoadString;

  LoadString := StringConf.ReadString('String', 'NowIsFreePlayMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NowIsFreePlayMode', g_sNowIsFreePlayMode)
  else
    g_sNowIsFreePlayMode := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfAll', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfAll', sAttackModeOfAll)
  else
    sAttackModeOfAll := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfPeaceful', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfPeaceful',
      sAttackModeOfPeaceful)
  else
    sAttackModeOfPeaceful := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfDear', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfDear',
      sAttackModeOfDear)
  else
    sAttackModeOfDear := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfMaster', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfMaster',
      sAttackModeOfMaster)
  else
    sAttackModeOfMaster := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfGroup', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfGroup', sAttackModeOfGroup)
  else
    sAttackModeOfGroup := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfGuild', sAttackModeOfGuild)
  else
    sAttackModeOfGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfRedWhite', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfRedWhite',
      sAttackModeOfRedWhite)
  else
    sAttackModeOfRedWhite := LoadString;

  LoadString := StringConf.ReadString('String', 'StartChangeAttackModeHelp',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartChangeAttackModeHelp',
      sStartChangeAttackModeHelp)
  else
    sStartChangeAttackModeHelp := LoadString;

  LoadString := StringConf.ReadString('String', 'StartNoticeMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartNoticeMsg', sStartNoticeMsg)
  else
    sStartNoticeMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ThrustingOn', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ThrustingOn', sThrustingOn)
  else
    sThrustingOn := LoadString;

  LoadString := StringConf.ReadString('String', 'ThrustingOff', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ThrustingOff', sThrustingOff)
  else
    sThrustingOff := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOn', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HalfMoonOn', sHalfMoonOn)
  else
    sHalfMoonOn := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOff', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HalfMoonOff', sHalfMoonOff)
  else
    sHalfMoonOff := LoadString;

  sCrsHitOn := LoadConfigString('String', 'CrsHitOn', sCrsHitOn);
  sCrsHitOff := LoadConfigString('String', 'CrsHitOff', sCrsHitOff);

  LoadString := StringConf.ReadString('String', 'FireSpiritsSummoned', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'FireSpiritsSummoned', sFireSpiritsSummoned)
  else
    sFireSpiritsSummoned := LoadString;

  LoadString := StringConf.ReadString('String', 'FireSpiritsFail', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'FireSpiritsFail', sFireSpiritsFail)
  else
    sFireSpiritsFail := LoadString;

  LoadString := StringConf.ReadString('String', 'SpiritsGone', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SpiritsGone', sSpiritsGone)
  else
    sSpiritsGone := LoadString;

  LoadString := StringConf.ReadString('String', 'MateDoTooweak', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MateDoTooweak', sMateDoTooweak)
  else
    sMateDoTooweak := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponBroke', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheWeaponBroke', g_sTheWeaponBroke)
  else
    g_sTheWeaponBroke := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponRefineSuccessfull',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheWeaponRefineSuccessfull',
      sTheWeaponRefineSuccessfull)
  else
    sTheWeaponRefineSuccessfull := LoadString;

  LoadString := StringConf.ReadString('String', 'YouPoisoned', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouPoisoned', sYouPoisoned)
  else
    sYouPoisoned := LoadString;

  LoadString := StringConf.ReadString('String', 'PetRest', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PetRest', sPetRest)
  else
    sPetRest := LoadString;

  LoadString := StringConf.ReadString('String', 'PetAttack', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PetAttack', sPetAttack)
  else
    sPetAttack := LoadString;

  LoadString := StringConf.ReadString('String', 'WearNotOfWoMan', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WearNotOfWoMan', sWearNotOfWoMan)
  else
    sWearNotOfWoMan := LoadString;

  LoadString := StringConf.ReadString('String', 'WearNotOfMan', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WearNotOfMan', sWearNotOfMan)
  else
    sWearNotOfMan := LoadString;

  LoadString := StringConf.ReadString('String', 'HandWeightNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HandWeightNot', sHandWeightNot)
  else
    sHandWeightNot := LoadString;

  LoadString := StringConf.ReadString('String', 'WearWeightNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WearWeightNot', sWearWeightNot)
  else
    sWearWeightNot := LoadString;

  LoadString := StringConf.ReadString('String', 'LevelNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'LevelNot', g_sLevelNot)
  else
    g_sLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JobNot', g_sJobNot)
  else
    g_sJobNot := LoadString;

  LoadString := StringConf.ReadString('String', 'DCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DCNot', g_sDCNot)
  else
    g_sDCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MCNot', g_sMCNot)
  else
    g_sMCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SCNot', g_sSCNot)
  else
    g_sSCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'ReNewLevelNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReNewLevelNot', g_sReNewLevelNot)
  else
    g_sReNewLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'CreditPointNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CreditPointNot', g_sCreditPointNot)
  else
    g_sCreditPointNot := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GuildNot', g_sGuildNot)
  else
    g_sGuildNot := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildMasterNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GuildMasterNot', g_sGuildMasterNot)
  else
    g_sGuildMasterNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SabukHumanNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SabukHumanNot', g_sSabukHumanNot)
  else
    g_sSabukHumanNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SabukMasterManNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SabukMasterManNot', g_sSabukMasterManNot)
  else
    g_sSabukMasterManNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MemberNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MemberNot', g_sMemberNot)
  else
    g_sMemberNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MemberTypeNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MemberTypeNot', g_sMemberTypeNot)
  else
    g_sMemberTypeNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MemberLevelNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MemberLevelNot', g_sMemberLevelNot)
  else
    g_sMemberLevelNot := LoadString;


  LoadString := StringConf.ReadString('String', 'CanotUseDrugOnThisMap', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUseDrugOnThisMap',
      sCanotUseDrugOnThisMap)
  else
    sCanotUseDrugOnThisMap := LoadString;

  LoadString := StringConf.ReadString('String', 'GameMasterMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GameMasterMode', sGameMasterMode)
  else
    sGameMasterMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseGameMasterMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReleaseGameMasterMode',
      sReleaseGameMasterMode)
  else
    sReleaseGameMasterMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ObserverMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ObserverMode', sObserverMode)
  else
    sObserverMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseObserverMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReleaseObserverMode',
      g_sReleaseObserverMode)
  else
    g_sReleaseObserverMode := LoadString;

  LoadString := StringConf.ReadString('String', 'SupermanMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SupermanMode', sSupermanMode)
  else
    sSupermanMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseSupermanMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReleaseSupermanMode', sReleaseSupermanMode)
  else
    sReleaseSupermanMode := LoadString;

  LoadString := StringConf.ReadString('String', 'YouFoundNothing', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouFoundNothing', sYouFoundNothing)
  else
    sYouFoundNothing := LoadString;

  LoadString := StringConf.ReadString('String', 'LineNoticePreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'LineNoticePreFix',
      g_Config.sLineNoticePreFix)
  else
    g_Config.sLineNoticePreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'SysMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SysMsgPreFix', g_Config.sSysMsgPreFix)
  else
    g_Config.sSysMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GuildMsgPreFix', g_Config.sGuildMsgPreFix)
  else
    g_Config.sGuildMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GroupMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GroupMsgPreFix', g_Config.sGroupMsgPreFix)
  else
    g_Config.sGroupMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'HintMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HintMsgPreFix', g_Config.sHintMsgPreFix)
  else
    g_Config.sHintMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GMRedMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GMRedMsgpreFix', g_Config.sGMRedMsgpreFix)
  else
    g_Config.sGMRedMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'MonSayMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MonSayMsgpreFix',
      g_Config.sMonSayMsgpreFix)
  else
    g_Config.sMonSayMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'CustMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CustMsgpreFix', g_Config.sCustMsgpreFix)
  else
    g_Config.sCustMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'CastleMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CastleMsgpreFix',
      g_Config.sCastleMsgpreFix)
  else
    g_Config.sCastleMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseTryDealLaterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseTryDealLaterMsg',
      g_sPleaseTryDealLaterMsg)
  else
    g_sPleaseTryDealLaterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealItemsDenyGetBackMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealItemsDenyGetBackMsg',
      g_sDealItemsDenyGetBackMsg)
  else
    g_sDealItemsDenyGetBackMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDealItemsMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDealItemsMsg',
      g_sDisableDealItemsMsg)
  else
    g_sDisableDealItemsMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotTryDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotTryDealMsg', g_sCanotTryDealMsg)
  else
    g_sCanotTryDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealActionCancelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealActionCancelMsg',
      g_sDealActionCancelMsg)
  else
    g_sDealActionCancelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PoseDisableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PoseDisableDealMsg', g_sPoseDisableDealMsg)
  else
    g_sPoseDisableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealSuccessMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealSuccessMsg', g_sDealSuccessMsg)
  else
    g_sDealSuccessMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealOKTooFast', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealOKTooFast', g_sDealOKTooFast)
  else
    g_sDealOKTooFast := LoadString;

  LoadString := StringConf.ReadString('String', 'YourBagSizeTooSmall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourBagSizeTooSmall',
      g_sYourBagSizeTooSmall)
  else
    g_sYourBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'DealHumanBagSizeTooSmall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealHumanBagSizeTooSmall',
      g_sDealHumanBagSizeTooSmall)
  else
    g_sDealHumanBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'YourGoldLargeThenLimit', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourGoldLargeThenLimit',
      g_sYourGoldLargeThenLimit)
  else
    g_sYourGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'DealHumanGoldLargeThenLimit',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealHumanGoldLargeThenLimit',
      g_sDealHumanGoldLargeThenLimit)
  else
    g_sDealHumanGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'YouDealOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouDealOKMsg', g_sYouDealOKMsg)
  else
    g_sYouDealOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PoseDealOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PoseDealOKMsg', g_sPoseDealOKMsg)
  else
    g_sPoseDealOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'KickClientUserMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'KickClientUserMsg', g_sKickClientUserMsg)
  else
    g_sKickClientUserMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropGoldMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropGoldMsg', g_sCanotDropGoldMsg)
  else
    g_sCanotDropGoldMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropInSafeZoneMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropInSafeZoneMsg',
      g_sCanotDropInSafeZoneMsg)
  else
    g_sCanotDropInSafeZoneMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropItemMsg', g_sCanotDropItemMsg)
  else
    g_sCanotDropItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropItemMsg', g_sCanotDropItemMsg)
  else
    g_sCanotDropItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUseItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUseItemMsg', g_sCanotUseItemMsg)
  else
    g_sCanotUseItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotMapUseItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotMapUseItemMsg', g_sCanotMapUseItemMsg)
  else
    g_sCanotMapUseItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUserDropItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUserDropItem', g_sCanotUserDropItem)
  else
    g_sCanotUserDropItem := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUserRepairItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUserRepairItem',
      g_sCanotUserRepairItem)
  else
    g_sCanotUserRepairItem := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUserStorageItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUserStorageItem',
      g_sCanotUserStorageItem)
  else
    g_sCanotUserStorageItem := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUserDealItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUserDealItem', g_sCanotUserDealItem)
  else
    g_sCanotUserDealItem := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryManMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryManMsg', g_sStartMarryManMsg)
  else
    g_sStartMarryManMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryWoManMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryWoManMsg', g_sStartMarryWoManMsg)
  else
    g_sStartMarryWoManMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryManAskQuestionMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryManAskQuestionMsg',
      g_sStartMarryManAskQuestionMsg)
  else
    g_sStartMarryManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryWoManAskQuestionMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryWoManAskQuestionMsg',
      g_sStartMarryWoManAskQuestionMsg)
  else
    g_sStartMarryWoManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryManAnswerQuestionMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryManAnswerQuestionMsg',
      g_sMarryManAnswerQuestionMsg)
  else
    g_sMarryManAnswerQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryManAskQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryManAskQuestionMsg',
      g_sMarryManAskQuestionMsg)
  else
    g_sMarryManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManAnswerQuestionMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManAnswerQuestionMsg',
      g_sMarryWoManAnswerQuestionMsg)
  else
    g_sMarryWoManAnswerQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManGetMarryMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManGetMarryMsg',
      g_sMarryWoManGetMarryMsg)
  else
    g_sMarryWoManGetMarryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManDenyMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManDenyMsg', g_sMarryWoManDenyMsg)
  else
    g_sMarryWoManDenyMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManCancelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManCancelMsg',
      g_sMarryWoManCancelMsg)
  else
    g_sMarryWoManCancelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceUnMarryManLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceUnMarryManLoginMsg',
      g_sfUnMarryManLoginMsg)
  else
    g_sfUnMarryManLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceUnMarryWoManLoginMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceUnMarryWoManLoginMsg',
      g_sfUnMarryWoManLoginMsg)
  else
    g_sfUnMarryWoManLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearOnlineSelfMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearOnlineSelfMsg',
      g_sManLoginDearOnlineSelfMsg)
  else
    g_sManLoginDearOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearOnlineDearMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearOnlineDearMsg',
      g_sManLoginDearOnlineDearMsg)
  else
    g_sManLoginDearOnlineDearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearOnlineSelfMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearOnlineSelfMsg',
      g_sWoManLoginDearOnlineSelfMsg)
  else
    g_sWoManLoginDearOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearOnlineDearMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearOnlineDearMsg',
      g_sWoManLoginDearOnlineDearMsg)
  else
    g_sWoManLoginDearOnlineDearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearNotOnlineMsg',
      g_sManLoginDearNotOnlineMsg)
  else
    g_sManLoginDearNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearNotOnlineMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearNotOnlineMsg',
      g_sWoManLoginDearNotOnlineMsg)
  else
    g_sWoManLoginDearNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLongOutDearOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLongOutDearOnlineMsg',
      g_sManLongOutDearOnlineMsg)
  else
    g_sManLongOutDearOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLongOutDearOnlineMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLongOutDearOnlineMsg',
      g_sWoManLongOutDearOnlineMsg)
  else
    g_sWoManLongOutDearOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreNotMarryedMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouAreNotMarryedMsg',
      g_sYouAreNotMarryedMsg)
  else
    g_sYouAreNotMarryedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourWifeNotOnlineMsg',
      g_sYourWifeNotOnlineMsg)
  else
    g_sYourWifeNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourHusbandNotOnlineMsg',
      g_sYourHusbandNotOnlineMsg)
  else
    g_sYourHusbandNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeNowLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourWifeNowLocateMsg',
      g_sYourWifeNowLocateMsg)
  else
    g_sYourWifeNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandSearchLocateMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourHusbandSearchLocateMsg',
      g_sYourHusbandSearchLocateMsg)
  else
    g_sYourHusbandSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandNowLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourHusbandNowLocateMsg',
      g_sYourHusbandNowLocateMsg)
  else
    g_sYourHusbandNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeSearchLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourWifeSearchLocateMsg',
      g_sYourWifeSearchLocateMsg)
  else
    g_sYourWifeSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'FUnMasterLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'FUnMasterLoginMsg', g_sfUnMasterLoginMsg)
  else
    g_sfUnMasterLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnMasterListLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UnMasterListLoginMsg',
      g_sfUnMasterListLoginMsg)
  else
    g_sfUnMasterListLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListOnlineSelfMsg',
      g_sMasterListOnlineSelfMsg)
  else
    g_sMasterListOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListOnlineMasterMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListOnlineMasterMsg',
      g_sMasterListOnlineMasterMsg)
  else
    g_sMasterListOnlineMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterOnlineSelfMsg', g_sMasterOnlineSelfMsg)
  else
    g_sMasterOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterOnlineSelfMsgEx', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterOnlineSelfMsgEx', g_sMasterOnlineSelfMsgEx)
  else
    g_sMasterOnlineSelfMsgEx := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterOnlineMasterListMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterOnlineMasterListMsg', g_sMasterOnlineMasterListMsg)
  else
    g_sMasterOnlineMasterListMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterLongOutMasterListOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterLongOutMasterListOnlineMsg', g_sMasterLongOutMasterListOnlineMsg)
  else
    g_sMasterLongOutMasterListOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String',
    'MasterListLongOutMasterOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListLongOutMasterOnlineMsg',
      g_sMasterListLongOutMasterOnlineMsg)
  else
    g_sMasterListLongOutMasterOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListNotOnlineMsg',
      g_sMasterListNotOnlineMsg)
  else
    g_sMasterListNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterNotOnlineMsg', g_sMasterNotOnlineMsg)
  else
    g_sMasterNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreNotMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouAreNotMasterMsg', g_sYouAreNotMasterMsg)
  else
    g_sYouAreNotMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterNotOnlineMsg',
      g_sYourMasterNotOnlineMsg)
  else
    g_sYourMasterNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListNotOnlineMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListNotOnlineMsg',
      g_sYourMasterListNotOnlineMsg)
  else
    g_sYourMasterListNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterNowLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterNowLocateMsg',
      g_sYourMasterNowLocateMsg)
  else
    g_sYourMasterNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListSearchLocateMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListSearchLocateMsg',
      g_sYourMasterListSearchLocateMsg)
  else
    g_sYourMasterListSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListNowLocateMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListNowLocateMsg',
      g_sYourMasterListNowLocateMsg)
  else
    g_sYourMasterListNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterSearchLocateMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterSearchLocateMsg',
      g_sYourMasterSearchLocateMsg)
  else
    g_sYourMasterSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListUnMasterOKMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListUnMasterOKMsg',
      g_sYourMasterListUnMasterOKMsg)
  else
    g_sYourMasterListUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreUnMasterOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouAreUnMasterOKMsg',
      g_sYouAreUnMasterOKMsg)
  else
    g_sYouAreUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnMasterLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UnMasterLoginMsg', g_sUnMasterLoginMsg)
  else
    g_sUnMasterLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NPCSayUnMasterOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NPCSayUnMasterOKMsg',
      g_sNPCSayUnMasterOKMsg)
  else
    g_sNPCSayUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NPCSayForceUnMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NPCSayForceUnMasterMsg',
      g_sNPCSayForceUnMasterMsg)
  else
    g_sNPCSayForceUnMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MyInfo', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MyInfo', g_sMyInfo)
  else
    g_sMyInfo := LoadString;

  LoadString := StringConf.ReadString('String', 'OpenedDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OpenedDealMsg', g_sOpenedDealMsg)
  else
    g_sOpenedDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SendCustMsgCanNotUseNowMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SendCustMsgCanNotUseNowMsg',
      g_sSendCustMsgCanNotUseNowMsg)
  else
    g_sSendCustMsgCanNotUseNowMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SubkMasterMsgCanNotUseNowMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SubkMasterMsgCanNotUseNowMsg',
      g_sSubkMasterMsgCanNotUseNowMsg)
  else
    g_sSubkMasterMsgCanNotUseNowMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SendOnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SendOnlineCountMsg', g_sSendOnlineCountMsg)
  else
    g_sSendOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaponRepairSuccess', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WeaponRepairSuccess',
      g_sWeaponRepairSuccess)
  else
    g_sWeaponRepairSuccess := LoadString;

  LoadString := StringConf.ReadString('String', 'DefenceUpTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DefenceUpTime', g_sDefenceUpTime)
  else
    g_sDefenceUpTime := LoadString;

  LoadString := StringConf.ReadString('String', 'DefenceDownTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DefenceDownTime', g_sDefenceDownTime)
  else
    g_sDefenceDownTime := LoadString;

  LoadString := StringConf.ReadString('String', 'MagDefenceUpTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MagDefenceUpTime', g_sMagDefenceUpTime)
  else
    g_sMagDefenceUpTime := LoadString;

  LoadString := StringConf.ReadString('String', 'MagDefenceDownTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MagDefenceDownTime', g_sMagDefenceDownTime)
  else
    g_sMagDefenceDownTime := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery1Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery1Msg', g_sWinLottery1Msg)
  else
    g_sWinLottery1Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery2Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery2Msg', g_sWinLottery2Msg)
  else
    g_sWinLottery2Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery3Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery3Msg', g_sWinLottery3Msg)
  else
    g_sWinLottery3Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery4Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery4Msg', g_sWinLottery4Msg)
  else
    g_sWinLottery4Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery5Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery5Msg', g_sWinLottery5Msg)
  else
    g_sWinLottery5Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery6Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery6Msg', g_sWinLottery6Msg)
  else
    g_sWinLottery6Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'NotWinLotteryMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NotWinLotteryMsg', g_sNotWinLotteryMsg)
  else
    g_sNotWinLotteryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaptonMakeLuck', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WeaptonMakeLuck', g_sWeaptonMakeLuck)
  else
    g_sWeaptonMakeLuck := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaptonNotMakeLuck', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WeaptonNotMakeLuck', g_sWeaptonNotMakeLuck)
  else
    g_sWeaptonNotMakeLuck := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponIsCursed', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheWeaponIsCursed', g_sTheWeaponIsCursed)
  else
    g_sTheWeaponIsCursed := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotTakeOffItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotTakeOffItem', g_sCanotTakeOffItem)
  else
    g_sCanotTakeOffItem := LoadString;

  LoadString := StringConf.ReadString('String', 'JoinGroupMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JoinGroupMsg', g_sJoinGroup)
  else
    g_sJoinGroup := LoadString;

  LoadString := StringConf.ReadString('String', 'TryModeCanotUseStorage', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TryModeCanotUseStorage',
      g_sTryModeCanotUseStorage)
  else
    g_sTryModeCanotUseStorage := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotGetItemsMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotGetItemsMsg', g_sCanotGetItems)
  else
    g_sCanotGetItems := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableDearRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableDearRecall', g_sEnableDearRecall)
  else
    g_sEnableDearRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDearRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDearRecall', g_sDisableDearRecall)
  else
    g_sDisableDearRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableMasterRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableMasterRecall', g_sEnableMasterRecall)
  else
    g_sEnableMasterRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableMasterRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableMasterRecall',
      g_sDisableMasterRecall)
  else
    g_sDisableMasterRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'NowCurrDateTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NowCurrDateTime', g_sNowCurrDateTime)
  else
    g_sNowCurrDateTime := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableAllowRebirth', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableAllowRebirth', g_sEnableAllowRebirth)
  else
    g_sEnableAllowRebirth := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableAllowRebirth', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableAllowRebirth',
      g_sDisableAllowRebirth)
  else
    g_sDisableAllowRebirth := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableHearWhisper', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableHearWhisper', g_sEnableHearWhisper)
  else
    g_sEnableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableHearWhisper', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableHearWhisper', g_sDisableHearWhisper)
  else
    g_sDisableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableShoutMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableShoutMsg', g_sEnableShoutMsg)
  else
    g_sEnableShoutMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableShoutMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableShoutMsg', g_sDisableShoutMsg)
  else
    g_sDisableShoutMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableDealMsg', g_sEnableDealMsg)
  else
    g_sEnableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDealMsg', g_sDisableDealMsg)
  else
    g_sDisableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGuildChat', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGuildChat', g_sEnableGuildChat)
  else
    g_sEnableGuildChat := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGuildChat', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGuildChat', g_sDisableGuildChat)
  else
    g_sDisableGuildChat := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableJoinGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableJoinGuild', g_sEnableJoinGuild)
  else
    g_sEnableJoinGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableJoinGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableJoinGuild', g_sDisableJoinGuild)
  else
    g_sDisableJoinGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableAuthAllyGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableAuthAllyGuild',
      g_sEnableAuthAllyGuild)
  else
    g_sEnableAuthAllyGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableAuthAllyGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableAuthAllyGuild',
      g_sDisableAuthAllyGuild)
  else
    g_sDisableAuthAllyGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGroupRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGroupRecall', g_sEnableGroupRecall)
  else
    g_sEnableGroupRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGroupRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGroupRecall', g_sDisableGroupRecall)
  else
    g_sDisableGroupRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGuildRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGuildRecall', g_sEnableGuildRecall)
  else
    g_sEnableGuildRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGuildRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGuildRecall', g_sDisableGuildRecall)
  else
    g_sDisableGuildRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableAddFriend', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableAddFriend', g_sEnableAddFriend)
  else
    g_sEnableAddFriend := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableAddFriend', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableAddFriend', g_sDisableAddFriend)
  else
    g_sDisableAddFriend := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseInputPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseInputPassword',
      g_sPleaseInputPassword)
  else
    g_sPleaseInputPassword := LoadString;

  LoadString := StringConf.ReadString('String', 'TheMapDisableMove', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheMapDisableMove', g_sTheMapDisableMove)
  else
    g_sTheMapDisableMove := LoadString;

  LoadString := StringConf.ReadString('String', 'TheMapNotFound', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheMapNotFound', g_sTheMapNotFound)
  else
    g_sTheMapNotFound := LoadString;

  LoadString := StringConf.ReadString('String', 'YourIPaddrDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourIPaddrDenyLogon',
      g_sYourIPaddrDenyLogon)
  else
    g_sYourIPaddrDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'YourAccountDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourAccountDenyLogon',
      g_sYourAccountDenyLogon)
  else
    g_sYourAccountDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'YourCharNameDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourCharNameDenyLogon',
      g_sYourCharNameDenyLogon)
  else
    g_sYourCharNameDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotPickUpItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotPickUpItem', g_sCanotPickUpItem)
  else
    g_sCanotPickUpItem := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotSendmsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotSendmsg', g_sCanotSendmsg)
  else
    g_sCanotSendmsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UserDenyWhisperMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UserDenyWhisperMsg', g_sUserDenyWhisperMsg)
  else
    g_sUserDenyWhisperMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UserNotOnLine', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UserNotOnLine', g_sUserNotOnLine)
  else
    g_sUserNotOnLine := LoadString;

  LoadString := StringConf.ReadString('String', 'RevivalRecoverMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RevivalRecoverMsg', g_sRevivalRecoverMsg)
  else
    g_sRevivalRecoverMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ClientVersionTooOld', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ClientVersionTooOld',
      g_sClientVersionTooOld)
  else
    g_sClientVersionTooOld := LoadString;

  LoadString := StringConf.ReadString('String', 'CastleGuildName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CastleGuildName', g_sCastleGuildName)
  else
    g_sCastleGuildName := LoadString;

  LoadString := StringConf.ReadString('String', 'NoCastleGuildName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoCastleGuildName', g_sNoCastleGuildName)
  else
    g_sNoCastleGuildName := LoadString;

  LoadString := StringConf.ReadString('String', 'WarrReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WarrReNewName', g_sWarrReNewName)
  else
    g_sWarrReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'WizardReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WizardReNewName', g_sWizardReNewName)
  else
    g_sWizardReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'TaosReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TaosReNewName', g_sTaosReNewName)
  else
    g_sTaosReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'RankLevelName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RankLevelName', g_sRankLevelName)
  else
    g_sRankLevelName := LoadString;

  LoadString := StringConf.ReadString('String', 'ManDearName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManDearName', g_sManDearName)
  else
    g_sManDearName := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManDearName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManDearName', g_sWoManDearName)
  else
    g_sWoManDearName := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterName', g_sMasterName)
  else
    g_sMasterName := LoadString;

  LoadString := StringConf.ReadString('String', 'NoMasterName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoMasterName', g_sNoMasterName)
  else
    g_sNoMasterName := LoadString;

  LoadString := StringConf.ReadString('String', 'HumanShowName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HumanShowName', g_sHumanShowName)
  else
    g_sHumanShowName := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangePermissionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangePermissionMsg',
      g_sChangePermissionMsg)
  else
    g_sChangePermissionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeKillMonExpRateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeKillMonExpRateMsg',
      g_sChangeKillMonExpRateMsg)
  else
    g_sChangeKillMonExpRateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangePowerRateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangePowerRateMsg', g_sChangePowerRateMsg)
  else
    g_sChangePowerRateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeMemberLevelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeMemberLevelMsg',
      g_sChangeMemberLevelMsg)
  else
    g_sChangeMemberLevelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeMemberTypeMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeMemberTypeMsg',
      g_sChangeMemberTypeMsg)
  else
    g_sChangeMemberTypeMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptChangeHumanHPMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptChangeHumanHPMsg',
      g_sScriptChangeHumanHPMsg)
  else
    g_sScriptChangeHumanHPMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptChangeHumanMPMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptChangeHumanMPMsg',
      g_sScriptChangeHumanMPMsg)
  else
    g_sScriptChangeHumanMPMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptGuildAuraePointNoGuild',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildAuraePointNoGuild',
      g_sScriptGuildAuraePointNoGuild)
  else
    g_sScriptGuildAuraePointNoGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptGuildAuraePointMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildAuraePointMsg',
      g_sScriptGuildAuraePointMsg)
  else
    g_sScriptGuildAuraePointMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptGuildBuildPointNoGuild',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildBuildPointNoGuild',
      g_sScriptGuildBuildPointNoGuild)
  else
    g_sScriptGuildBuildPointNoGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptGuildBuildPointMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildBuildPointMsg',
      g_sScriptGuildBuildPointMsg)
  else
    g_sScriptGuildBuildPointMsg := LoadString;

  LoadString := StringConf.ReadString('String',
    'ScriptGuildFlourishPointNoGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildFlourishPointNoGuild',
      g_sScriptGuildFlourishPointNoGuild)
  else
    g_sScriptGuildFlourishPointNoGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptGuildFlourishPointMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildFlourishPointMsg',
      g_sScriptGuildFlourishPointMsg)
  else
    g_sScriptGuildFlourishPointMsg := LoadString;

  LoadString := StringConf.ReadString('String',
    'ScriptGuildStabilityPointNoGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildStabilityPointNoGuild',
      g_sScriptGuildStabilityPointNoGuild)
  else
    g_sScriptGuildStabilityPointNoGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptGuildStabilityPointMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptGuildStabilityPointMsg',
      g_sScriptGuildStabilityPointMsg)
  else
    g_sScriptGuildStabilityPointMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptChiefItemCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptChiefItemCountMsg',
      g_sScriptChiefItemCountMsg)
  else
    g_sScriptChiefItemCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouCanotDisableSayMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouCanotDisableSayMsg', g_sDisableSayMsg)
  else
    g_sDisableSayMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'OnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OnlineCountMsg', g_sOnlineCountMsg)
  else
    g_sOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'TotalOnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TotalOnlineCountMsg',
      g_sTotalOnlineCountMsg)
  else
    g_sTotalOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouNeedLevelSendMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouNeedLevelSendMsg', g_sYouNeedLevelMsg)
  else
    g_sYouNeedLevelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ThisMapDisableSendCyCyMsg',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ThisMapDisableSendCyCyMsg',
      g_sThisMapDisableSendCyCyMsg)
  else
    g_sThisMapDisableSendCyCyMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouCanSendCyCyLaterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouCanSendCyCyLaterMsg',
      g_sYouCanSendCyCyLaterMsg)
  else
    g_sYouCanSendCyCyLaterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouIsDisableSendMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouIsDisableSendMsg',
      g_sYouIsDisableSendMsg)
  else
    g_sYouIsDisableSendMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouMurderedMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouMurderedMsg', g_sYouMurderedMsg)
  else
    g_sYouMurderedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouKilledByMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouKilledByMsg', g_sYouKilledByMsg)
  else
    g_sYouKilledByMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouProtectedByLawOfDefense',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouProtectedByLawOfDefense',
      g_sYouProtectedByLawOfDefense)
  else
    g_sYouProtectedByLawOfDefense := LoadString;

  LoadString := StringConf.ReadString('String', 'YourUseItemIsNul',
    '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourUseItemIsNul',
      g_sYourUseItemIsNul)
  else
    g_sYourUseItemIsNul := LoadString;

  LoadString := StringConf.ReadString('String', 'SlaveLevelUp', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SlaveLevelUp', g_sSlaveLevelUp)
  else
    g_sSlaveLevelUp := LoadString;

  LoadString := StringConf.ReadString('String', 'RepairItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RepairItemMsg', g_sRepairItemMsg)
  else
    g_sRepairItemMsg := LoadString;
  {
   LoadString := StringConf.ReadString('String', 'GropuIsCheckMsg', '');
   if LoadString = '' then
     StringConf.WriteString('String', 'GropuIsCheckMsg',
       g_sGropuIsCheckMsg)
   else
     g_sGropuIsCheckMsg := LoadString;

   LoadString := StringConf.ReadString('String', 'GropuIsCheckMsgNot', '');
   if LoadString = '' then
     StringConf.WriteString('String', 'GropuIsCheckMsgNot',
       g_sGropuIsCheckMsgNot)
   else
     g_sGropuIsCheckMsgNot := LoadString;

   LoadString := StringConf.ReadString('String', 'GropuIsCheckMsgTimeOut', '');
   if LoadString = '' then
     StringConf.WriteString('String', 'GropuIsCheckMsgTimeOut',
       g_sGropuIsCheckMsgTimeOut)
   else
     g_sGropuIsCheckMsgTimeOut := LoadString;

   LoadString := StringConf.ReadString('String', 'GropuIsCheckMsgNo', '');
   if LoadString = '' then
     StringConf.WriteString('String', 'GropuIsCheckMsgNo',
       g_sGropuIsCheckMsgNo)
   else
     g_sGropuIsCheckMsgNo := LoadString;    }

  if StringConf.ReadString('Guild', 'GuildNotice', '') = '' then
    StringConf.WriteString('Guild', 'GuildNotice', g_Config.sGuildNotice);
  g_Config.sGuildNotice := StringConf.ReadString('Guild', 'GuildNotice',
    g_Config.sGuildNotice);

  if StringConf.ReadString('Guild', 'GuildWar', '') = '' then
    StringConf.WriteString('Guild', 'GuildWar', g_Config.sGuildWar);
  g_Config.sGuildWar := StringConf.ReadString('Guild', 'GuildWar',
    g_Config.sGuildWar);

  if StringConf.ReadString('Guild', 'GuildAll', '') = '' then
    StringConf.WriteString('Guild', 'GuildAll', g_Config.sGuildAll);
  g_Config.sGuildAll := StringConf.ReadString('Guild', 'GuildAll',
    g_Config.sGuildAll);

  if StringConf.ReadString('Guild', 'GuildMember', '') = '' then
    StringConf.WriteString('Guild', 'GuildMember', g_Config.sGuildMember);
  g_Config.sGuildMember := StringConf.ReadString('Guild', 'GuildMember',
    g_Config.sGuildMember);

  if StringConf.ReadString('Guild', 'GuildMemberRank', '') = '' then
    StringConf.WriteString('Guild', 'GuildMemberRank',
      g_Config.sGuildMemberRank);
  g_Config.sGuildMemberRank := StringConf.ReadString('Guild', 'GuildMemberRank',
    g_Config.sGuildMemberRank);

  if StringConf.ReadString('Guild', 'GuildChief', '') = '' then
    StringConf.WriteString('Guild', 'GuildChief', g_Config.sGuildChief);
  g_Config.sGuildChief := StringConf.ReadString('Guild', 'GuildChief',
    g_Config.sGuildChief);

  if StringConf.ReadString('Server', 'ServerIP', '') = '' then
    StringConf.WriteString('Server', 'ServerIP', g_Config.sServerIPaddr);
  g_Config.sServerIPaddr := StringConf.ReadString('Server', 'ServerIP',
    g_Config.sServerIPaddr);

  if StringConf.ReadString('Server', 'WebSite', '') = '' then
    StringConf.WriteString('Server', 'WebSite', g_Config.sWebSite);
  g_Config.sWebSite := StringConf.ReadString('Server', 'WebSite',
    g_Config.sWebSite);

  if StringConf.ReadString('Server', 'BbsSite', '') = '' then
    StringConf.WriteString('Server', 'BbsSite', g_Config.sBbsSite);
  g_Config.sBbsSite := StringConf.ReadString('Server', 'BbsSite',
    g_Config.sBbsSite);

  if StringConf.ReadString('Server', 'ClientDownload', '') = '' then
    StringConf.WriteString('Server', 'ClientDownload',
      g_Config.sClientDownload);
  g_Config.sClientDownload := StringConf.ReadString('Server', 'ClientDownload',
    g_Config.sClientDownload);

  if StringConf.ReadString('Server', 'QQ', '') = '' then
    StringConf.WriteString('Server', 'QQ', g_Config.sQQ);
  g_Config.sQQ := StringConf.ReadString('Server', 'QQ', g_Config.sQQ);

  if StringConf.ReadString('Server', 'Phone', '') = '' then
    StringConf.WriteString('Server', 'Phone', g_Config.sPhone);
  g_Config.sPhone := StringConf.ReadString('Server', 'Phone', g_Config.sPhone);

  if StringConf.ReadString('Server', 'BankAccount0', '') = '' then
    StringConf.WriteString('Server', 'BankAccount0', g_Config.sBankAccount0);
  g_Config.sBankAccount0 := StringConf.ReadString('Server', 'BankAccount0',
    g_Config.sBankAccount0);

  if StringConf.ReadString('Server', 'BankAccount1', '') = '' then
    StringConf.WriteString('Server', 'BankAccount1', g_Config.sBankAccount1);
  g_Config.sBankAccount1 := StringConf.ReadString('Server', 'BankAccount1',
    g_Config.sBankAccount1);

  if StringConf.ReadString('Server', 'BankAccount2', '') = '' then
    StringConf.WriteString('Server', 'BankAccount2', g_Config.sBankAccount2);
  g_Config.sBankAccount2 := StringConf.ReadString('Server', 'BankAccount2',
    g_Config.sBankAccount2);

  if StringConf.ReadString('Server', 'BankAccount3', '') = '' then
    StringConf.WriteString('Server', 'BankAccount3', g_Config.sBankAccount3);
  g_Config.sBankAccount3 := StringConf.ReadString('Server', 'BankAccount3',
    g_Config.sBankAccount3);

  if StringConf.ReadString('Server', 'BankAccount4', '') = '' then
    StringConf.WriteString('Server', 'BankAccount4', g_Config.sBankAccount4);
  g_Config.sBankAccount4 := StringConf.ReadString('Server', 'BankAccount4',
    g_Config.sBankAccount4);

  if StringConf.ReadString('Server', 'BankAccount5', '') = '' then
    StringConf.WriteString('Server', 'BankAccount5', g_Config.sBankAccount5);
  g_Config.sBankAccount5 := StringConf.ReadString('Server', 'BankAccount5',
    g_Config.sBankAccount5);

  if StringConf.ReadString('Server', 'BankAccount6', '') = '' then
    StringConf.WriteString('Server', 'BankAccount6', g_Config.sBankAccount6);
  g_Config.sBankAccount6 := StringConf.ReadString('Server', 'BankAccount6',
    g_Config.sBankAccount6);

  if StringConf.ReadString('Server', 'BankAccount7', '') = '' then
    StringConf.WriteString('Server', 'BankAccount7', g_Config.sBankAccount7);
  g_Config.sBankAccount7 := StringConf.ReadString('Server', 'BankAccount7',
    g_Config.sBankAccount7);

  if StringConf.ReadString('Server', 'BankAccount8', '') = '' then
    StringConf.WriteString('Server', 'BankAccount8', g_Config.sBankAccount8);
  g_Config.sBankAccount8 := StringConf.ReadString('Server', 'BankAccount8',
    g_Config.sBankAccount8);

  if StringConf.ReadString('Server', 'BankAccount9', '') = '' then
    StringConf.WriteString('Server', 'BankAccount9', g_Config.sBankAccount9);
  g_Config.sBankAccount9 := StringConf.ReadString('Server', 'BankAccount9',
    g_Config.sBankAccount9);
end;

procedure LoadConfig();
var
  i, k: Integer;
  nLoadInteger: Integer;
  nLoadFloat: Double;
  sLoadString: string;
begin
  StartFixExp();
  LoadString();
  LoadGameCommand();
  LoadExp();

  if Config.ReadString('Server', 'ServerName', '') = '' then
    Config.WriteString('Server', 'ServerName', g_Config.sServerName);
  g_Config.sServerName := Config.ReadString('Server', 'ServerName', g_Config.sServerName);

  if Config.ReadString('Server', 'NotRepeatName', '') = '' then
    Config.WriteBool('Server', 'NotRepeatName', not g_boTestServer);
  g_boTestServer := not Config.ReadBool('Server', 'NotRepeatName', not g_boTestServer);

  if Config.ReadInteger('Server', 'ServerNumber', -1) < 0 then
    Config.WriteInteger('Server', 'ServerNumber', g_Config.nServerNumber);
  g_Config.nServerNumber := Config.ReadInteger('Server', 'ServerNumber', g_Config.nServerNumber);

  if Config.ReadString('Server', 'VentureServer', '') = '' then
    Config.WriteString('Server', 'VentureServer',
      BoolToStr(g_Config.boVentureServer));
  g_Config.boVentureServer := CompareText(Config.ReadString('Server',
    'VentureServer', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'TestServer', '') = '' then
    Config.WriteString('Server', 'TestServer',
      BoolToStr(g_Config.boTestServer));
  g_Config.boTestServer := CompareText(Config.ReadString('Server', 'TestServer',
    'FALSE'), 'TRUE') = 0;

  if Config.ReadInteger('Server', 'TestLevel', -1) < 0 then
    Config.WriteInteger('Server', 'TestLevel', g_Config.nTestLevel);
  g_Config.nTestLevel := Config.ReadInteger('Server', 'TestLevel',
    g_Config.nTestLevel);

  if Config.ReadInteger('Server', 'TestGold', -1) < 0 then
    Config.WriteInteger('Server', 'TestGold', g_Config.nTestGold);
  g_Config.nTestGold := Config.ReadInteger('Server', 'TestGold',
    g_Config.nTestGold);

  if Config.ReadInteger('Server', 'TestServerUserLimit', -1) < 0 then
    Config.WriteInteger('Server', 'TestServerUserLimit',
      g_Config.nTestUserLimit);
  g_Config.nTestUserLimit := Config.ReadInteger('Server', 'TestServerUserLimit',
    g_Config.nTestUserLimit);

  if Config.ReadString('Server', 'ServiceMode', '') = '' then
    Config.WriteString('Server', 'ServiceMode',
      BoolToStr(g_Config.boServiceMode));
  g_Config.boServiceMode := CompareText(Config.ReadString('Server',
    'ServiceMode', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'NonPKServer', '') = '' then
    Config.WriteString('Server', 'NonPKServer', BoolToStr(g_Config.boNonPKServer));
  g_Config.boNonPKServer := CompareText(Config.ReadString('Server', 'NonPKServer', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'ViewHackMessage', '') = '' then
    Config.WriteString('Server', 'ViewHackMessage', BoolToStr(g_Config.boViewHackMessage));
  g_Config.boViewHackMessage := CompareText(Config.ReadString('Server', 'ViewHackMessage', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'ViewHackMessage2', '') = '' then
    Config.WriteString('Server', 'ViewHackMessage2', BoolToStr(g_Config.boViewHackMessage2));
  g_Config.boViewHackMessage2 := CompareText(Config.ReadString('Server', 'ViewHackMessage2', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'ViewAdmissionFailure', '') = '' then
    Config.WriteString('Server', 'ViewAdmissionFailure',
      BoolToStr(g_Config.boViewAdmissionFailure));
  g_Config.boViewAdmissionFailure := CompareText(Config.ReadString('Server',
    'ViewAdmissionFailure', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'DBName', '') = '' then
    Config.WriteString('Server', 'DBName', sDBName);
  sDBName := Config.ReadString('Server', 'DBName', sDBName);

  if Config.ReadString('Server', 'GateAddr', '') = '' then
    Config.WriteString('Server', 'GateAddr', g_Config.sGateAddr);
  g_Config.sGateAddr := Config.ReadString('Server', 'GateAddr',
    g_Config.sGateAddr);

  if Config.ReadInteger('Server', 'GatePort', -1) < 0 then
    Config.WriteInteger('Server', 'GatePort', g_Config.nGatePort);
  g_Config.nGatePort := Config.ReadInteger('Server', 'GatePort',
    g_Config.nGatePort);

  if Config.ReadString('Server', 'DBAddr', '') = '' then
    Config.WriteString('Server', 'DBAddr', g_Config.sDBAddr);
  g_Config.sDBAddr := Config.ReadString('Server', 'DBAddr', g_Config.sDBAddr);

  if Config.ReadInteger('Server', 'DBPort', -1) < 0 then
    Config.WriteInteger('Server', 'DBPort', g_Config.nDBPort);
  g_Config.nDBPort := Config.ReadInteger('Server', 'DBPort', g_Config.nDBPort);

  if Config.ReadString('Server', 'IDSAddr', '') = '' then
    Config.WriteString('Server', 'IDSAddr', g_Config.sIDSAddr);
  g_Config.sIDSAddr := Config.ReadString('Server', 'IDSAddr',
    g_Config.sIDSAddr);

  if Config.ReadInteger('Server', 'IDSPort', -1) < 0 then
    Config.WriteInteger('Server', 'IDSPort', g_Config.nIDSPort);
  g_Config.nIDSPort := Config.ReadInteger('Server', 'IDSPort',
    g_Config.nIDSPort);

  if Config.ReadString('Server', 'MsgSrvAddr', '') = '' then
    Config.WriteString('Server', 'MsgSrvAddr', g_Config.sMsgSrvAddr);
  g_Config.sMsgSrvAddr := Config.ReadString('Server', 'MsgSrvAddr',
    g_Config.sMsgSrvAddr);

  if Config.ReadInteger('Server', 'MsgSrvPort', -1) < 0 then
    Config.WriteInteger('Server', 'MsgSrvPort', g_Config.nMsgSrvPort);
  g_Config.nMsgSrvPort := Config.ReadInteger('Server', 'MsgSrvPort',
    g_Config.nMsgSrvPort);

  if Config.ReadString('Server', 'LogServerAddr', '') = '' then
    Config.WriteString('Server', 'LogServerAddr', g_Config.sLogServerAddr);
  g_Config.sLogServerAddr := Config.ReadString('Server', 'LogServerAddr',
    g_Config.sLogServerAddr);

  if Config.ReadInteger('Server', 'LogServerPort', -1) < 0 then
    Config.WriteInteger('Server', 'LogServerPort', g_Config.nLogServerPort);
  g_Config.nLogServerPort := Config.ReadInteger('Server', 'LogServerPort',
    g_Config.nLogServerPort);

  if Config.ReadString('Server', 'DiscountForNightTime', '') = '' then
    Config.WriteString('Server', 'DiscountForNightTime',
      BoolToStr(g_Config.boDiscountForNightTime));
  g_Config.boDiscountForNightTime := CompareText(Config.ReadString('Server',
    'DiscountForNightTime', 'FALSE'), 'TRUE') = 0;

  if Config.ReadInteger('Server', 'HalfFeeStart', -1) < 0 then
    Config.WriteInteger('Server', 'HalfFeeStart', g_Config.nHalfFeeStart);
  g_Config.nHalfFeeStart := Config.ReadInteger('Server', 'HalfFeeStart',
    g_Config.nHalfFeeStart);

  if Config.ReadInteger('Server', 'HalfFeeEnd', -1) < 0 then
    Config.WriteInteger('Server', 'HalfFeeEnd', g_Config.nHalfFeeEnd);
  g_Config.nHalfFeeEnd := Config.ReadInteger('Server', 'HalfFeeEnd',
    g_Config.nHalfFeeEnd);

  if Config.ReadInteger('Server', 'HumLimit', -1) < 0 then
    Config.WriteInteger('Server', 'HumLimit', g_dwHumLimit);
  g_dwHumLimit := Config.ReadInteger('Server', 'HumLimit', g_dwHumLimit);

  if Config.ReadInteger('Server', 'MonLimit', -1) < 0 then
    Config.WriteInteger('Server', 'MonLimit', g_dwMonLimit);
  g_dwMonLimit := Config.ReadInteger('Server', 'MonLimit', g_dwMonLimit);

  if Config.ReadInteger('Server', 'ZenLimit', -1) < 0 then
    Config.WriteInteger('Server', 'ZenLimit', g_dwZenLimit);
  g_dwZenLimit := Config.ReadInteger('Server', 'ZenLimit', g_dwZenLimit);

  if Config.ReadInteger('Server', 'ZenLimit2', -1) < 0 then
    Config.WriteInteger('Server', 'ZenLimit2', g_dwZenLimit2);
  g_dwZenLimit2 := Config.ReadInteger('Server', 'ZenLimit2', g_dwZenLimit2);

  if Config.ReadInteger('Server', 'NpcLimit', -1) < 0 then
    Config.WriteInteger('Server', 'NpcLimit', g_dwNpcLimit);
  g_dwNpcLimit := Config.ReadInteger('Server', 'NpcLimit', g_dwNpcLimit);

  if Config.ReadInteger('Server', 'SocLimit', -1) < 0 then
    Config.WriteInteger('Server', 'SocLimit', g_dwSocLimit);
  g_dwSocLimit := Config.ReadInteger('Server', 'SocLimit', g_dwSocLimit);

  if Config.ReadInteger('Server', 'DecLimit', -1) < 0 then
    Config.WriteInteger('Server', 'DecLimit', nDecLimit);
  nDecLimit := Config.ReadInteger('Server', 'DecLimit', nDecLimit);

  if Config.ReadInteger('Server', 'SendBlock', -1) < 0 then
    Config.WriteInteger('Server', 'SendBlock', g_Config.nSendBlock);
  g_Config.nSendBlock := Config.ReadInteger('Server', 'SendBlock',
    g_Config.nSendBlock);

  if Config.ReadInteger('Server', 'CheckBlock', -1) < 0 then
    Config.WriteInteger('Server', 'CheckBlock', g_Config.nCheckBlock);
  g_Config.nCheckBlock := Config.ReadInteger('Server', 'CheckBlock',
    g_Config.nCheckBlock);

  if Config.ReadInteger('Server', 'SocCheckTimeOut', -1) < 0 then
    Config.WriteInteger('Server', 'SocCheckTimeOut', g_dwSocCheckTimeOut);
  g_dwSocCheckTimeOut := Config.ReadInteger('Server', 'SocCheckTimeOut', g_dwSocCheckTimeOut);

  if Config.ReadInteger('Server', 'AvailableBlock', -1) < 0 then
    Config.WriteInteger('Server', 'AvailableBlock', g_Config.nAvailableBlock);
  g_Config.nAvailableBlock := Config.ReadInteger('Server', 'AvailableBlock', g_Config.nAvailableBlock);

  if Config.ReadInteger('Server', 'GateLoad', -1) < 0 then
    Config.WriteInteger('Server', 'GateLoad', g_Config.nGateLoad);
  g_Config.nGateLoad := Config.ReadInteger('Server', 'GateLoad', g_Config.nGateLoad);

  if Config.ReadInteger('Server', 'UserFull', -1) < 0 then
    Config.WriteInteger('Server', 'UserFull', g_Config.nUserFull);
  g_Config.nUserFull := Config.ReadInteger('Server', 'UserFull', g_Config.nUserFull);

  if Config.ReadInteger('Server', 'ZenFastStep', -1) < 0 then
    Config.WriteInteger('Server', 'ZenFastStep', g_Config.nZenFastStep);
  g_Config.nZenFastStep := Config.ReadInteger('Server', 'ZenFastStep', g_Config.nZenFastStep);

  if Config.ReadInteger('Server', 'SafeOffLine', -1) < 0 then
    Config.WriteBool('Server', 'SafeOffLine', g_Config.boSafeOffLine);
  g_Config.boSafeOffLine := Config.ReadBool('Server', 'SafeOffLine', g_Config.boSafeOffLine);

  if Config.ReadInteger('Server', 'ShopSafeOffLine', -1) < 0 then
    Config.WriteBool('Server', 'ShopSafeOffLine', g_Config.boShopSafeOffLine);
  g_Config.boShopSafeOffLine := Config.ReadBool('Server', 'ShopSafeOffLine', g_Config.boShopSafeOffLine);

  g_Config.boCloseWuXin := Config.ReadBool('Server', 'CloseWuXin', g_Config.boCloseWuXin);

  if Config.ReadInteger('Server', 'SafeOffLineLevel', -1) < 0 then
    Config.WriteInteger('Server', 'SafeOffLineLevel', g_Config.nSafeOffLineLevel);
  g_Config.nSafeOffLineLevel := Config.ReadInteger('Server', 'SafeOffLineLevel', g_Config.nSafeOffLineLevel);

  if Config.ReadInteger('Server', 'ProcessMonstersTime', -1) < 0 then
    Config.WriteInteger('Server', 'ProcessMonstersTime', g_Config.dwProcessMonstersTime);
  g_Config.dwProcessMonstersTime := Config.ReadInteger('Server', 'ProcessMonstersTime', g_Config.dwProcessMonstersTime);

  if Config.ReadInteger('Server', 'RegenMonstersTime', -1) < 0 then
    Config.WriteInteger('Server', 'RegenMonstersTime', g_Config.dwRegenMonstersTime);
  g_Config.dwRegenMonstersTime := Config.ReadInteger('Server', 'RegenMonstersTime', g_Config.dwRegenMonstersTime);

  if Config.ReadInteger('Server', 'HumanGetMsgTimeLimit', -1) < 0 then
    Config.WriteInteger('Server', 'HumanGetMsgTimeLimit', g_Config.dwHumanGetMsgTime);
  g_Config.dwHumanGetMsgTime := Config.ReadInteger('Server', 'HumanGetMsgTimeLimit', g_Config.dwHumanGetMsgTime);

  {if Config.ReadString('Share', 'BaseDir', '') = '' then
    Config.WriteString('Share', 'BaseDir', g_Config.sBaseDir);
  g_Config.sBaseDir := Config.ReadString('Share', 'BaseDir', g_Config.sBaseDir);  }

  if Config.ReadString('Share', 'GuildDir', '') = '' then
    Config.WriteString('Share', 'GuildDir', g_Config.sGuildDir);
  g_Config.sGuildDir := Config.ReadString('Share', 'GuildDir', g_Config.sGuildDir);

  if Config.ReadString('Share', 'GuildFile', '') = '' then
    Config.WriteString('Share', 'GuildFile', g_Config.sGuildFile);
  g_Config.sGuildFile := Config.ReadString('Share', 'GuildFile', g_Config.sGuildFile);

  {if Config.ReadString('Share', 'VentureDir', '') = '' then
    Config.WriteString('Share', 'VentureDir', g_Config.sVentureDir);
  g_Config.sVentureDir := Config.ReadString('Share', 'VentureDir',
    g_Config.sVentureDir);  }

  if Config.ReadString('Share', 'ConLogDir', '') = '' then
    Config.WriteString('Share', 'ConLogDir', g_Config.sConLogDir);
  g_Config.sConLogDir := Config.ReadString('Share', 'ConLogDir', g_Config.sConLogDir);

  if Config.ReadString('Share', 'CastleDir', '') = '' then
    Config.WriteString('Share', 'CastleDir', g_Config.sCastleDir);
  g_Config.sCastleDir := Config.ReadString('Share', 'CastleDir', g_Config.sCastleDir);

  if Config.ReadString('Share', 'CastleFile', '') = '' then
    Config.WriteString('Share', 'CastleFile', g_Config.sCastleDir + 'List.txt');
  g_Config.sCastleFile := Config.ReadString('Share', 'CastleFile', g_Config.sCastleFile);

  if Config.ReadString('Share', 'GameDataDir', '') = '' then
    Config.WriteString('Share', 'GameDataDir', g_Config.sGameDataDir);
  g_Config.sGameDataDir := Config.ReadString('Share', 'GameDataDir', g_Config.sGameDataDir);

  if Config.ReadString('Share', 'EnvirDir', '') = '' then
    Config.WriteString('Share', 'EnvirDir', g_Config.sEnvirDir);
  g_Config.sEnvirDir := Config.ReadString('Share', 'EnvirDir', g_Config.sEnvirDir);

  if Config.ReadString('Share', 'MapDir', '') = '' then
    Config.WriteString('Share', 'MapDir', g_Config.sMapDir);
  g_Config.sMapDir := Config.ReadString('Share', 'MapDir', g_Config.sMapDir);

  {if Config.ReadString('Share', 'NoticeDir', '') = '' then
    Config.WriteString('Share', 'NoticeDir', g_Config.sNoticeDir);
  g_Config.sNoticeDir := Config.ReadString('Share', 'NoticeDir',
    g_Config.sNoticeDir);        }

  sLoadString := Config.ReadString('Share', 'LogDir', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'LogDir', g_Config.sLogDir)
  else
    g_Config.sLogDir := sLoadString;

  sLoadString := Config.ReadString('Share', 'EMailDir', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'EMailDir', g_Config.sEMailDir)
  else
    g_Config.sEMailDir := sLoadString;

  {if Config.ReadString('Share', 'PlugDir', '') = '' then
    Config.WriteString('Share', 'PlugDir', g_Config.sPlugDir);
  g_Config.sPlugDir := Config.ReadString('Share', 'PlugDir', g_Config.sPlugDir);

  if Config.ReadString('Share', 'AppendUserData', '') = '' then
    Config.WriteString('Share', 'AppendUserData', g_Config.sUserDataDir);
  g_Config.sUserDataDir := Config.ReadString('Share', 'AppendUserData',
    g_Config.sUserDataDir);                                        }

  if Config.ReadString('Names', 'HealSkill', '') = '' then
    Config.WriteString('Names', 'HealSkill', g_Config.sHealSkill);
  g_Config.sHealSkill := Config.ReadString('Names', 'HealSkill',
    g_Config.sHealSkill);

  if Config.ReadString('Names', 'FireBallSkill', '') = '' then
    Config.WriteString('Names', 'FireBallSkill', g_Config.sFireBallSkill);
  g_Config.sFireBallSkill := Config.ReadString('Names', 'FireBallSkill',
    g_Config.sFireBallSkill);

  if Config.ReadString('Names', 'ClothsMan', '') = '' then
    Config.WriteString('Names', 'ClothsMan', g_Config.sClothsMan);
  g_Config.sClothsMan := Config.ReadString('Names', 'ClothsMan', g_Config.sClothsMan);

  if Config.ReadString('Names', 'ClothsWoman', '') = '' then
    Config.WriteString('Names', 'ClothsWoman', g_Config.sClothsWoman);
  g_Config.sClothsWoman := Config.ReadString('Names', 'ClothsWoman',
    g_Config.sClothsWoman);

  if Config.ReadString('Names', 'WoodenSword', '') = '' then
    Config.WriteString('Names', 'WoodenSword', g_Config.sWoodenSword);
  g_Config.sWoodenSword := Config.ReadString('Names', 'WoodenSword',
    g_Config.sWoodenSword);

  if Config.ReadString('Names', 'Candle', '') = '' then
    Config.WriteString('Names', 'Candle', g_Config.sCandle);
  g_Config.sCandle := Config.ReadString('Names', 'Candle', g_Config.sCandle);

  if Config.ReadString('Names', 'BasicDrug', '') = '' then
    Config.WriteString('Names', 'BasicDrug', g_Config.sBasicDrug);
  g_Config.sBasicDrug := Config.ReadString('Names', 'BasicDrug',
    g_Config.sBasicDrug);

  if Config.ReadString('Names', 'GoldStone', '') = '' then
    Config.WriteString('Names', 'GoldStone', g_Config.sGoldStone);
  g_Config.sGoldStone := Config.ReadString('Names', 'GoldStone',
    g_Config.sGoldStone);

  if Config.ReadString('Names', 'SilverStone', '') = '' then
    Config.WriteString('Names', 'SilverStone', g_Config.sSilverStone);
  g_Config.sSilverStone := Config.ReadString('Names', 'SilverStone',
    g_Config.sSilverStone);

  if Config.ReadString('Names', 'SteelStone', '') = '' then
    Config.WriteString('Names', 'SteelStone', g_Config.sSteelStone);
  g_Config.sSteelStone := Config.ReadString('Names', 'SteelStone',
    g_Config.sSteelStone);

  if Config.ReadString('Names', 'CopperStone', '') = '' then
    Config.WriteString('Names', 'CopperStone', g_Config.sCopperStone);
  g_Config.sCopperStone := Config.ReadString('Names', 'CopperStone',
    g_Config.sCopperStone);

  if Config.ReadString('Names', 'BlackStone', '') = '' then
    Config.WriteString('Names', 'BlackStone', g_Config.sBlackStone);
  g_Config.sBlackStone := Config.ReadString('Names', 'BlackStone', g_Config.sBlackStone);

  if Config.ReadString('Names', 'Zuma1', '') = '' then
    Config.WriteString('Names', 'Zuma1', g_Config.sZuma[0]);
  g_Config.sZuma[0] := Config.ReadString('Names', 'Zuma1', g_Config.sZuma[0]);

  if Config.ReadString('Names', 'Zuma2', '') = '' then
    Config.WriteString('Names', 'Zuma2', g_Config.sZuma[1]);
  g_Config.sZuma[1] := Config.ReadString('Names', 'Zuma2', g_Config.sZuma[1]);

  if Config.ReadString('Names', 'Zuma3', '') = '' then
    Config.WriteString('Names', 'Zuma3', g_Config.sZuma[2]);
  g_Config.sZuma[2] := Config.ReadString('Names', 'Zuma3', g_Config.sZuma[2]);

  if Config.ReadString('Names', 'Zuma4', '') = '' then
    Config.WriteString('Names', 'Zuma4', g_Config.sZuma[3]);
  g_Config.sZuma[3] := Config.ReadString('Names', 'Zuma4', g_Config.sZuma[3]);

  if Config.ReadString('Names', 'Bee', '') = '' then
    Config.WriteString('Names', 'Bee', g_Config.sBee);
  g_Config.sBee := Config.ReadString('Names', 'Bee', g_Config.sBee);

  if Config.ReadString('Names', 'Spider', '') = '' then
    Config.WriteString('Names', 'Spider', g_Config.sSpider);
  g_Config.sSpider := Config.ReadString('Names', 'Spider', g_Config.sSpider);

  if Config.ReadString('Names', 'WomaHorn', '') = '' then
    Config.WriteString('Names', 'WomaHorn', g_Config.sWomaHorn);
  g_Config.sWomaHorn := Config.ReadString('Names', 'WomaHorn',
    g_Config.sWomaHorn);

  if Config.ReadString('Names', 'ZumaPiece', '') = '' then
    Config.WriteString('Names', 'ZumaPiece', g_Config.sZumaPiece);
  g_Config.sZumaPiece := Config.ReadString('Names', 'ZumaPiece',
    g_Config.sZumaPiece);

  if Config.ReadString('Names', 'Dogz', '') = '' then
    Config.WriteString('Names', 'Dogz', g_Config.sDogz);
  g_Config.sDogz := Config.ReadString('Names', 'Dogz', g_Config.sDogz);

  if Config.ReadString('Names', 'BoneFamm', '') = '' then
    Config.WriteString('Names', 'BoneFamm', g_Config.sBoneFamm);
  g_Config.sBoneFamm := Config.ReadString('Names', 'BoneFamm', g_Config.sBoneFamm);

  if Config.ReadString('Names', 'MoonSpirit', '') = '' then
    Config.WriteString('Names', 'MoonSpirit', g_Config.sMoonSpirit);
  g_Config.sMoonSpirit := Config.ReadString('Names', 'MoonSpirit', g_Config.sMoonSpirit);

  if Config.ReadString('Names', 'BoneDog', '') = '' then
    Config.WriteString('Names', 'BoneDog', g_Config.sBoneDog);
  g_Config.sBoneDog := Config.ReadString('Names', 'BoneDog', g_Config.sBoneDog);

  sLoadString := Config.ReadString('Names', 'GameGold', '');
  if sLoadString = '' then
    Config.WriteString('Names', 'GameGold', g_Config.sGameGoldName)
  else
    g_Config.sGameGoldName := sLoadString;

  {sLoadString := Config.ReadString('Names', 'GameGold', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GameGold', g_Config.sGameGoldName)
  else
    g_Config.sGameGoldName := sLoadString;

  sLoadString := Config.ReadString('Names', 'GamePoint', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GamePoint', g_Config.sGamePointName)
  else
    g_Config.sGamePointName := sLoadString;

  sLoadString := Config.ReadString('Names', 'GameDiamond', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GameDiamond', g_Config.sGameDiamondName)
  else
    g_Config.sGameDiamondName := sLoadString;  }

  {sLoadString := Config.ReadString('Names', 'PayMentPointName', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'PayMentPointName', g_Config.sPayMentPointName)
  else
    g_Config.sPayMentPointName := sLoadString; }

  g_Config.boCheckFail := False;

  if Config.ReadInteger('Setup', 'ItemNumber', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemNumber', g_Config.nItemNumber);
  g_Config.nItemNumber := Config.ReadInteger('Setup', 'ItemNumber', g_Config.nItemNumber);

  if Config.ReadInteger('Setup', 'ItemNumberEx', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemNumberEx', g_Config.nItemNumberEx);
  g_Config.nItemNumberEx := Config.ReadInteger('Setup', 'ItemNumberEx', g_Config.nItemNumberEx);

  if Config.ReadString('Setup', 'ClientFile1', '') = '' then
    Config.WriteString('Setup', 'ClientFile1', g_Config.sClientFile1);
  g_Config.sClientFile1 := Config.ReadString('Setup', 'ClientFile1',
    g_Config.sClientFile1);

  if Config.ReadString('Setup', 'ClientFile2', '') = '' then
    Config.WriteString('Setup', 'ClientFile2', g_Config.sClientFile2);
  g_Config.sClientFile2 := Config.ReadString('Setup', 'ClientFile2',
    g_Config.sClientFile2);

  if Config.ReadString('Setup', 'ClientFile3', '') = '' then
    Config.WriteString('Setup', 'ClientFile3', g_Config.sClientFile3);
  g_Config.sClientFile3 := Config.ReadString('Setup', 'ClientFile3',
    g_Config.sClientFile3);

  if Config.ReadInteger('Setup', 'MonUpLvNeedKillBase', -1) < 0 then
    Config.WriteInteger('Setup', 'MonUpLvNeedKillBase',
      g_Config.nMonUpLvNeedKillBase);
  g_Config.nMonUpLvNeedKillBase := Config.ReadInteger('Setup',
    'MonUpLvNeedKillBase', g_Config.nMonUpLvNeedKillBase);

  if Config.ReadInteger('Setup', 'MonUpLvRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MonUpLvRate', g_Config.nMonUpLvRate);
  g_Config.nMonUpLvRate := Config.ReadInteger('Setup', 'MonUpLvRate',
    g_Config.nMonUpLvRate);

  for i := Low(g_Config.MonUpLvNeedKillCount) to
    High(g_Config.MonUpLvNeedKillCount) do begin
    if Config.ReadInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(i),
        g_Config.MonUpLvNeedKillCount[i]);
    g_Config.MonUpLvNeedKillCount[i] := Config.ReadInteger('Setup',
      'MonUpLvNeedKillCount' + IntToStr(i), g_Config.MonUpLvNeedKillCount[i]);
  end;

  for i := Low(g_Config.SlaveColor) to High(g_Config.SlaveColor) do begin
    if Config.ReadInteger('Setup', 'SlaveColor' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'SlaveColor' + IntToStr(i),
        g_Config.SlaveColor[i]);
    g_Config.SlaveColor[i] := Config.ReadInteger('Setup', 'SlaveColor' +
      IntToStr(i), g_Config.SlaveColor[i]);
  end;

  if Config.ReadInteger('Setup', 'GetWuXinExpTime', -1) < 0 then
    Config.WriteInteger('Setup', 'GetWuXinExpTime', g_Config.dwGetWuXinExpTime);
  g_Config.dwGetWuXinExpTime := Config.ReadInteger('Setup', 'GetWuXinExpTime', g_Config.dwGetWuXinExpTime);

  if Config.ReadInteger('Setup', 'GetWuXinExpTick', -1) < 0 then
    Config.WriteInteger('Setup', 'GetWuXinExpTick', g_Config.dwGetWuXinExpTick);
  g_Config.dwGetWuXinExpTick := Config.ReadInteger('Setup', 'GetWuXinExpTick', g_Config.dwGetWuXinExpTick);

  if Config.ReadInteger('Setup', 'GetWuXinCount', -1) < 0 then
    Config.WriteInteger('Setup', 'GetWuXinCount', g_Config.dwGetWuXinCount);
  g_Config.dwGetWuXinCount := Config.ReadInteger('Setup', 'GetWuXinCount', g_Config.dwGetWuXinCount);

  if Config.ReadString('Setup', 'HomeMap', '') = '' then
    Config.WriteString('Setup', 'HomeMap', g_Config.sHomeMap);
  g_Config.sHomeMap := Config.ReadString('Setup', 'HomeMap', g_Config.sHomeMap);

  if Config.ReadInteger('Setup', 'HomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'HomeX', g_Config.nHomeX);
  g_Config.nHomeX := Config.ReadInteger('Setup', 'HomeX', g_Config.nHomeX);

  if Config.ReadInteger('Setup', 'HomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'HomeY', g_Config.nHomeY);
  g_Config.nHomeY := Config.ReadInteger('Setup', 'HomeY', g_Config.nHomeY);

  if Config.ReadString('Setup', 'RedHomeMap', '') = '' then
    Config.WriteString('Setup', 'RedHomeMap', g_Config.sRedHomeMap);
  g_Config.sRedHomeMap := Config.ReadString('Setup', 'RedHomeMap',
    g_Config.sRedHomeMap);

  if Config.ReadInteger('Setup', 'RedHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'RedHomeX', g_Config.nRedHomeX);
  g_Config.nRedHomeX := Config.ReadInteger('Setup', 'RedHomeX',
    g_Config.nRedHomeX);

  if Config.ReadInteger('Setup', 'RedHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'RedHomeY', g_Config.nRedHomeY);
  g_Config.nRedHomeY := Config.ReadInteger('Setup', 'RedHomeY',
    g_Config.nRedHomeY);

  if Config.ReadString('Setup', 'RedDieHomeMap', '') = '' then
    Config.WriteString('Setup', 'RedDieHomeMap', g_Config.sRedDieHomeMap);
  g_Config.sRedDieHomeMap := Config.ReadString('Setup', 'RedDieHomeMap',
    g_Config.sRedDieHomeMap);

  if Config.ReadInteger('Setup', 'RedDieHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'RedDieHomeX', g_Config.nRedDieHomeX);
  g_Config.nRedDieHomeX := Config.ReadInteger('Setup', 'RedDieHomeX',
    g_Config.nRedDieHomeX);

  if Config.ReadInteger('Setup', 'RedDieHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'RedDieHomeY', g_Config.nRedDieHomeY);
  g_Config.nRedDieHomeY := Config.ReadInteger('Setup', 'RedDieHomeY',
    g_Config.nRedDieHomeY);

  nLoadInteger := Config.ReadInteger('Setup', 'HealthFillTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HealthFillTime', g_Config.nHealthFillTime)
  else
    g_Config.nHealthFillTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SpellFillTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpellFillTime', g_Config.nSpellFillTime)
  else
    g_Config.nSpellFillTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'DecPkPointTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DecPkPointTime', g_Config.dwDecPkPointTime);
  g_Config.dwDecPkPointTime := Config.ReadInteger('Setup', 'DecPkPointTime',
    g_Config.dwDecPkPointTime);

  if Config.ReadInteger('Setup', 'DecPkPointCount', -1) < 0 then
    Config.WriteInteger('Setup', 'DecPkPointCount', g_Config.nDecPkPointCount);
  g_Config.nDecPkPointCount := Config.ReadInteger('Setup', 'DecPkPointCount',
    g_Config.nDecPkPointCount);

  if Config.ReadInteger('Setup', 'PKFlagTime', -1) < 0 then
    Config.WriteInteger('Setup', 'PKFlagTime', g_Config.dwPKFlagTime);
  g_Config.dwPKFlagTime := Config.ReadInteger('Setup', 'PKFlagTime',
    g_Config.dwPKFlagTime);

  if Config.ReadInteger('Setup', 'KillHumanAddPKPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanAddPKPoint',
      g_Config.nKillHumanAddPKPoint);
  g_Config.nKillHumanAddPKPoint := Config.ReadInteger('Setup',
    'KillHumanAddPKPoint', g_Config.nKillHumanAddPKPoint);

  if Config.ReadInteger('Setup', 'KillHumanDecLuckPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanDecLuckPoint',
      g_Config.nKillHumanDecLuckPoint);
  g_Config.nKillHumanDecLuckPoint := Config.ReadInteger('Setup',
    'KillHumanDecLuckPoint', g_Config.nKillHumanDecLuckPoint);

  if Config.ReadInteger('Setup', 'DecLightItemDrugTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DecLightItemDrugTime',
      g_Config.dwDecLightItemDrugTime);
  g_Config.dwDecLightItemDrugTime := Config.ReadInteger('Setup',
    'DecLightItemDrugTime', g_Config.dwDecLightItemDrugTime);

  if Config.ReadInteger('Setup', 'SafeZoneSize', -1) < 0 then
    Config.WriteInteger('Setup', 'SafeZoneSize', g_Config.nSafeZoneSize);
  g_Config.nSafeZoneSize := Config.ReadInteger('Setup', 'SafeZoneSize',
    g_Config.nSafeZoneSize);

  if Config.ReadInteger('Setup', 'StartPointSize', -1) < 0 then
    Config.WriteInteger('Setup', 'StartPointSize', g_Config.nStartPointSize);
  g_Config.nStartPointSize := Config.ReadInteger('Setup', 'StartPointSize',
    g_Config.nStartPointSize);

  for i := Low(g_Config.ReNewNameColor) to High(g_Config.ReNewNameColor) do begin
    if Config.ReadInteger('Setup', 'ReNewNameColor' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'ReNewNameColor' + IntToStr(i),
        g_Config.ReNewNameColor[i]);
    g_Config.ReNewNameColor[i] := Config.ReadInteger('Setup', 'ReNewNameColor' +
      IntToStr(i), g_Config.ReNewNameColor[i]);
  end;
  if Config.ReadInteger('Setup', 'ReNewNameColorTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ReNewNameColorTime',
      g_Config.dwReNewNameColorTime);
  g_Config.dwReNewNameColorTime := Config.ReadInteger('Setup',
    'ReNewNameColorTime', g_Config.dwReNewNameColorTime);

  if Config.ReadInteger('Setup', 'ReNewChangeColor', -1) < 0 then
    Config.WriteBool('Setup', 'ReNewChangeColor', g_Config.boReNewChangeColor);
  g_Config.boReNewChangeColor := Config.ReadBool('Setup', 'ReNewChangeColor',
    g_Config.boReNewChangeColor);

  if Config.ReadInteger('Setup', 'ReNewLevelClearExp', -1) < 0 then
    Config.WriteBool('Setup', 'ReNewLevelClearExp',
      g_Config.boReNewLevelClearExp);
  g_Config.boReNewLevelClearExp := Config.ReadBool('Setup',
    'ReNewLevelClearExp', g_Config.boReNewLevelClearExp);

  if Config.ReadInteger('Setup', 'GroupMembersMax', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupMembersMax', g_Config.nGroupMembersMax);
  g_Config.nGroupMembersMax := Config.ReadInteger('Setup', 'GroupMembersMax',
    g_Config.nGroupMembersMax);

  if Config.ReadInteger('Setup', 'UPgradeWeaponGetBackTime', -1) < 0 then
    Config.WriteInteger('Setup', 'UPgradeWeaponGetBackTime',
      g_Config.dwUPgradeWeaponGetBackTime);
  g_Config.dwUPgradeWeaponGetBackTime := Config.ReadInteger('Setup',
    'UPgradeWeaponGetBackTime', g_Config.dwUPgradeWeaponGetBackTime);

  if Config.ReadInteger('Setup', 'ClearExpireUpgradeWeaponDays', -1) < 0 then
    Config.WriteInteger('Setup', 'ClearExpireUpgradeWeaponDays',
      g_Config.nClearExpireUpgradeWeaponDays);
  g_Config.nClearExpireUpgradeWeaponDays := Config.ReadInteger('Setup',
    'ClearExpireUpgradeWeaponDays', g_Config.nClearExpireUpgradeWeaponDays);

  if Config.ReadInteger('Setup', 'UpgradeWeaponPrice', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponPrice', g_Config.nUpgradeWeaponPrice);
  g_Config.nUpgradeWeaponPrice := Config.ReadInteger('Setup',
    'UpgradeWeaponPrice', g_Config.nUpgradeWeaponPrice);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMaxPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMaxPoint',
      g_Config.nUpgradeWeaponMaxPoint);
  g_Config.nUpgradeWeaponMaxPoint := Config.ReadInteger('Setup',
    'UpgradeWeaponMaxPoint', g_Config.nUpgradeWeaponMaxPoint);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCRate',
      g_Config.nUpgradeWeaponDCRate);
  g_Config.nUpgradeWeaponDCRate := Config.ReadInteger('Setup',
    'UpgradeWeaponDCRate', g_Config.nUpgradeWeaponDCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCTwoPointRate',
      g_Config.nUpgradeWeaponDCTwoPointRate);
  g_Config.nUpgradeWeaponDCTwoPointRate := Config.ReadInteger('Setup',
    'UpgradeWeaponDCTwoPointRate', g_Config.nUpgradeWeaponDCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCThreePointRate',
      g_Config.nUpgradeWeaponDCThreePointRate);
  g_Config.nUpgradeWeaponDCThreePointRate := Config.ReadInteger('Setup',
    'UpgradeWeaponDCThreePointRate', g_Config.nUpgradeWeaponDCThreePointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCRate',
      g_Config.nUpgradeWeaponMCRate);
  g_Config.nUpgradeWeaponMCRate := Config.ReadInteger('Setup',
    'UpgradeWeaponMCRate', g_Config.nUpgradeWeaponMCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCTwoPointRate',
      g_Config.nUpgradeWeaponMCTwoPointRate);
  g_Config.nUpgradeWeaponMCTwoPointRate := Config.ReadInteger('Setup',
    'UpgradeWeaponMCTwoPointRate', g_Config.nUpgradeWeaponMCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCThreePointRate',
      g_Config.nUpgradeWeaponMCThreePointRate);
  g_Config.nUpgradeWeaponMCThreePointRate := Config.ReadInteger('Setup',
    'UpgradeWeaponMCThreePointRate', g_Config.nUpgradeWeaponMCThreePointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCRate',
      g_Config.nUpgradeWeaponSCRate);
  g_Config.nUpgradeWeaponSCRate := Config.ReadInteger('Setup',
    'UpgradeWeaponSCRate', g_Config.nUpgradeWeaponSCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCTwoPointRate',
      g_Config.nUpgradeWeaponSCTwoPointRate);
  g_Config.nUpgradeWeaponSCTwoPointRate := Config.ReadInteger('Setup',
    'UpgradeWeaponSCTwoPointRate', g_Config.nUpgradeWeaponSCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCThreePointRate',
      g_Config.nUpgradeWeaponSCThreePointRate);
  g_Config.nUpgradeWeaponSCThreePointRate := Config.ReadInteger('Setup',
    'UpgradeWeaponSCThreePointRate', g_Config.nUpgradeWeaponSCThreePointRate);

  if Config.ReadInteger('Setup', 'BuildGuild', -1) < 0 then
    Config.WriteInteger('Setup', 'BuildGuild', g_Config.nBuildGuildPrice);
  g_Config.nBuildGuildPrice := Config.ReadInteger('Setup', 'BuildGuild',
    g_Config.nBuildGuildPrice);

  if Config.ReadInteger('Setup', 'MakeDurg', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeDurg', g_Config.nMakeDurgPrice);
  g_Config.nMakeDurgPrice := Config.ReadInteger('Setup', 'MakeDurg',
    g_Config.nMakeDurgPrice);

  if Config.ReadInteger('Setup', 'GuildWarFee', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildWarFee', g_Config.nGuildWarPrice);
  g_Config.nGuildWarPrice := Config.ReadInteger('Setup', 'GuildWarFee',
    g_Config.nGuildWarPrice);

  if Config.ReadInteger('Setup', 'HireGuard', -1) < 0 then
    Config.WriteInteger('Setup', 'HireGuard', g_Config.nHireGuardPrice);
  g_Config.nHireGuardPrice := Config.ReadInteger('Setup', 'HireGuard',
    g_Config.nHireGuardPrice);

  if Config.ReadInteger('Setup', 'HireArcher', -1) < 0 then
    Config.WriteInteger('Setup', 'HireArcher', g_Config.nHireArcherPrice);
  g_Config.nHireArcherPrice := Config.ReadInteger('Setup', 'HireArcher',
    g_Config.nHireArcherPrice);

  if Config.ReadInteger('Setup', 'RepairDoor', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairDoor', g_Config.nRepairDoorPrice);
  g_Config.nRepairDoorPrice := Config.ReadInteger('Setup', 'RepairDoor',
    g_Config.nRepairDoorPrice);

  if Config.ReadInteger('Setup', 'RepairWall', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairWall', g_Config.nRepairWallPrice);
  g_Config.nRepairWallPrice := Config.ReadInteger('Setup', 'RepairWall',
    g_Config.nRepairWallPrice);

  if Config.ReadInteger('Setup', 'CastleMemberPriceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleMemberPriceRate',
      g_Config.nCastleMemberPriceRate);
  g_Config.nCastleMemberPriceRate := Config.ReadInteger('Setup',
    'CastleMemberPriceRate', g_Config.nCastleMemberPriceRate);

  if Config.ReadInteger('Setup', 'CastleGoldMax', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleGoldMax', g_Config.nCastleGoldMax);
  g_Config.nCastleGoldMax := Config.ReadInteger('Setup', 'CastleGoldMax',
    g_Config.nCastleGoldMax);

  if Config.ReadInteger('Setup', 'CastleOneDayGold', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleOneDayGold',
      g_Config.nCastleOneDayGold);
  g_Config.nCastleOneDayGold := Config.ReadInteger('Setup', 'CastleOneDayGold',
    g_Config.nCastleOneDayGold);

  if Config.ReadString('Setup', 'CastleName', '') = '' then
    Config.WriteString('Setup', 'CastleName', g_Config.sCASTLENAME);
  g_Config.sCASTLENAME := Config.ReadString('Setup', 'CastleName',
    g_Config.sCASTLENAME);

  if Config.ReadString('Setup', 'CastleHomeMap', '') = '' then
    Config.WriteString('Setup', 'CastleHomeMap', g_Config.sCastleHomeMap);
  g_Config.sCastleHomeMap := Config.ReadString('Setup', 'CastleHomeMap',
    g_Config.sCastleHomeMap);

  if Config.ReadInteger('Setup', 'CastleHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleHomeX', g_Config.nCastleHomeX);
  g_Config.nCastleHomeX := Config.ReadInteger('Setup', 'CastleHomeX',
    g_Config.nCastleHomeX);

  if Config.ReadInteger('Setup', 'CastleHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleHomeY', g_Config.nCastleHomeY);
  g_Config.nCastleHomeY := Config.ReadInteger('Setup', 'CastleHomeY',
    g_Config.nCastleHomeY);

  if Config.ReadInteger('Setup', 'CastleWarRangeX', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarRangeX', g_Config.nCastleWarRangeX);
  g_Config.nCastleWarRangeX := Config.ReadInteger('Setup', 'CastleWarRangeX',
    g_Config.nCastleWarRangeX);

  if Config.ReadInteger('Setup', 'CastleWarRangeY', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarRangeY', g_Config.nCastleWarRangeY);
  g_Config.nCastleWarRangeY := Config.ReadInteger('Setup', 'CastleWarRangeY',
    g_Config.nCastleWarRangeY);

  if Config.ReadInteger('Setup', 'CastleTaxRate', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleTaxRate', g_Config.nCastleTaxRate);
  g_Config.nCastleTaxRate := Config.ReadInteger('Setup', 'CastleTaxRate',
    g_Config.nCastleTaxRate);

  if Config.ReadInteger('Setup', 'CastleGetAllNpcTax', -1) < 0 then
    Config.WriteBool('Setup', 'CastleGetAllNpcTax', g_Config.boGetAllNpcTax);
  g_Config.boGetAllNpcTax := Config.ReadBool('Setup', 'CastleGetAllNpcTax',
    g_Config.boGetAllNpcTax);

  nLoadInteger := Config.ReadInteger('Setup', 'PersonShopSellRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PersonShopSellRate', g_Config.nPersonShopSellRate)
  else
    g_Config.nPersonShopSellRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PersonShopBuyRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PersonShopBuyRate', g_Config.nPersonShopBuyRate)
  else
    g_Config.nPersonShopBuyRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagicAttackMonsteRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicAttackMonsteRate', g_Config.nMagicAttackMonsteRate)
  else
    g_Config.nMagicAttackMonsteRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'GenMonRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GenMonRate', g_Config.nMonGenRate)
  else
    g_Config.nMonGenRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonRandRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProcessMonRandRate',
      g_Config.nProcessMonRandRate)
  else
    g_Config.nProcessMonRandRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonLimitCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProcessMonLimitCount',
      g_Config.nProcessMonLimitCount)
  else
    g_Config.nProcessMonLimitCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'HumanMaxGold', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanMaxGold', g_Config.nHumanMaxGold);
  g_Config.nHumanMaxGold := Config.ReadInteger('Setup', 'HumanMaxGold',
    g_Config.nHumanMaxGold);

  if Config.ReadInteger('Setup', 'HumanTryModeMaxGold', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanTryModeMaxGold',
      g_Config.nHumanTryModeMaxGold);
  g_Config.nHumanTryModeMaxGold := Config.ReadInteger('Setup',
    'HumanTryModeMaxGold', g_Config.nHumanTryModeMaxGold);

  if Config.ReadInteger('Setup', 'TryModeLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'TryModeLevel', g_Config.nTryModeLevel);
  g_Config.nTryModeLevel := Config.ReadInteger('Setup', 'TryModeLevel',
    g_Config.nTryModeLevel);

  if Config.ReadInteger('Setup', 'TryModeUseStorage', -1) < 0 then
    Config.WriteBool('Setup', 'TryModeUseStorage',
      g_Config.boTryModeUseStorage);
  g_Config.boTryModeUseStorage := Config.ReadBool('Setup', 'TryModeUseStorage',
    g_Config.boTryModeUseStorage);

  if Config.ReadInteger('Setup', 'ShutRedMsgShowGMName', -1) < 0 then
    Config.WriteBool('Setup', 'ShutRedMsgShowGMName',
      g_Config.boShutRedMsgShowGMName);
  g_Config.boShutRedMsgShowGMName := Config.ReadBool('Setup',
    'ShutRedMsgShowGMName', g_Config.boShutRedMsgShowGMName);

  if Config.ReadInteger('Setup', 'ShowMakeItemMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowMakeItemMsg', g_Config.boShowMakeItemMsg);
  g_Config.boShowMakeItemMsg := Config.ReadBool('Setup', 'ShowMakeItemMsg',
    g_Config.boShowMakeItemMsg);

  if Config.ReadInteger('Setup', 'ShowGuildName', -1) < 0 then
    Config.WriteBool('Setup', 'ShowGuildName', g_Config.boShowGuildName);
  g_Config.boShowGuildName := Config.ReadBool('Setup', 'ShowGuildName',
    g_Config.boShowGuildName);

  if Config.ReadInteger('Setup', 'ShowRankLevelName', -1) < 0 then
    Config.WriteBool('Setup', 'ShowRankLevelName',
      g_Config.boShowRankLevelName);
  g_Config.boShowRankLevelName := Config.ReadBool('Setup', 'ShowRankLevelName',
    g_Config.boShowRankLevelName);

  if Config.ReadInteger('Setup', 'OpenArmStrengthen', -1) < 0 then
    Config.WriteBool('Setup', 'OpenArmStrengthen',
      g_Config.boOpenArmStrengthen);
  g_Config.boOpenArmStrengthen := Config.ReadBool('Setup', 'OpenArmStrengthen',
    g_Config.boOpenArmStrengthen);

  if Config.ReadInteger('Setup', 'OpenItemFlute', -1) < 0 then
    Config.WriteBool('Setup', 'OpenItemFlute',
      g_Config.boOpenItemFlute);
  g_Config.boOpenItemFlute := Config.ReadBool('Setup', 'OpenItemFlute',
    g_Config.boOpenItemFlute);

  if Config.ReadInteger('Setup', 'MonSayMsg', -1) < 0 then
    Config.WriteBool('Setup', 'MonSayMsg', g_Config.boMonSayMsg);
  g_Config.boMonSayMsg := Config.ReadBool('Setup', 'MonSayMsg',
    g_Config.boMonSayMsg);

  if Config.ReadInteger('Setup', 'SayMsgMaxLen', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgMaxLen', g_Config.nSayMsgMaxLen);
  g_Config.nSayMsgMaxLen := Config.ReadInteger('Setup', 'SayMsgMaxLen',
    g_Config.nSayMsgMaxLen);

  if Config.ReadInteger('Setup', 'SayMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgTime', g_Config.dwSayMsgTime);
  g_Config.dwSayMsgTime := Config.ReadInteger('Setup', 'SayMsgTime',
    g_Config.dwSayMsgTime);

  if Config.ReadInteger('Setup', 'SayMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgCount', g_Config.nSayMsgCount);
  g_Config.nSayMsgCount := Config.ReadInteger('Setup', 'SayMsgCount',
    g_Config.nSayMsgCount);

  if Config.ReadInteger('Setup', 'DisableSayMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DisableSayMsgTime',
      g_Config.dwDisableSayMsgTime);
  g_Config.dwDisableSayMsgTime := Config.ReadInteger('Setup',
    'DisableSayMsgTime', g_Config.dwDisableSayMsgTime);

  if Config.ReadInteger('Setup', 'SayRedMsgMaxLen', -1) < 0 then
    Config.WriteInteger('Setup', 'SayRedMsgMaxLen', g_Config.nSayRedMsgMaxLen);
  g_Config.nSayRedMsgMaxLen := Config.ReadInteger('Setup', 'SayRedMsgMaxLen',
    g_Config.nSayRedMsgMaxLen);

  if Config.ReadInteger('Setup', 'CanShoutMsgLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'CanShoutMsgLevel',
      g_Config.nCanShoutMsgLevel);
  g_Config.nCanShoutMsgLevel := Config.ReadInteger('Setup', 'CanShoutMsgLevel',
    g_Config.nCanShoutMsgLevel);

  if Config.ReadInteger('Setup', 'StartPermission', -1) < 0 then
    Config.WriteInteger('Setup', 'StartPermission', g_Config.nStartPermission);
  g_Config.nStartPermission := Config.ReadInteger('Setup', 'StartPermission',
    g_Config.nStartPermission);

  if Config.ReadInteger('Setup', 'SendRefMsgRange', -1) < 0 then
    Config.WriteInteger('Setup', 'SendRefMsgRange', g_Config.nSendRefMsgRange);
  g_Config.nSendRefMsgRange := Config.ReadInteger('Setup', 'SendRefMsgRange',
    g_Config.nSendRefMsgRange);

  {if Config.ReadInteger('Setup', 'PullulatePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'PullulatePointRate', g_Config.nPullulatePointRate);
  g_Config.nPullulatePointRate := Config.ReadInteger('Setup', 'PullulatePointRate',
    g_Config.nPullulatePointRate); }

  if Config.ReadInteger('Setup', 'DecLampDura', -1) < 0 then
    Config.WriteBool('Setup', 'DecLampDura', g_Config.boDecLampDura);
  g_Config.boDecLampDura := Config.ReadBool('Setup', 'DecLampDura',
    g_Config.boDecLampDura);

  if Config.ReadInteger('Setup', 'HungerSystem', -1) < 0 then
    Config.WriteBool('Setup', 'HungerSystem', g_Config.boHungerSystem);
  g_Config.boHungerSystem := Config.ReadBool('Setup', 'HungerSystem',
    g_Config.boHungerSystem);

  if Config.ReadInteger('Setup', 'HungerDecHP', -1) < 0 then
    Config.WriteBool('Setup', 'HungerDecHP', g_Config.boHungerDecHP);
  g_Config.boHungerDecHP := Config.ReadBool('Setup', 'HungerDecHP',
    g_Config.boHungerDecHP);

  if Config.ReadInteger('Setup', 'HungerDecPower', -1) < 0 then
    Config.WriteBool('Setup', 'HungerDecPower', g_Config.boHungerDecPower);
  g_Config.boHungerDecPower := Config.ReadBool('Setup', 'HungerDecPower',
    g_Config.boHungerDecPower);

  if Config.ReadInteger('Setup', 'DiableHumanRun', -1) < 0 then
    Config.WriteBool('Setup', 'DiableHumanRun', g_Config.boDiableHumanRun);
  g_Config.boDiableHumanRun := Config.ReadBool('Setup', 'DiableHumanRun',
    g_Config.boDiableHumanRun);

  if Config.ReadInteger('Setup', 'RunHuman', -1) < 0 then
    Config.WriteBool('Setup', 'RunHuman', g_Config.boRUNHUMAN);
  g_Config.boRUNHUMAN := Config.ReadBool('Setup', 'RunHuman',
    g_Config.boRUNHUMAN);

  if Config.ReadInteger('Setup', 'RunMon', -1) < 0 then
    Config.WriteBool('Setup', 'RunMon', g_Config.boRUNMON);
  g_Config.boRUNMON := Config.ReadBool('Setup', 'RunMon', g_Config.boRUNMON);

  if Config.ReadInteger('Setup', 'RunNpc', -1) < 0 then
    Config.WriteBool('Setup', 'RunNpc', g_Config.boRunNpc);
  g_Config.boRunNpc := Config.ReadBool('Setup', 'RunNpc', g_Config.boRunNpc);

  nLoadInteger := Config.ReadInteger('Setup', 'RunGuard', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'RunGuard', g_Config.boRunGuard)
  else
    g_Config.boRunGuard := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'WarDisableHumanRun', -1) < 0 then
    Config.WriteBool('Setup', 'WarDisableHumanRun', g_Config.boWarDisHumRun);
  g_Config.boWarDisHumRun := Config.ReadBool('Setup', 'WarDisableHumanRun',
    g_Config.boWarDisHumRun);

  if Config.ReadInteger('Setup', 'GMRunAll', -1) < 0 then
    Config.WriteBool('Setup', 'GMRunAll', g_Config.boGMRunAll);
  g_Config.boGMRunAll := Config.ReadBool('Setup', 'GMRunAll',
    g_Config.boGMRunAll);

  if Config.ReadInteger('Setup', 'SafeAreaLimitedRun', -1) < 0 then
    Config.WriteBool('Setup', 'SafeAreaLimitedRun', g_Config.boSafeAreaLimited);
  g_Config.boSafeAreaLimited := Config.ReadBool('Setup', 'SafeAreaLimitedRun',
    g_Config.boSafeAreaLimited);

  if Config.ReadInteger('Setup', 'BoneFammCount', -1) < 0 then
    Config.WriteInteger('Setup', 'BoneFammCount', g_Config.nBoneFammCount);
  g_Config.nBoneFammCount := Config.ReadInteger('Setup', 'BoneFammCount',
    g_Config.nBoneFammCount);

  for i := Low(g_Config.BoneFammArray) to High(g_Config.BoneFammArray) do begin
    if Config.ReadInteger('Setup', 'BoneFammHumLevel' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammHumLevel' + IntToStr(i),
        g_Config.BoneFammArray[i].nHumLevel);
    g_Config.BoneFammArray[i].nHumLevel := Config.ReadInteger('Setup',
      'BoneFammHumLevel' + IntToStr(i), g_Config.BoneFammArray[i].nHumLevel);

    if Config.ReadString('Names', 'BoneFamm' + IntToStr(i), '') = '' then
      Config.WriteString('Names', 'BoneFamm' + IntToStr(i),
        g_Config.BoneFammArray[i].sMonName);
    g_Config.BoneFammArray[i].sMonName := Config.ReadString('Names', 'BoneFamm'
      + IntToStr(i), g_Config.BoneFammArray[i].sMonName);

    if Config.ReadInteger('Setup', 'BoneFammCount' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammCount' + IntToStr(i),
        g_Config.BoneFammArray[i].nCount);
    g_Config.BoneFammArray[i].nCount := Config.ReadInteger('Setup',
      'BoneFammCount' + IntToStr(i), g_Config.BoneFammArray[i].nCount);

    if Config.ReadInteger('Setup', 'BoneFammLevel' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammLevel' + IntToStr(i),
        g_Config.BoneFammArray[i].nLevel);
    g_Config.BoneFammArray[i].nLevel := Config.ReadInteger('Setup',
      'BoneFammLevel' + IntToStr(i), g_Config.BoneFammArray[i].nLevel);
  end;

  if Config.ReadInteger('Setup', 'DogzCount', -1) < 0 then
    Config.WriteInteger('Setup', 'DogzCount', g_Config.nDogzCount);
  g_Config.nDogzCount := Config.ReadInteger('Setup', 'DogzCount', g_Config.nDogzCount);

  for i := Low(g_Config.DogzArray) to High(g_Config.DogzArray) do begin
    if Config.ReadInteger('Setup', 'DogzHumLevel' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzHumLevel' + IntToStr(i),
        g_Config.DogzArray[i].nHumLevel);
    g_Config.DogzArray[i].nHumLevel := Config.ReadInteger('Setup', 'DogzHumLevel'
      + IntToStr(i), g_Config.DogzArray[i].nHumLevel);

    if Config.ReadString('Names', 'Dogz' + IntToStr(i), '') = '' then
      Config.WriteString('Names', 'Dogz' + IntToStr(i),
        g_Config.DogzArray[i].sMonName);
    g_Config.DogzArray[i].sMonName := Config.ReadString('Names', 'Dogz' +
      IntToStr(i), g_Config.DogzArray[i].sMonName);

    if Config.ReadInteger('Setup', 'DogzCount' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzCount' + IntToStr(i),
        g_Config.DogzArray[i].nCount);
    g_Config.DogzArray[i].nCount := Config.ReadInteger('Setup', 'DogzCount' +
      IntToStr(i), g_Config.DogzArray[i].nCount);

    if Config.ReadInteger('Setup', 'DogzLevel' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzLevel' + IntToStr(i),
        g_Config.DogzArray[i].nLevel);
    g_Config.DogzArray[i].nLevel := Config.ReadInteger('Setup', 'DogzLevel' +
      IntToStr(i), g_Config.DogzArray[i].nLevel);
  end;

  if Config.ReadInteger('Setup', 'MoonSpiritCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MoonSpiritCount', g_Config.nMoonSpiritCount);
  g_Config.nMoonSpiritCount := Config.ReadInteger('Setup', 'MoonSpiritCount', g_Config.nMoonSpiritCount);

  for i := Low(g_Config.MoonSpiritArray) to High(g_Config.MoonSpiritArray) do begin
    if Config.ReadInteger('Setup', 'MoonSpiritHumLevel' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'MoonSpiritHumLevel' + IntToStr(i),
        g_Config.MoonSpiritArray[i].nHumLevel);
    g_Config.MoonSpiritArray[i].nHumLevel := Config.ReadInteger('Setup', 'MoonSpiritHumLevel'
      + IntToStr(i), g_Config.MoonSpiritArray[i].nHumLevel);

    if Config.ReadString('Names', 'MoonSpirit' + IntToStr(i), '') = '' then
      Config.WriteString('Names', 'MoonSpirit' + IntToStr(i),
        g_Config.MoonSpiritArray[i].sMonName);
    g_Config.MoonSpiritArray[i].sMonName := Config.ReadString('Names', 'MoonSpirit' +
      IntToStr(i), g_Config.MoonSpiritArray[i].sMonName);

    if Config.ReadInteger('Setup', 'MoonSpiritCount' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'MoonSpiritCount' + IntToStr(i),
        g_Config.MoonSpiritArray[i].nCount);
    g_Config.MoonSpiritArray[i].nCount := Config.ReadInteger('Setup', 'MoonSpiritCount' +
      IntToStr(i), g_Config.MoonSpiritArray[i].nCount);

    if Config.ReadInteger('Setup', 'MoonSpiritLevel' + IntToStr(i), -1) < 0 then
      Config.WriteInteger('Setup', 'MoonSpiritLevel' + IntToStr(i),
        g_Config.MoonSpiritArray[i].nLevel);
    g_Config.MoonSpiritArray[i].nLevel := Config.ReadInteger('Setup', 'MoonSpiritLevel' +
      IntToStr(i), g_Config.MoonSpiritArray[i].nLevel);
  end;


  if Config.ReadInteger('Setup', 'TryDealTime', -1) < 0 then
    Config.WriteInteger('Setup', 'TryDealTime', g_Config.dwTryDealTime);
  g_Config.dwTryDealTime := Config.ReadInteger('Setup', 'TryDealTime',
    g_Config.dwTryDealTime);

  if Config.ReadInteger('Setup', 'DealOKTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DealOKTime', g_Config.dwDealOKTime);
  g_Config.dwDealOKTime := Config.ReadInteger('Setup', 'DealOKTime',
    g_Config.dwDealOKTime);

  if Config.ReadInteger('Setup', 'CanNotGetBackDeal', -1) < 0 then
    Config.WriteBool('Setup', 'CanNotGetBackDeal',
      g_Config.boCanNotGetBackDeal);
  g_Config.boCanNotGetBackDeal := Config.ReadBool('Setup', 'CanNotGetBackDeal',
    g_Config.boCanNotGetBackDeal);

  if Config.ReadInteger('Setup', 'DisableDeal', -1) < 0 then
    Config.WriteBool('Setup', 'DisableDeal', g_Config.boDisableDeal);
  g_Config.boDisableDeal := Config.ReadBool('Setup', 'DisableDeal',
    g_Config.boDisableDeal);

  if Config.ReadInteger('Setup', 'MasterOKLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKLevel', g_Config.nMasterOKLevel);
  g_Config.nMasterOKLevel := Config.ReadInteger('Setup', 'MasterOKLevel',
    g_Config.nMasterOKLevel);

  if Config.ReadInteger('Setup', 'MasterOKCreditPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKCreditPoint',
      g_Config.nMasterOKCreditPoint);
  g_Config.nMasterOKCreditPoint := Config.ReadInteger('Setup',
    'MasterOKCreditPoint', g_Config.nMasterOKCreditPoint);

  if Config.ReadInteger('Setup', 'MasterOKBonusPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKBonusPoint',
      g_Config.nMasterOKBonusPoint);
  g_Config.nMasterOKBonusPoint := Config.ReadInteger('Setup',
    'MasterOKBonusPoint', g_Config.nMasterOKBonusPoint);

  if Config.ReadInteger('Setup', 'PKProtect', -1) < 0 then
    Config.WriteBool('Setup', 'PKProtect', g_Config.boPKLevelProtect);
  g_Config.boPKLevelProtect := Config.ReadBool('Setup', 'PKProtect',
    g_Config.boPKLevelProtect);

  if Config.ReadInteger('Setup', 'PKProtectLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'PKProtectLevel', g_Config.nPKProtectLevel);
  g_Config.nPKProtectLevel := Config.ReadInteger('Setup', 'PKProtectLevel',
    g_Config.nPKProtectLevel);

  if Config.ReadInteger('Setup', 'RedPKProtectLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'RedPKProtectLevel',
      g_Config.nRedPKProtectLevel);
  g_Config.nRedPKProtectLevel := Config.ReadInteger('Setup',
    'RedPKProtectLevel', g_Config.nRedPKProtectLevel);

  if Config.ReadInteger('Setup', 'ItemPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemPowerRate', g_Config.nItemPowerRate);
  g_Config.nItemPowerRate := Config.ReadInteger('Setup', 'ItemPowerRate',
    g_Config.nItemPowerRate);

  if Config.ReadInteger('Setup', 'ItemExpRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemExpRate', g_Config.nItemExpRate);
  g_Config.nItemExpRate := Config.ReadInteger('Setup', 'ItemExpRate',
    g_Config.nItemExpRate);

  if Config.ReadInteger('Setup', 'ScriptGotoCountLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ScriptGotoCountLimit',
      g_Config.nScriptGotoCountLimit);
  g_Config.nScriptGotoCountLimit := Config.ReadInteger('Setup',
    'ScriptGotoCountLimit', g_Config.nScriptGotoCountLimit);


  if Config.ReadInteger('Setup', 'btHearMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btHearMsgFColor', g_Config.btHearMsgFColor);
  g_Config.btHearMsgFColor := Config.ReadInteger('Setup', 'btHearMsgFColor',
    g_Config.btHearMsgFColor);

  if Config.ReadInteger('Setup', 'btHearMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btHearMsgBColor', g_Config.btHearMsgBColor);
  g_Config.btHearMsgBColor := Config.ReadInteger('Setup', 'btHearMsgBColor',
    g_Config.btHearMsgBColor);

  if Config.ReadInteger('Setup', 'btWhisperMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btWhisperMsgFColor',
      g_Config.btWhisperMsgFColor);
  g_Config.btWhisperMsgFColor := Config.ReadInteger('Setup',
    'btWhisperMsgFColor', g_Config.btWhisperMsgFColor);

  if Config.ReadInteger('Setup', 'btWhisperMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btWhisperMsgBColor',
      g_Config.btWhisperMsgBColor);
  g_Config.btWhisperMsgBColor := Config.ReadInteger('Setup',
    'btWhisperMsgBColor', g_Config.btWhisperMsgBColor);

  if Config.ReadInteger('Setup', 'btGMWhisperMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGMWhisperMsgFColor',
      g_Config.btGMWhisperMsgFColor);
  g_Config.btGMWhisperMsgFColor := Config.ReadInteger('Setup',
    'btGMWhisperMsgFColor', g_Config.btGMWhisperMsgFColor);

  if Config.ReadInteger('Setup', 'btGMWhisperMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGMWhisperMsgBColor',
      g_Config.btGMWhisperMsgBColor);
  g_Config.btGMWhisperMsgBColor := Config.ReadInteger('Setup',
    'btGMWhisperMsgBColor', g_Config.btGMWhisperMsgBColor);

  if Config.ReadInteger('Setup', 'btCryMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btCryMsgFColor', g_Config.btCryMsgFColor);
  g_Config.btCryMsgFColor := Config.ReadInteger('Setup', 'btCryMsgFColor',
    g_Config.btCryMsgFColor);

  if Config.ReadInteger('Setup', 'btCryMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btCryMsgBColor', g_Config.btCryMsgBColor);
  g_Config.btCryMsgBColor := Config.ReadInteger('Setup', 'btCryMsgBColor',
    g_Config.btCryMsgBColor);

  if Config.ReadInteger('Setup', 'btGreenMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGreenMsgFColor', g_Config.btGreenMsgFColor);
  g_Config.btGreenMsgFColor := Config.ReadInteger('Setup', 'btGreenMsgFColor',
    g_Config.btGreenMsgFColor);

  if Config.ReadInteger('Setup', 'btGreenMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGreenMsgBColor', g_Config.btGreenMsgBColor);
  g_Config.btGreenMsgBColor := Config.ReadInteger('Setup', 'btGreenMsgBColor',
    g_Config.btGreenMsgBColor);

  if Config.ReadInteger('Setup', 'btBlueMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btBlueMsgFColor', g_Config.btBlueMsgFColor);
  g_Config.btBlueMsgFColor := Config.ReadInteger('Setup', 'btBlueMsgFColor',
    g_Config.btBlueMsgFColor);

  if Config.ReadInteger('Setup', 'btBlueMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btBlueMsgBColor', g_Config.btBlueMsgBColor);
  g_Config.btBlueMsgBColor := Config.ReadInteger('Setup', 'btBlueMsgBColor',
    g_Config.btBlueMsgBColor);

  if Config.ReadInteger('Setup', 'btRedMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btRedMsgFColor', g_Config.btRedMsgFColor);
  g_Config.btRedMsgFColor := Config.ReadInteger('Setup', 'btRedMsgFColor',
    g_Config.btRedMsgFColor);

  if Config.ReadInteger('Setup', 'btRedMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btRedMsgBColor', g_Config.btRedMsgBColor);
  g_Config.btRedMsgBColor := Config.ReadInteger('Setup', 'btRedMsgBColor',
    g_Config.btRedMsgBColor);

  if Config.ReadInteger('Setup', 'btGuildMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGuildMsgFColor', g_Config.btGuildMsgFColor);
  g_Config.btGuildMsgFColor := Config.ReadInteger('Setup', 'btGuildMsgFColor',
    g_Config.btGuildMsgFColor);

  if Config.ReadInteger('Setup', 'btGuildMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGuildMsgBColor', g_Config.btGuildMsgBColor);
  g_Config.btGuildMsgBColor := Config.ReadInteger('Setup', 'btGuildMsgBColor',
    g_Config.btGuildMsgBColor);

  if Config.ReadInteger('Setup', 'btGroupMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGroupMsgFColor', g_Config.btGroupMsgFColor);
  g_Config.btGroupMsgFColor := Config.ReadInteger('Setup', 'btGroupMsgFColor',
    g_Config.btGroupMsgFColor);

  if Config.ReadInteger('Setup', 'btGroupMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btGroupMsgBColor', g_Config.btGroupMsgBColor);
  g_Config.btGroupMsgBColor := Config.ReadInteger('Setup', 'btGroupMsgBColor',
    g_Config.btGroupMsgBColor);

  if Config.ReadInteger('Setup', 'btCustMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btCustMsgFColor', g_Config.btCustMsgFColor);
  g_Config.btCustMsgFColor := Config.ReadInteger('Setup', 'btCustMsgFColor',
    g_Config.btCustMsgFColor);

  if Config.ReadInteger('Setup', 'btCustMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btCustMsgBColor', g_Config.btCustMsgBColor);
  g_Config.btCustMsgBColor := Config.ReadInteger('Setup', 'btCustMsgBColor',
    g_Config.btCustMsgBColor);

  if Config.ReadInteger('Setup', 'btCudtMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btCudtMsgFColor', g_Config.btCudtMsgFColor);
  g_Config.btCudtMsgFColor := Config.ReadInteger('Setup', 'btCudtMsgFColor',
    g_Config.btCudtMsgFColor);

  if Config.ReadInteger('Setup', 'btCudtMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'btCudtMsgBColor', g_Config.btCudtMsgBColor);
  g_Config.btCudtMsgBColor := Config.ReadInteger('Setup', 'btCudtMsgBColor',
    g_Config.btCudtMsgBColor);

  if Config.ReadInteger('Setup', 'MonRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'MonRandomAddValue', g_Config.nMonRandomAddValue);
  g_Config.nMonRandomAddValue := Config.ReadInteger('Setup',
    'MonRandomAddValue', g_Config.nMonRandomAddValue);

  if Config.ReadInteger('Setup', 'MakeRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeRandomAddValue', g_Config.nMakeRandomAddValue);
  g_Config.nMakeRandomAddValue := Config.ReadInteger('Setup',
    'MakeRandomAddValue', g_Config.nMakeRandomAddValue);

  if Config.ReadInteger('Setup', 'NpcMakeRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'NpcMakeRandomAddValue', g_Config.nNpcMakeRandomAddValue);
  g_Config.nNpcMakeRandomAddValue := Config.ReadInteger('Setup', 'NpcMakeRandomAddValue', g_Config.nNpcMakeRandomAddValue);


  if Config.ReadInteger('Setup', 'MonRandomIsOpenShow', -1) < 0 then
    Config.WriteBool('Setup', 'MonRandomIsOpenShow', g_Config.boMonRandomIsOpenShow);
  g_Config.boMonRandomIsOpenShow := Config.ReadBool('Setup', 'MonRandomIsOpenShow', g_Config.boMonRandomIsOpenShow);

  if Config.ReadInteger('Setup', 'MakeRandomIsOpenShow', -1) < 0 then
    Config.WriteBool('Setup', 'MakeRandomIsOpenShow', g_Config.boMakeRandomIsOpenShow);
  g_Config.boMakeRandomIsOpenShow := Config.ReadBool('Setup', 'MakeRandomIsOpenShow', g_Config.boMakeRandomIsOpenShow);

  if Config.ReadInteger('Setup', 'NPCMakeRandomIsOpenShow', -1) < 0 then
    Config.WriteBool('Setup', 'NPCMakeRandomIsOpenShow', g_Config.boNPCMakeRandomIsOpenShow);
  g_Config.boNPCMakeRandomIsOpenShow := Config.ReadBool('Setup', 'NPCMakeRandomIsOpenShow', g_Config.boNPCMakeRandomIsOpenShow);

  if Config.ReadInteger('Setup', 'Flute1RateValue', -1) < 0 then
    Config.WriteInteger('Setup', 'Flute1RateValue', g_Config.nFlute1RateValue);
  g_Config.nFlute1RateValue := Config.ReadInteger('Setup', 'Flute1RateValue', g_Config.nFlute1RateValue);

  if Config.ReadInteger('Setup', 'Flute2RateValue', -1) < 0 then
    Config.WriteInteger('Setup', 'Flute2RateValue', g_Config.nFlute2RateValue);
  g_Config.nFlute2RateValue := Config.ReadInteger('Setup', 'Flute2RateValue', g_Config.nFlute2RateValue);

  if Config.ReadInteger('Setup', 'Flute3RateValue', -1) < 0 then
    Config.WriteInteger('Setup', 'Flute3RateValue', g_Config.nFlute3RateValue);
  g_Config.nFlute3RateValue := Config.ReadInteger('Setup', 'Flute3RateValue', g_Config.nFlute3RateValue);

  if Config.ReadInteger('Setup', 'WuXinMinRateValue', -1) < 0 then
    Config.WriteInteger('Setup', 'WuXinMinRateValue', g_Config.nWuXinMinRate);
  g_Config.nWuXinMinRate := Config.ReadInteger('Setup', 'WuXinMinRateValue', g_Config.nWuXinMinRate);

  if Config.ReadInteger('Setup', 'WuXinMaxRateValue', -1) < 0 then
    Config.WriteInteger('Setup', 'WuXinMaxRateValue', g_Config.nWuXinMaxRate);
  g_Config.nWuXinMaxRate := Config.ReadInteger('Setup', 'WuXinMaxRateValue', g_Config.nWuXinMaxRate);

  //极品属性设置
  if Config.ReadInteger('Setup', 'HelmetACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetACMaxLimit', g_Config.IHelmet.nACMaxLimit);
  g_Config.IHelmet.nACMaxLimit := Config.ReadInteger('Setup', 'HelmetACMaxLimit', g_Config.IHelmet.nACMaxLimit);
  if Config.ReadInteger('Setup', 'HelmetACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetACAddValueRate', g_Config.IHelmet.nACAddValueRate);
  g_Config.IHelmet.nACAddValueRate := Config.ReadInteger('Setup', 'HelmetACAddValueRate', g_Config.IHelmet.nACAddValueRate);
  if Config.ReadInteger('Setup', 'HelmetACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetACAddRate', g_Config.IHelmet.nACAddRate);
  g_Config.IHelmet.nACAddRate := Config.ReadInteger('Setup', 'HelmetACAddRate', g_Config.IHelmet.nACAddRate);

  if Config.ReadInteger('Setup', 'HelmetMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetMACMaxLimit', g_Config.IHelmet.nMACMaxLimit);
  g_Config.IHelmet.nMACMaxLimit := Config.ReadInteger('Setup', 'HelmetMACMaxLimit', g_Config.IHelmet.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'HelmetMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetMACAddValueRate', g_Config.IHelmet.nMACAddValueRate);
  g_Config.IHelmet.nMACAddValueRate := Config.ReadInteger('Setup', 'HelmetMACAddValueRate', g_Config.IHelmet.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'HelmetMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetMACAddRate', g_Config.IHelmet.nMACAddRate);
  g_Config.IHelmet.nMACAddRate := Config.ReadInteger('Setup', 'HelmetMACAddRate', g_Config.IHelmet.nMACAddRate);

  if Config.ReadInteger('Setup', 'HelmetDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetDCMaxLimit', g_Config.IHelmet.nDCMaxLimit);
  g_Config.IHelmet.nDCMaxLimit := Config.ReadInteger('Setup', 'HelmetDCMaxLimit', g_Config.IHelmet.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'HelmetDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetDCAddValueRate', g_Config.IHelmet.nDCAddValueRate);
  g_Config.IHelmet.nDCAddValueRate := Config.ReadInteger('Setup', 'HelmetDCAddValueRate', g_Config.IHelmet.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'HelmetDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetDCAddRate', g_Config.IHelmet.nDCAddRate);
  g_Config.IHelmet.nDCAddRate := Config.ReadInteger('Setup', 'HelmetDCAddRate', g_Config.IHelmet.nDCAddRate);

  if Config.ReadInteger('Setup', 'HelmetMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetMCMaxLimit', g_Config.IHelmet.nMCMaxLimit);
  g_Config.IHelmet.nMCMaxLimit := Config.ReadInteger('Setup', 'HelmetMCMaxLimit', g_Config.IHelmet.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'HelmetMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetMCAddValueRate', g_Config.IHelmet.nMCAddValueRate);
  g_Config.IHelmet.nMCAddValueRate := Config.ReadInteger('Setup', 'HelmetMCAddValueRate', g_Config.IHelmet.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'HelmetMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetMCAddRate', g_Config.IHelmet.nMCAddRate);
  g_Config.IHelmet.nMCAddRate := Config.ReadInteger('Setup', 'HelmetMCAddRate', g_Config.IHelmet.nMCAddRate);

  if Config.ReadInteger('Setup', 'HelmetSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetSCMaxLimit', g_Config.IHelmet.nSCMaxLimit);
  g_Config.IHelmet.nSCMaxLimit := Config.ReadInteger('Setup', 'HelmetSCMaxLimit', g_Config.IHelmet.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'HelmetSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetSCAddValueRate', g_Config.IHelmet.nSCAddValueRate);
  g_Config.IHelmet.nSCAddValueRate := Config.ReadInteger('Setup', 'HelmetSCAddValueRate', g_Config.IHelmet.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'HelmetSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetSCAddRate', g_Config.IHelmet.nSCAddRate);
  g_Config.IHelmet.nSCAddRate := Config.ReadInteger('Setup', 'HelmetSCAddRate', g_Config.IHelmet.nSCAddRate);

  if Config.ReadInteger('Setup', 'HelmetCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetCCMaxLimit', g_Config.IHelmet.nCCMaxLimit);
  g_Config.IHelmet.nCCMaxLimit := Config.ReadInteger('Setup', 'HelmetCCMaxLimit', g_Config.IHelmet.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'HelmetCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetCCAddValueRate', g_Config.IHelmet.nCCAddValueRate);
  g_Config.IHelmet.nCCAddValueRate := Config.ReadInteger('Setup', 'HelmetCCAddValueRate', g_Config.IHelmet.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'HelmetCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelmetCCAddRate', g_Config.IHelmet.nCCAddRate);
  g_Config.IHelmet.nCCAddRate := Config.ReadInteger('Setup', 'HelmetCCAddRate', g_Config.IHelmet.nCCAddRate);

  if Config.ReadInteger('Setup', 'WeaponACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponACMaxLimit', g_Config.IWeapon.nACMaxLimit);
  g_Config.IWeapon.nACMaxLimit := Config.ReadInteger('Setup', 'WeaponACMaxLimit', g_Config.IWeapon.nACMaxLimit);
  if Config.ReadInteger('Setup', 'WeaponACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponACAddValueRate', g_Config.IWeapon.nACAddValueRate);
  g_Config.IWeapon.nACAddValueRate := Config.ReadInteger('Setup', 'WeaponACAddValueRate', g_Config.IWeapon.nACAddValueRate);
  if Config.ReadInteger('Setup', 'WeaponACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponACAddRate', g_Config.IWeapon.nACAddRate);
  g_Config.IWeapon.nACAddRate := Config.ReadInteger('Setup', 'WeaponACAddRate', g_Config.IWeapon.nACAddRate);

  if Config.ReadInteger('Setup', 'WeaponMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMACMaxLimit', g_Config.IWeapon.nMACMaxLimit);
  g_Config.IWeapon.nMACMaxLimit := Config.ReadInteger('Setup', 'WeaponMACMaxLimit', g_Config.IWeapon.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'WeaponMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMACAddValueRate', g_Config.IWeapon.nMACAddValueRate);
  g_Config.IWeapon.nMACAddValueRate := Config.ReadInteger('Setup', 'WeaponMACAddValueRate', g_Config.IWeapon.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'WeaponMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMACAddRate', g_Config.IWeapon.nMACAddRate);
  g_Config.IWeapon.nMACAddRate := Config.ReadInteger('Setup', 'WeaponMACAddRate', g_Config.IWeapon.nMACAddRate);

  if Config.ReadInteger('Setup', 'WeaponDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCMaxLimit', g_Config.IWeapon.nDCMaxLimit);
  g_Config.IWeapon.nDCMaxLimit := Config.ReadInteger('Setup', 'WeaponDCMaxLimit', g_Config.IWeapon.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'WeaponDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCAddValueRate', g_Config.IWeapon.nDCAddValueRate);
  g_Config.IWeapon.nDCAddValueRate := Config.ReadInteger('Setup', 'WeaponDCAddValueRate', g_Config.IWeapon.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'WeaponDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCAddRate', g_Config.IWeapon.nDCAddRate);
  g_Config.IWeapon.nDCAddRate := Config.ReadInteger('Setup', 'WeaponDCAddRate', g_Config.IWeapon.nDCAddRate);

  if Config.ReadInteger('Setup', 'WeaponMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCMaxLimit', g_Config.IWeapon.nMCMaxLimit);
  g_Config.IWeapon.nMCMaxLimit := Config.ReadInteger('Setup', 'WeaponMCMaxLimit', g_Config.IWeapon.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'WeaponMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCAddValueRate', g_Config.IWeapon.nMCAddValueRate);
  g_Config.IWeapon.nMCAddValueRate := Config.ReadInteger('Setup', 'WeaponMCAddValueRate', g_Config.IWeapon.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'WeaponMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCAddRate', g_Config.IWeapon.nMCAddRate);
  g_Config.IWeapon.nMCAddRate := Config.ReadInteger('Setup', 'WeaponMCAddRate', g_Config.IWeapon.nMCAddRate);

  if Config.ReadInteger('Setup', 'WeaponSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCMaxLimit', g_Config.IWeapon.nSCMaxLimit);
  g_Config.IWeapon.nSCMaxLimit := Config.ReadInteger('Setup', 'WeaponSCMaxLimit', g_Config.IWeapon.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'WeaponSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCAddValueRate', g_Config.IWeapon.nSCAddValueRate);
  g_Config.IWeapon.nSCAddValueRate := Config.ReadInteger('Setup', 'WeaponSCAddValueRate', g_Config.IWeapon.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'WeaponSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCAddRate', g_Config.IWeapon.nSCAddRate);
  g_Config.IWeapon.nSCAddRate := Config.ReadInteger('Setup', 'WeaponSCAddRate', g_Config.IWeapon.nSCAddRate);

  if Config.ReadInteger('Setup', 'WeaponCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponCCMaxLimit', g_Config.IWeapon.nCCMaxLimit);
  g_Config.IWeapon.nCCMaxLimit := Config.ReadInteger('Setup', 'WeaponCCMaxLimit', g_Config.IWeapon.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'WeaponCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponCCAddValueRate', g_Config.IWeapon.nCCAddValueRate);
  g_Config.IWeapon.nCCAddValueRate := Config.ReadInteger('Setup', 'WeaponCCAddValueRate', g_Config.IWeapon.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'WeaponCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponCCAddRate', g_Config.IWeapon.nCCAddRate);
  g_Config.IWeapon.nCCAddRate := Config.ReadInteger('Setup', 'WeaponCCAddRate', g_Config.IWeapon.nCCAddRate);

  if Config.ReadInteger('Setup', 'DressACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressACMaxLimit', g_Config.IDress.nACMaxLimit);
  g_Config.IDress.nACMaxLimit := Config.ReadInteger('Setup', 'DressACMaxLimit', g_Config.IDress.nACMaxLimit);
  if Config.ReadInteger('Setup', 'DressACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressACAddValueRate', g_Config.IDress.nACAddValueRate);
  g_Config.IDress.nACAddValueRate := Config.ReadInteger('Setup', 'DressACAddValueRate', g_Config.IDress.nACAddValueRate);
  if Config.ReadInteger('Setup', 'DressACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressACAddRate', g_Config.IDress.nACAddRate);
  g_Config.IDress.nACAddRate := Config.ReadInteger('Setup', 'DressACAddRate', g_Config.IDress.nACAddRate);

  if Config.ReadInteger('Setup', 'DressMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMACMaxLimit', g_Config.IDress.nMACMaxLimit);
  g_Config.IDress.nMACMaxLimit := Config.ReadInteger('Setup', 'DressMACMaxLimit', g_Config.IDress.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'DressMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMACAddValueRate', g_Config.IDress.nMACAddValueRate);
  g_Config.IDress.nMACAddValueRate := Config.ReadInteger('Setup', 'DressMACAddValueRate', g_Config.IDress.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'DressMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMACAddRate', g_Config.IDress.nMACAddRate);
  g_Config.IDress.nMACAddRate := Config.ReadInteger('Setup', 'DressMACAddRate', g_Config.IDress.nMACAddRate);

  if Config.ReadInteger('Setup', 'DressDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCMaxLimit', g_Config.IDress.nDCMaxLimit);
  g_Config.IDress.nDCMaxLimit := Config.ReadInteger('Setup', 'DressDCMaxLimit', g_Config.IDress.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'DressDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddValueRate', g_Config.IDress.nDCAddValueRate);
  g_Config.IDress.nDCAddValueRate := Config.ReadInteger('Setup', 'DressDCAddValueRate', g_Config.IDress.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'DressDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddRate', g_Config.IDress.nDCAddRate);
  g_Config.IDress.nDCAddRate := Config.ReadInteger('Setup', 'DressDCAddRate', g_Config.IDress.nDCAddRate);

  if Config.ReadInteger('Setup', 'DressMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCMaxLimit', g_Config.IDress.nMCMaxLimit);
  g_Config.IDress.nMCMaxLimit := Config.ReadInteger('Setup', 'DressMCMaxLimit', g_Config.IDress.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'DressMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddValueRate', g_Config.IDress.nMCAddValueRate);
  g_Config.IDress.nMCAddValueRate := Config.ReadInteger('Setup', 'DressMCAddValueRate', g_Config.IDress.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'DressMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddRate', g_Config.IDress.nMCAddRate);
  g_Config.IDress.nMCAddRate := Config.ReadInteger('Setup', 'DressMCAddRate', g_Config.IDress.nMCAddRate);

  if Config.ReadInteger('Setup', 'DressSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCMaxLimit', g_Config.IDress.nSCMaxLimit);
  g_Config.IDress.nSCMaxLimit := Config.ReadInteger('Setup', 'DressSCMaxLimit', g_Config.IDress.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'DressSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddValueRate', g_Config.IDress.nSCAddValueRate);
  g_Config.IDress.nSCAddValueRate := Config.ReadInteger('Setup', 'DressSCAddValueRate', g_Config.IDress.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'DressSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddRate', g_Config.IDress.nSCAddRate);
  g_Config.IDress.nSCAddRate := Config.ReadInteger('Setup', 'DressSCAddRate', g_Config.IDress.nSCAddRate);

  if Config.ReadInteger('Setup', 'DressCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressCCMaxLimit', g_Config.IDress.nCCMaxLimit);
  g_Config.IDress.nCCMaxLimit := Config.ReadInteger('Setup', 'DressCCMaxLimit', g_Config.IDress.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'DressCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressCCAddValueRate', g_Config.IDress.nCCAddValueRate);
  g_Config.IDress.nCCAddValueRate := Config.ReadInteger('Setup', 'DressCCAddValueRate', g_Config.IDress.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'DressCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressCCAddRate', g_Config.IDress.nCCAddRate);
  g_Config.IDress.nCCAddRate := Config.ReadInteger('Setup', 'DressCCAddRate', g_Config.IDress.nCCAddRate);

  if Config.ReadInteger('Setup', 'NecklaceACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceACMaxLimit', g_Config.INecklace.nACMaxLimit);
  g_Config.INecklace.nACMaxLimit := Config.ReadInteger('Setup', 'NecklaceACMaxLimit', g_Config.INecklace.nACMaxLimit);
  if Config.ReadInteger('Setup', 'NecklaceACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceACAddValueRate', g_Config.INecklace.nACAddValueRate);
  g_Config.INecklace.nACAddValueRate := Config.ReadInteger('Setup', 'NecklaceACAddValueRate', g_Config.INecklace.nACAddValueRate);
  if Config.ReadInteger('Setup', 'NecklaceACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceACAddRate', g_Config.INecklace.nACAddRate);
  g_Config.INecklace.nACAddRate := Config.ReadInteger('Setup', 'NecklaceACAddRate', g_Config.INecklace.nACAddRate);

  if Config.ReadInteger('Setup', 'NecklaceMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceMACMaxLimit', g_Config.INecklace.nMACMaxLimit);
  g_Config.INecklace.nMACMaxLimit := Config.ReadInteger('Setup', 'NecklaceMACMaxLimit', g_Config.INecklace.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'NecklaceMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceMACAddValueRate', g_Config.INecklace.nMACAddValueRate);
  g_Config.INecklace.nMACAddValueRate := Config.ReadInteger('Setup', 'NecklaceMACAddValueRate', g_Config.INecklace.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'NecklaceMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceMACAddRate', g_Config.INecklace.nMACAddRate);
  g_Config.INecklace.nMACAddRate := Config.ReadInteger('Setup', 'NecklaceMACAddRate', g_Config.INecklace.nMACAddRate);

  if Config.ReadInteger('Setup', 'NecklaceDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceDCMaxLimit', g_Config.INecklace.nDCMaxLimit);
  g_Config.INecklace.nDCMaxLimit := Config.ReadInteger('Setup', 'NecklaceDCMaxLimit', g_Config.INecklace.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'NecklaceDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceDCAddValueRate', g_Config.INecklace.nDCAddValueRate);
  g_Config.INecklace.nDCAddValueRate := Config.ReadInteger('Setup', 'NecklaceDCAddValueRate', g_Config.INecklace.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'NecklaceDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceDCAddRate', g_Config.INecklace.nDCAddRate);
  g_Config.INecklace.nDCAddRate := Config.ReadInteger('Setup', 'NecklaceDCAddRate', g_Config.INecklace.nDCAddRate);

  if Config.ReadInteger('Setup', 'NecklaceMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceMCMaxLimit', g_Config.INecklace.nMCMaxLimit);
  g_Config.INecklace.nMCMaxLimit := Config.ReadInteger('Setup', 'NecklaceMCMaxLimit', g_Config.INecklace.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'NecklaceMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceMCAddValueRate', g_Config.INecklace.nMCAddValueRate);
  g_Config.INecklace.nMCAddValueRate := Config.ReadInteger('Setup', 'NecklaceMCAddValueRate', g_Config.INecklace.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'NecklaceMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceMCAddRate', g_Config.INecklace.nMCAddRate);
  g_Config.INecklace.nMCAddRate := Config.ReadInteger('Setup', 'NecklaceMCAddRate', g_Config.INecklace.nMCAddRate);

  if Config.ReadInteger('Setup', 'NecklaceSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceSCMaxLimit', g_Config.INecklace.nSCMaxLimit);
  g_Config.INecklace.nSCMaxLimit := Config.ReadInteger('Setup', 'NecklaceSCMaxLimit', g_Config.INecklace.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'NecklaceSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceSCAddValueRate', g_Config.INecklace.nSCAddValueRate);
  g_Config.INecklace.nSCAddValueRate := Config.ReadInteger('Setup', 'NecklaceSCAddValueRate', g_Config.INecklace.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'NecklaceSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceSCAddRate', g_Config.INecklace.nSCAddRate);
  g_Config.INecklace.nSCAddRate := Config.ReadInteger('Setup', 'NecklaceSCAddRate', g_Config.INecklace.nSCAddRate);

  if Config.ReadInteger('Setup', 'NecklaceCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceCCMaxLimit', g_Config.INecklace.nCCMaxLimit);
  g_Config.INecklace.nCCMaxLimit := Config.ReadInteger('Setup', 'NecklaceCCMaxLimit', g_Config.INecklace.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'NecklaceCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceCCAddValueRate', g_Config.INecklace.nCCAddValueRate);
  g_Config.INecklace.nCCAddValueRate := Config.ReadInteger('Setup', 'NecklaceCCAddValueRate', g_Config.INecklace.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'NecklaceCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NecklaceCCAddRate', g_Config.INecklace.nCCAddRate);
  g_Config.INecklace.nCCAddRate := Config.ReadInteger('Setup', 'NecklaceCCAddRate', g_Config.INecklace.nCCAddRate);

  if Config.ReadInteger('Setup', 'ArmRingACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingACMaxLimit', g_Config.IArmRing.nACMaxLimit);
  g_Config.IArmRing.nACMaxLimit := Config.ReadInteger('Setup', 'ArmRingACMaxLimit', g_Config.IArmRing.nACMaxLimit);
  if Config.ReadInteger('Setup', 'ArmRingACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingACAddValueRate', g_Config.IArmRing.nACAddValueRate);
  g_Config.IArmRing.nACAddValueRate := Config.ReadInteger('Setup', 'ArmRingACAddValueRate', g_Config.IArmRing.nACAddValueRate);
  if Config.ReadInteger('Setup', 'ArmRingACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingACAddRate', g_Config.IArmRing.nACAddRate);
  g_Config.IArmRing.nACAddRate := Config.ReadInteger('Setup', 'ArmRingACAddRate', g_Config.IArmRing.nACAddRate);

  if Config.ReadInteger('Setup', 'ArmRingMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingMACMaxLimit', g_Config.IArmRing.nMACMaxLimit);
  g_Config.IArmRing.nMACMaxLimit := Config.ReadInteger('Setup', 'ArmRingMACMaxLimit', g_Config.IArmRing.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'ArmRingMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingMACAddValueRate', g_Config.IArmRing.nMACAddValueRate);
  g_Config.IArmRing.nMACAddValueRate := Config.ReadInteger('Setup', 'ArmRingMACAddValueRate', g_Config.IArmRing.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'ArmRingMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingMACAddRate', g_Config.IArmRing.nMACAddRate);
  g_Config.IArmRing.nMACAddRate := Config.ReadInteger('Setup', 'ArmRingMACAddRate', g_Config.IArmRing.nMACAddRate);

  if Config.ReadInteger('Setup', 'ArmRingDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingDCMaxLimit', g_Config.IArmRing.nDCMaxLimit);
  g_Config.IArmRing.nDCMaxLimit := Config.ReadInteger('Setup', 'ArmRingDCMaxLimit', g_Config.IArmRing.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'ArmRingDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingDCAddValueRate', g_Config.IArmRing.nDCAddValueRate);
  g_Config.IArmRing.nDCAddValueRate := Config.ReadInteger('Setup', 'ArmRingDCAddValueRate', g_Config.IArmRing.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'ArmRingDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingDCAddRate', g_Config.IArmRing.nDCAddRate);
  g_Config.IArmRing.nDCAddRate := Config.ReadInteger('Setup', 'ArmRingDCAddRate', g_Config.IArmRing.nDCAddRate);

  if Config.ReadInteger('Setup', 'ArmRingMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingMCMaxLimit', g_Config.IArmRing.nMCMaxLimit);
  g_Config.IArmRing.nMCMaxLimit := Config.ReadInteger('Setup', 'ArmRingMCMaxLimit', g_Config.IArmRing.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'ArmRingMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingMCAddValueRate', g_Config.IArmRing.nMCAddValueRate);
  g_Config.IArmRing.nMCAddValueRate := Config.ReadInteger('Setup', 'ArmRingMCAddValueRate', g_Config.IArmRing.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'ArmRingMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingMCAddRate', g_Config.IArmRing.nMCAddRate);
  g_Config.IArmRing.nMCAddRate := Config.ReadInteger('Setup', 'ArmRingMCAddRate', g_Config.IArmRing.nMCAddRate);

  if Config.ReadInteger('Setup', 'ArmRingSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingSCMaxLimit', g_Config.IArmRing.nSCMaxLimit);
  g_Config.IArmRing.nSCMaxLimit := Config.ReadInteger('Setup', 'ArmRingSCMaxLimit', g_Config.IArmRing.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'ArmRingSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingSCAddValueRate', g_Config.IArmRing.nSCAddValueRate);
  g_Config.IArmRing.nSCAddValueRate := Config.ReadInteger('Setup', 'ArmRingSCAddValueRate', g_Config.IArmRing.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'ArmRingSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingSCAddRate', g_Config.IArmRing.nSCAddRate);
  g_Config.IArmRing.nSCAddRate := Config.ReadInteger('Setup', 'ArmRingSCAddRate', g_Config.IArmRing.nSCAddRate);

  if Config.ReadInteger('Setup', 'ArmRingCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingCCMaxLimit', g_Config.IArmRing.nCCMaxLimit);
  g_Config.IArmRing.nCCMaxLimit := Config.ReadInteger('Setup', 'ArmRingCCMaxLimit', g_Config.IArmRing.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'ArmRingCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingCCAddValueRate', g_Config.IArmRing.nCCAddValueRate);
  g_Config.IArmRing.nCCAddValueRate := Config.ReadInteger('Setup', 'ArmRingCCAddValueRate', g_Config.IArmRing.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'ArmRingCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRingCCAddRate', g_Config.IArmRing.nCCAddRate);
  g_Config.IArmRing.nCCAddRate := Config.ReadInteger('Setup', 'ArmRingCCAddRate', g_Config.IArmRing.nCCAddRate);

  if Config.ReadInteger('Setup', 'RingACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RingACMaxLimit', g_Config.IRing.nACMaxLimit);
  g_Config.IRing.nACMaxLimit := Config.ReadInteger('Setup', 'RingACMaxLimit', g_Config.IRing.nACMaxLimit);
  if Config.ReadInteger('Setup', 'RingACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingACAddValueRate', g_Config.IRing.nACAddValueRate);
  g_Config.IRing.nACAddValueRate := Config.ReadInteger('Setup', 'RingACAddValueRate', g_Config.IRing.nACAddValueRate);
  if Config.ReadInteger('Setup', 'RingACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingACAddRate', g_Config.IRing.nACAddRate);
  g_Config.IRing.nACAddRate := Config.ReadInteger('Setup', 'RingACAddRate', g_Config.IRing.nACAddRate);

  if Config.ReadInteger('Setup', 'RingMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RingMACMaxLimit', g_Config.IRing.nMACMaxLimit);
  g_Config.IRing.nMACMaxLimit := Config.ReadInteger('Setup', 'RingMACMaxLimit', g_Config.IRing.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'RingMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingMACAddValueRate', g_Config.IRing.nMACAddValueRate);
  g_Config.IRing.nMACAddValueRate := Config.ReadInteger('Setup', 'RingMACAddValueRate', g_Config.IRing.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'RingMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingMACAddRate', g_Config.IRing.nMACAddRate);
  g_Config.IRing.nMACAddRate := Config.ReadInteger('Setup', 'RingMACAddRate', g_Config.IRing.nMACAddRate);

  if Config.ReadInteger('Setup', 'RingDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RingDCMaxLimit', g_Config.IRing.nDCMaxLimit);
  g_Config.IRing.nDCMaxLimit := Config.ReadInteger('Setup', 'RingDCMaxLimit', g_Config.IRing.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'RingDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingDCAddValueRate', g_Config.IRing.nDCAddValueRate);
  g_Config.IRing.nDCAddValueRate := Config.ReadInteger('Setup', 'RingDCAddValueRate', g_Config.IRing.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'RingDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingDCAddRate', g_Config.IRing.nDCAddRate);
  g_Config.IRing.nDCAddRate := Config.ReadInteger('Setup', 'RingDCAddRate', g_Config.IRing.nDCAddRate);

  if Config.ReadInteger('Setup', 'RingMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RingMCMaxLimit', g_Config.IRing.nMCMaxLimit);
  g_Config.IRing.nMCMaxLimit := Config.ReadInteger('Setup', 'RingMCMaxLimit', g_Config.IRing.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'RingMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingMCAddValueRate', g_Config.IRing.nMCAddValueRate);
  g_Config.IRing.nMCAddValueRate := Config.ReadInteger('Setup', 'RingMCAddValueRate', g_Config.IRing.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'RingMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingMCAddRate', g_Config.IRing.nMCAddRate);
  g_Config.IRing.nMCAddRate := Config.ReadInteger('Setup', 'RingMCAddRate', g_Config.IRing.nMCAddRate);

  if Config.ReadInteger('Setup', 'RingSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RingSCMaxLimit', g_Config.IRing.nSCMaxLimit);
  g_Config.IRing.nSCMaxLimit := Config.ReadInteger('Setup', 'RingSCMaxLimit', g_Config.IRing.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'RingSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingSCAddValueRate', g_Config.IRing.nSCAddValueRate);
  g_Config.IRing.nSCAddValueRate := Config.ReadInteger('Setup', 'RingSCAddValueRate', g_Config.IRing.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'RingSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingSCAddRate', g_Config.IRing.nSCAddRate);
  g_Config.IRing.nSCAddRate := Config.ReadInteger('Setup', 'RingSCAddRate', g_Config.IRing.nSCAddRate);

  if Config.ReadInteger('Setup', 'RingCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RingCCMaxLimit', g_Config.IRing.nCCMaxLimit);
  g_Config.IRing.nCCMaxLimit := Config.ReadInteger('Setup', 'RingCCMaxLimit', g_Config.IRing.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'RingCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingCCAddValueRate', g_Config.IRing.nCCAddValueRate);
  g_Config.IRing.nCCAddValueRate := Config.ReadInteger('Setup', 'RingCCAddValueRate', g_Config.IRing.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'RingCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'RingCCAddRate', g_Config.IRing.nCCAddRate);
  g_Config.IRing.nCCAddRate := Config.ReadInteger('Setup', 'RingCCAddRate', g_Config.IRing.nCCAddRate);

  if Config.ReadInteger('Setup', 'BeltACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltACMaxLimit', g_Config.IBelt.nACMaxLimit);
  g_Config.IBelt.nACMaxLimit := Config.ReadInteger('Setup', 'BeltACMaxLimit', g_Config.IBelt.nACMaxLimit);
  if Config.ReadInteger('Setup', 'BeltACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltACAddValueRate', g_Config.IBelt.nACAddValueRate);
  g_Config.IBelt.nACAddValueRate := Config.ReadInteger('Setup', 'BeltACAddValueRate', g_Config.IBelt.nACAddValueRate);
  if Config.ReadInteger('Setup', 'BeltACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltACAddRate', g_Config.IBelt.nACAddRate);
  g_Config.IBelt.nACAddRate := Config.ReadInteger('Setup', 'BeltACAddRate', g_Config.IBelt.nACAddRate);

  if Config.ReadInteger('Setup', 'BeltMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltMACMaxLimit', g_Config.IBelt.nMACMaxLimit);
  g_Config.IBelt.nMACMaxLimit := Config.ReadInteger('Setup', 'BeltMACMaxLimit', g_Config.IBelt.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'BeltMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltMACAddValueRate', g_Config.IBelt.nMACAddValueRate);
  g_Config.IBelt.nMACAddValueRate := Config.ReadInteger('Setup', 'BeltMACAddValueRate', g_Config.IBelt.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'BeltMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltMACAddRate', g_Config.IBelt.nMACAddRate);
  g_Config.IBelt.nMACAddRate := Config.ReadInteger('Setup', 'BeltMACAddRate', g_Config.IBelt.nMACAddRate);

  if Config.ReadInteger('Setup', 'BeltDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltDCMaxLimit', g_Config.IBelt.nDCMaxLimit);
  g_Config.IBelt.nDCMaxLimit := Config.ReadInteger('Setup', 'BeltDCMaxLimit', g_Config.IBelt.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'BeltDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltDCAddValueRate', g_Config.IBelt.nDCAddValueRate);
  g_Config.IBelt.nDCAddValueRate := Config.ReadInteger('Setup', 'BeltDCAddValueRate', g_Config.IBelt.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'BeltDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltDCAddRate', g_Config.IBelt.nDCAddRate);
  g_Config.IBelt.nDCAddRate := Config.ReadInteger('Setup', 'BeltDCAddRate', g_Config.IBelt.nDCAddRate);

  if Config.ReadInteger('Setup', 'BeltMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltMCMaxLimit', g_Config.IBelt.nMCMaxLimit);
  g_Config.IBelt.nMCMaxLimit := Config.ReadInteger('Setup', 'BeltMCMaxLimit', g_Config.IBelt.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'BeltMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltMCAddValueRate', g_Config.IBelt.nMCAddValueRate);
  g_Config.IBelt.nMCAddValueRate := Config.ReadInteger('Setup', 'BeltMCAddValueRate', g_Config.IBelt.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'BeltMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltMCAddRate', g_Config.IBelt.nMCAddRate);
  g_Config.IBelt.nMCAddRate := Config.ReadInteger('Setup', 'BeltMCAddRate', g_Config.IBelt.nMCAddRate);

  if Config.ReadInteger('Setup', 'BeltSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltSCMaxLimit', g_Config.IBelt.nSCMaxLimit);
  g_Config.IBelt.nSCMaxLimit := Config.ReadInteger('Setup', 'BeltSCMaxLimit', g_Config.IBelt.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'BeltSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltSCAddValueRate', g_Config.IBelt.nSCAddValueRate);
  g_Config.IBelt.nSCAddValueRate := Config.ReadInteger('Setup', 'BeltSCAddValueRate', g_Config.IBelt.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'BeltSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltSCAddRate', g_Config.IBelt.nSCAddRate);
  g_Config.IBelt.nSCAddRate := Config.ReadInteger('Setup', 'BeltSCAddRate', g_Config.IBelt.nSCAddRate);

  if Config.ReadInteger('Setup', 'BeltCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltCCMaxLimit', g_Config.IBelt.nCCMaxLimit);
  g_Config.IBelt.nCCMaxLimit := Config.ReadInteger('Setup', 'BeltCCMaxLimit', g_Config.IBelt.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'BeltCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltCCAddValueRate', g_Config.IBelt.nCCAddValueRate);
  g_Config.IBelt.nCCAddValueRate := Config.ReadInteger('Setup', 'BeltCCAddValueRate', g_Config.IBelt.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'BeltCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BeltCCAddRate', g_Config.IBelt.nCCAddRate);
  g_Config.IBelt.nCCAddRate := Config.ReadInteger('Setup', 'BeltCCAddRate', g_Config.IBelt.nCCAddRate);

  if Config.ReadInteger('Setup', 'BootACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootACMaxLimit', g_Config.IBoot.nACMaxLimit);
  g_Config.IBoot.nACMaxLimit := Config.ReadInteger('Setup', 'BootACMaxLimit', g_Config.IBoot.nACMaxLimit);
  if Config.ReadInteger('Setup', 'BootACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootACAddValueRate', g_Config.IBoot.nACAddValueRate);
  g_Config.IBoot.nACAddValueRate := Config.ReadInteger('Setup', 'BootACAddValueRate', g_Config.IBoot.nACAddValueRate);
  if Config.ReadInteger('Setup', 'BootACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootACAddRate', g_Config.IBoot.nACAddRate);
  g_Config.IBoot.nACAddRate := Config.ReadInteger('Setup', 'BootACAddRate', g_Config.IBoot.nACAddRate);

  if Config.ReadInteger('Setup', 'BootMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootMACMaxLimit', g_Config.IBoot.nMACMaxLimit);
  g_Config.IBoot.nMACMaxLimit := Config.ReadInteger('Setup', 'BootMACMaxLimit', g_Config.IBoot.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'BootMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootMACAddValueRate', g_Config.IBoot.nMACAddValueRate);
  g_Config.IBoot.nMACAddValueRate := Config.ReadInteger('Setup', 'BootMACAddValueRate', g_Config.IBoot.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'BootMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootMACAddRate', g_Config.IBoot.nMACAddRate);
  g_Config.IBoot.nMACAddRate := Config.ReadInteger('Setup', 'BootMACAddRate', g_Config.IBoot.nMACAddRate);

  if Config.ReadInteger('Setup', 'BootDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootDCMaxLimit', g_Config.IBoot.nDCMaxLimit);
  g_Config.IBoot.nDCMaxLimit := Config.ReadInteger('Setup', 'BootDCMaxLimit', g_Config.IBoot.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'BootDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootDCAddValueRate', g_Config.IBoot.nDCAddValueRate);
  g_Config.IBoot.nDCAddValueRate := Config.ReadInteger('Setup', 'BootDCAddValueRate', g_Config.IBoot.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'BootDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootDCAddRate', g_Config.IBoot.nDCAddRate);
  g_Config.IBoot.nDCAddRate := Config.ReadInteger('Setup', 'BootDCAddRate', g_Config.IBoot.nDCAddRate);

  if Config.ReadInteger('Setup', 'BootMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootMCMaxLimit', g_Config.IBoot.nMCMaxLimit);
  g_Config.IBoot.nMCMaxLimit := Config.ReadInteger('Setup', 'BootMCMaxLimit', g_Config.IBoot.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'BootMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootMCAddValueRate', g_Config.IBoot.nMCAddValueRate);
  g_Config.IBoot.nMCAddValueRate := Config.ReadInteger('Setup', 'BootMCAddValueRate', g_Config.IBoot.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'BootMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootMCAddRate', g_Config.IBoot.nMCAddRate);
  g_Config.IBoot.nMCAddRate := Config.ReadInteger('Setup', 'BootMCAddRate', g_Config.IBoot.nMCAddRate);

  if Config.ReadInteger('Setup', 'BootSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootSCMaxLimit', g_Config.IBoot.nSCMaxLimit);
  g_Config.IBoot.nSCMaxLimit := Config.ReadInteger('Setup', 'BootSCMaxLimit', g_Config.IBoot.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'BootSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootSCAddValueRate', g_Config.IBoot.nSCAddValueRate);
  g_Config.IBoot.nSCAddValueRate := Config.ReadInteger('Setup', 'BootSCAddValueRate', g_Config.IBoot.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'BootSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootSCAddRate', g_Config.IBoot.nSCAddRate);
  g_Config.IBoot.nSCAddRate := Config.ReadInteger('Setup', 'BootSCAddRate', g_Config.IBoot.nSCAddRate);

  if Config.ReadInteger('Setup', 'BootCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootCCMaxLimit', g_Config.IBoot.nCCMaxLimit);
  g_Config.IBoot.nCCMaxLimit := Config.ReadInteger('Setup', 'BootCCMaxLimit', g_Config.IBoot.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'BootCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootCCAddValueRate', g_Config.IBoot.nCCAddValueRate);
  g_Config.IBoot.nCCAddValueRate := Config.ReadInteger('Setup', 'BootCCAddValueRate', g_Config.IBoot.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'BootCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootCCAddRate', g_Config.IBoot.nCCAddRate);
  g_Config.IBoot.nCCAddRate := Config.ReadInteger('Setup', 'BootCCAddRate', g_Config.IBoot.nCCAddRate);

  if Config.ReadInteger('Setup', 'ReinACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinACMaxLimit', g_Config.IRein.nACMaxLimit);
  g_Config.IRein.nACMaxLimit := Config.ReadInteger('Setup', 'ReinACMaxLimit', g_Config.IRein.nACMaxLimit);
  if Config.ReadInteger('Setup', 'ReinACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinACAddValueRate', g_Config.IRein.nACAddValueRate);
  g_Config.IRein.nACAddValueRate := Config.ReadInteger('Setup', 'ReinACAddValueRate', g_Config.IRein.nACAddValueRate);
  if Config.ReadInteger('Setup', 'ReinACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinACAddRate', g_Config.IRein.nACAddRate);
  g_Config.IRein.nACAddRate := Config.ReadInteger('Setup', 'ReinACAddRate', g_Config.IRein.nACAddRate);

  if Config.ReadInteger('Setup', 'ReinMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinMACMaxLimit', g_Config.IRein.nMACMaxLimit);
  g_Config.IRein.nMACMaxLimit := Config.ReadInteger('Setup', 'ReinMACMaxLimit', g_Config.IRein.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'ReinMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinMACAddValueRate', g_Config.IRein.nMACAddValueRate);
  g_Config.IRein.nMACAddValueRate := Config.ReadInteger('Setup', 'ReinMACAddValueRate', g_Config.IRein.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'ReinMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinMACAddRate', g_Config.IRein.nMACAddRate);
  g_Config.IRein.nMACAddRate := Config.ReadInteger('Setup', 'ReinMACAddRate', g_Config.IRein.nMACAddRate);

  if Config.ReadInteger('Setup', 'ReinDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinDCMaxLimit', g_Config.IRein.nDCMaxLimit);
  g_Config.IRein.nDCMaxLimit := Config.ReadInteger('Setup', 'ReinDCMaxLimit', g_Config.IRein.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'ReinDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinDCAddValueRate', g_Config.IRein.nDCAddValueRate);
  g_Config.IRein.nDCAddValueRate := Config.ReadInteger('Setup', 'ReinDCAddValueRate', g_Config.IRein.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'ReinDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinDCAddRate', g_Config.IRein.nDCAddRate);
  g_Config.IRein.nDCAddRate := Config.ReadInteger('Setup', 'ReinDCAddRate', g_Config.IRein.nDCAddRate);

  if Config.ReadInteger('Setup', 'ReinMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinMCMaxLimit', g_Config.IRein.nMCMaxLimit);
  g_Config.IRein.nMCMaxLimit := Config.ReadInteger('Setup', 'ReinMCMaxLimit', g_Config.IRein.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'ReinMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinMCAddValueRate', g_Config.IRein.nMCAddValueRate);
  g_Config.IRein.nMCAddValueRate := Config.ReadInteger('Setup', 'ReinMCAddValueRate', g_Config.IRein.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'ReinMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinMCAddRate', g_Config.IRein.nMCAddRate);
  g_Config.IRein.nMCAddRate := Config.ReadInteger('Setup', 'ReinMCAddRate', g_Config.IRein.nMCAddRate);

  if Config.ReadInteger('Setup', 'ReinSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinSCMaxLimit', g_Config.IRein.nSCMaxLimit);
  g_Config.IRein.nSCMaxLimit := Config.ReadInteger('Setup', 'ReinSCMaxLimit', g_Config.IRein.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'ReinSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinSCAddValueRate', g_Config.IRein.nSCAddValueRate);
  g_Config.IRein.nSCAddValueRate := Config.ReadInteger('Setup', 'ReinSCAddValueRate', g_Config.IRein.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'ReinSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinSCAddRate', g_Config.IRein.nSCAddRate);
  g_Config.IRein.nSCAddRate := Config.ReadInteger('Setup', 'ReinSCAddRate', g_Config.IRein.nSCAddRate);

  if Config.ReadInteger('Setup', 'ReinCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinCCMaxLimit', g_Config.IRein.nCCMaxLimit);
  g_Config.IRein.nCCMaxLimit := Config.ReadInteger('Setup', 'ReinCCMaxLimit', g_Config.IRein.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'ReinCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinCCAddValueRate', g_Config.IRein.nCCAddValueRate);
  g_Config.IRein.nCCAddValueRate := Config.ReadInteger('Setup', 'ReinCCAddValueRate', g_Config.IRein.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'ReinCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ReinCCAddRate', g_Config.IRein.nCCAddRate);
  g_Config.IRein.nCCAddRate := Config.ReadInteger('Setup', 'ReinCCAddRate', g_Config.IRein.nCCAddRate);

  if Config.ReadInteger('Setup', 'BellACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BellACMaxLimit', g_Config.IBell.nACMaxLimit);
  g_Config.IBell.nACMaxLimit := Config.ReadInteger('Setup', 'BellACMaxLimit', g_Config.IBell.nACMaxLimit);
  if Config.ReadInteger('Setup', 'BellACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellACAddValueRate', g_Config.IBell.nACAddValueRate);
  g_Config.IBell.nACAddValueRate := Config.ReadInteger('Setup', 'BellACAddValueRate', g_Config.IBell.nACAddValueRate);
  if Config.ReadInteger('Setup', 'BellACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellACAddRate', g_Config.IBell.nACAddRate);
  g_Config.IBell.nACAddRate := Config.ReadInteger('Setup', 'BellACAddRate', g_Config.IBell.nACAddRate);

  if Config.ReadInteger('Setup', 'BellMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BellMACMaxLimit', g_Config.IBell.nMACMaxLimit);
  g_Config.IBell.nMACMaxLimit := Config.ReadInteger('Setup', 'BellMACMaxLimit', g_Config.IBell.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'BellMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellMACAddValueRate', g_Config.IBell.nMACAddValueRate);
  g_Config.IBell.nMACAddValueRate := Config.ReadInteger('Setup', 'BellMACAddValueRate', g_Config.IBell.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'BellMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellMACAddRate', g_Config.IBell.nMACAddRate);
  g_Config.IBell.nMACAddRate := Config.ReadInteger('Setup', 'BellMACAddRate', g_Config.IBell.nMACAddRate);

  if Config.ReadInteger('Setup', 'BellDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BellDCMaxLimit', g_Config.IBell.nDCMaxLimit);
  g_Config.IBell.nDCMaxLimit := Config.ReadInteger('Setup', 'BellDCMaxLimit', g_Config.IBell.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'BellDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellDCAddValueRate', g_Config.IBell.nDCAddValueRate);
  g_Config.IBell.nDCAddValueRate := Config.ReadInteger('Setup', 'BellDCAddValueRate', g_Config.IBell.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'BellDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellDCAddRate', g_Config.IBell.nDCAddRate);
  g_Config.IBell.nDCAddRate := Config.ReadInteger('Setup', 'BellDCAddRate', g_Config.IBell.nDCAddRate);

  if Config.ReadInteger('Setup', 'BellMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BellMCMaxLimit', g_Config.IBell.nMCMaxLimit);
  g_Config.IBell.nMCMaxLimit := Config.ReadInteger('Setup', 'BellMCMaxLimit', g_Config.IBell.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'BellMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellMCAddValueRate', g_Config.IBell.nMCAddValueRate);
  g_Config.IBell.nMCAddValueRate := Config.ReadInteger('Setup', 'BellMCAddValueRate', g_Config.IBell.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'BellMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellMCAddRate', g_Config.IBell.nMCAddRate);
  g_Config.IBell.nMCAddRate := Config.ReadInteger('Setup', 'BellMCAddRate', g_Config.IBell.nMCAddRate);

  if Config.ReadInteger('Setup', 'BellSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BellSCMaxLimit', g_Config.IBell.nSCMaxLimit);
  g_Config.IBell.nSCMaxLimit := Config.ReadInteger('Setup', 'BellSCMaxLimit', g_Config.IBell.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'BellSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellSCAddValueRate', g_Config.IBell.nSCAddValueRate);
  g_Config.IBell.nSCAddValueRate := Config.ReadInteger('Setup', 'BellSCAddValueRate', g_Config.IBell.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'BellSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellSCAddRate', g_Config.IBell.nSCAddRate);
  g_Config.IBell.nSCAddRate := Config.ReadInteger('Setup', 'BellSCAddRate', g_Config.IBell.nSCAddRate);

  if Config.ReadInteger('Setup', 'BellCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BellCCMaxLimit', g_Config.IBell.nCCMaxLimit);
  g_Config.IBell.nCCMaxLimit := Config.ReadInteger('Setup', 'BellCCMaxLimit', g_Config.IBell.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'BellCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellCCAddValueRate', g_Config.IBell.nCCAddValueRate);
  g_Config.IBell.nCCAddValueRate := Config.ReadInteger('Setup', 'BellCCAddValueRate', g_Config.IBell.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'BellCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BellCCAddRate', g_Config.IBell.nCCAddRate);
  g_Config.IBell.nCCAddRate := Config.ReadInteger('Setup', 'BellCCAddRate', g_Config.IBell.nCCAddRate);

  if Config.ReadInteger('Setup', 'SaddleACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleACMaxLimit', g_Config.ISaddle.nACMaxLimit);
  g_Config.ISaddle.nACMaxLimit := Config.ReadInteger('Setup', 'SaddleACMaxLimit', g_Config.ISaddle.nACMaxLimit);
  if Config.ReadInteger('Setup', 'SaddleACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleACAddValueRate', g_Config.ISaddle.nACAddValueRate);
  g_Config.ISaddle.nACAddValueRate := Config.ReadInteger('Setup', 'SaddleACAddValueRate', g_Config.ISaddle.nACAddValueRate);
  if Config.ReadInteger('Setup', 'SaddleACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleACAddRate', g_Config.ISaddle.nACAddRate);
  g_Config.ISaddle.nACAddRate := Config.ReadInteger('Setup', 'SaddleACAddRate', g_Config.ISaddle.nACAddRate);

  if Config.ReadInteger('Setup', 'SaddleMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleMACMaxLimit', g_Config.ISaddle.nMACMaxLimit);
  g_Config.ISaddle.nMACMaxLimit := Config.ReadInteger('Setup', 'SaddleMACMaxLimit', g_Config.ISaddle.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'SaddleMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleMACAddValueRate', g_Config.ISaddle.nMACAddValueRate);
  g_Config.ISaddle.nMACAddValueRate := Config.ReadInteger('Setup', 'SaddleMACAddValueRate', g_Config.ISaddle.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'SaddleMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleMACAddRate', g_Config.ISaddle.nMACAddRate);
  g_Config.ISaddle.nMACAddRate := Config.ReadInteger('Setup', 'SaddleMACAddRate', g_Config.ISaddle.nMACAddRate);

  if Config.ReadInteger('Setup', 'SaddleDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleDCMaxLimit', g_Config.ISaddle.nDCMaxLimit);
  g_Config.ISaddle.nDCMaxLimit := Config.ReadInteger('Setup', 'SaddleDCMaxLimit', g_Config.ISaddle.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'SaddleDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleDCAddValueRate', g_Config.ISaddle.nDCAddValueRate);
  g_Config.ISaddle.nDCAddValueRate := Config.ReadInteger('Setup', 'SaddleDCAddValueRate', g_Config.ISaddle.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'SaddleDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleDCAddRate', g_Config.ISaddle.nDCAddRate);
  g_Config.ISaddle.nDCAddRate := Config.ReadInteger('Setup', 'SaddleDCAddRate', g_Config.ISaddle.nDCAddRate);

  if Config.ReadInteger('Setup', 'SaddleMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleMCMaxLimit', g_Config.ISaddle.nMCMaxLimit);
  g_Config.ISaddle.nMCMaxLimit := Config.ReadInteger('Setup', 'SaddleMCMaxLimit', g_Config.ISaddle.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'SaddleMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleMCAddValueRate', g_Config.ISaddle.nMCAddValueRate);
  g_Config.ISaddle.nMCAddValueRate := Config.ReadInteger('Setup', 'SaddleMCAddValueRate', g_Config.ISaddle.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'SaddleMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleMCAddRate', g_Config.ISaddle.nMCAddRate);
  g_Config.ISaddle.nMCAddRate := Config.ReadInteger('Setup', 'SaddleMCAddRate', g_Config.ISaddle.nMCAddRate);

  if Config.ReadInteger('Setup', 'SaddleSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleSCMaxLimit', g_Config.ISaddle.nSCMaxLimit);
  g_Config.ISaddle.nSCMaxLimit := Config.ReadInteger('Setup', 'SaddleSCMaxLimit', g_Config.ISaddle.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'SaddleSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleSCAddValueRate', g_Config.ISaddle.nSCAddValueRate);
  g_Config.ISaddle.nSCAddValueRate := Config.ReadInteger('Setup', 'SaddleSCAddValueRate', g_Config.ISaddle.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'SaddleSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleSCAddRate', g_Config.ISaddle.nSCAddRate);
  g_Config.ISaddle.nSCAddRate := Config.ReadInteger('Setup', 'SaddleSCAddRate', g_Config.ISaddle.nSCAddRate);

  if Config.ReadInteger('Setup', 'SaddleCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleCCMaxLimit', g_Config.ISaddle.nCCMaxLimit);
  g_Config.ISaddle.nCCMaxLimit := Config.ReadInteger('Setup', 'SaddleCCMaxLimit', g_Config.ISaddle.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'SaddleCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleCCAddValueRate', g_Config.ISaddle.nCCAddValueRate);
  g_Config.ISaddle.nCCAddValueRate := Config.ReadInteger('Setup', 'SaddleCCAddValueRate', g_Config.ISaddle.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'SaddleCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SaddleCCAddRate', g_Config.ISaddle.nCCAddRate);
  g_Config.ISaddle.nCCAddRate := Config.ReadInteger('Setup', 'SaddleCCAddRate', g_Config.ISaddle.nCCAddRate);

  if Config.ReadInteger('Setup', 'DecorationACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationACMaxLimit', g_Config.IDecoration.nACMaxLimit);
  g_Config.IDecoration.nACMaxLimit := Config.ReadInteger('Setup', 'DecorationACMaxLimit', g_Config.IDecoration.nACMaxLimit);
  if Config.ReadInteger('Setup', 'DecorationACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationACAddValueRate', g_Config.IDecoration.nACAddValueRate);
  g_Config.IDecoration.nACAddValueRate := Config.ReadInteger('Setup', 'DecorationACAddValueRate', g_Config.IDecoration.nACAddValueRate);
  if Config.ReadInteger('Setup', 'DecorationACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationACAddRate', g_Config.IDecoration.nACAddRate);
  g_Config.IDecoration.nACAddRate := Config.ReadInteger('Setup', 'DecorationACAddRate', g_Config.IDecoration.nACAddRate);

  if Config.ReadInteger('Setup', 'DecorationMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationMACMaxLimit', g_Config.IDecoration.nMACMaxLimit);
  g_Config.IDecoration.nMACMaxLimit := Config.ReadInteger('Setup', 'DecorationMACMaxLimit', g_Config.IDecoration.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'DecorationMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationMACAddValueRate', g_Config.IDecoration.nMACAddValueRate);
  g_Config.IDecoration.nMACAddValueRate := Config.ReadInteger('Setup', 'DecorationMACAddValueRate', g_Config.IDecoration.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'DecorationMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationMACAddRate', g_Config.IDecoration.nMACAddRate);
  g_Config.IDecoration.nMACAddRate := Config.ReadInteger('Setup', 'DecorationMACAddRate', g_Config.IDecoration.nMACAddRate);

  if Config.ReadInteger('Setup', 'DecorationDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationDCMaxLimit', g_Config.IDecoration.nDCMaxLimit);
  g_Config.IDecoration.nDCMaxLimit := Config.ReadInteger('Setup', 'DecorationDCMaxLimit', g_Config.IDecoration.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'DecorationDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationDCAddValueRate', g_Config.IDecoration.nDCAddValueRate);
  g_Config.IDecoration.nDCAddValueRate := Config.ReadInteger('Setup', 'DecorationDCAddValueRate', g_Config.IDecoration.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'DecorationDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationDCAddRate', g_Config.IDecoration.nDCAddRate);
  g_Config.IDecoration.nDCAddRate := Config.ReadInteger('Setup', 'DecorationDCAddRate', g_Config.IDecoration.nDCAddRate);

  if Config.ReadInteger('Setup', 'DecorationMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationMCMaxLimit', g_Config.IDecoration.nMCMaxLimit);
  g_Config.IDecoration.nMCMaxLimit := Config.ReadInteger('Setup', 'DecorationMCMaxLimit', g_Config.IDecoration.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'DecorationMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationMCAddValueRate', g_Config.IDecoration.nMCAddValueRate);
  g_Config.IDecoration.nMCAddValueRate := Config.ReadInteger('Setup', 'DecorationMCAddValueRate', g_Config.IDecoration.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'DecorationMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationMCAddRate', g_Config.IDecoration.nMCAddRate);
  g_Config.IDecoration.nMCAddRate := Config.ReadInteger('Setup', 'DecorationMCAddRate', g_Config.IDecoration.nMCAddRate);

  if Config.ReadInteger('Setup', 'DecorationSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationSCMaxLimit', g_Config.IDecoration.nSCMaxLimit);
  g_Config.IDecoration.nSCMaxLimit := Config.ReadInteger('Setup', 'DecorationSCMaxLimit', g_Config.IDecoration.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'DecorationSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationSCAddValueRate', g_Config.IDecoration.nSCAddValueRate);
  g_Config.IDecoration.nSCAddValueRate := Config.ReadInteger('Setup', 'DecorationSCAddValueRate', g_Config.IDecoration.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'DecorationSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationSCAddRate', g_Config.IDecoration.nSCAddRate);
  g_Config.IDecoration.nSCAddRate := Config.ReadInteger('Setup', 'DecorationSCAddRate', g_Config.IDecoration.nSCAddRate);

  if Config.ReadInteger('Setup', 'DecorationCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationCCMaxLimit', g_Config.IDecoration.nCCMaxLimit);
  g_Config.IDecoration.nCCMaxLimit := Config.ReadInteger('Setup', 'DecorationCCMaxLimit', g_Config.IDecoration.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'DecorationCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationCCAddValueRate', g_Config.IDecoration.nCCAddValueRate);
  g_Config.IDecoration.nCCAddValueRate := Config.ReadInteger('Setup', 'DecorationCCAddValueRate', g_Config.IDecoration.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'DecorationCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DecorationCCAddRate', g_Config.IDecoration.nCCAddRate);
  g_Config.IDecoration.nCCAddRate := Config.ReadInteger('Setup', 'DecorationCCAddRate', g_Config.IDecoration.nCCAddRate);

  if Config.ReadInteger('Setup', 'NailACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NailACMaxLimit', g_Config.INail.nACMaxLimit);
  g_Config.INail.nACMaxLimit := Config.ReadInteger('Setup', 'NailACMaxLimit', g_Config.INail.nACMaxLimit);
  if Config.ReadInteger('Setup', 'NailACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailACAddValueRate', g_Config.INail.nACAddValueRate);
  g_Config.INail.nACAddValueRate := Config.ReadInteger('Setup', 'NailACAddValueRate', g_Config.INail.nACAddValueRate);
  if Config.ReadInteger('Setup', 'NailACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailACAddRate', g_Config.INail.nACAddRate);
  g_Config.INail.nACAddRate := Config.ReadInteger('Setup', 'NailACAddRate', g_Config.INail.nACAddRate);

  if Config.ReadInteger('Setup', 'NailMACMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NailMACMaxLimit', g_Config.INail.nMACMaxLimit);
  g_Config.INail.nMACMaxLimit := Config.ReadInteger('Setup', 'NailMACMaxLimit', g_Config.INail.nMACMaxLimit);
  if Config.ReadInteger('Setup', 'NailMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailMACAddValueRate', g_Config.INail.nMACAddValueRate);
  g_Config.INail.nMACAddValueRate := Config.ReadInteger('Setup', 'NailMACAddValueRate', g_Config.INail.nMACAddValueRate);
  if Config.ReadInteger('Setup', 'NailMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailMACAddRate', g_Config.INail.nMACAddRate);
  g_Config.INail.nMACAddRate := Config.ReadInteger('Setup', 'NailMACAddRate', g_Config.INail.nMACAddRate);

  if Config.ReadInteger('Setup', 'NailDCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NailDCMaxLimit', g_Config.INail.nDCMaxLimit);
  g_Config.INail.nDCMaxLimit := Config.ReadInteger('Setup', 'NailDCMaxLimit', g_Config.INail.nDCMaxLimit);
  if Config.ReadInteger('Setup', 'NailDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailDCAddValueRate', g_Config.INail.nDCAddValueRate);
  g_Config.INail.nDCAddValueRate := Config.ReadInteger('Setup', 'NailDCAddValueRate', g_Config.INail.nDCAddValueRate);
  if Config.ReadInteger('Setup', 'NailDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailDCAddRate', g_Config.INail.nDCAddRate);
  g_Config.INail.nDCAddRate := Config.ReadInteger('Setup', 'NailDCAddRate', g_Config.INail.nDCAddRate);

  if Config.ReadInteger('Setup', 'NailMCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NailMCMaxLimit', g_Config.INail.nMCMaxLimit);
  g_Config.INail.nMCMaxLimit := Config.ReadInteger('Setup', 'NailMCMaxLimit', g_Config.INail.nMCMaxLimit);
  if Config.ReadInteger('Setup', 'NailMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailMCAddValueRate', g_Config.INail.nMCAddValueRate);
  g_Config.INail.nMCAddValueRate := Config.ReadInteger('Setup', 'NailMCAddValueRate', g_Config.INail.nMCAddValueRate);
  if Config.ReadInteger('Setup', 'NailMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailMCAddRate', g_Config.INail.nMCAddRate);
  g_Config.INail.nMCAddRate := Config.ReadInteger('Setup', 'NailMCAddRate', g_Config.INail.nMCAddRate);

  if Config.ReadInteger('Setup', 'NailSCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NailSCMaxLimit', g_Config.INail.nSCMaxLimit);
  g_Config.INail.nSCMaxLimit := Config.ReadInteger('Setup', 'NailSCMaxLimit', g_Config.INail.nSCMaxLimit);
  if Config.ReadInteger('Setup', 'NailSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailSCAddValueRate', g_Config.INail.nSCAddValueRate);
  g_Config.INail.nSCAddValueRate := Config.ReadInteger('Setup', 'NailSCAddValueRate', g_Config.INail.nSCAddValueRate);
  if Config.ReadInteger('Setup', 'NailSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailSCAddRate', g_Config.INail.nSCAddRate);
  g_Config.INail.nSCAddRate := Config.ReadInteger('Setup', 'NailSCAddRate', g_Config.INail.nSCAddRate);

  if Config.ReadInteger('Setup', 'NailCCMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NailCCMaxLimit', g_Config.INail.nCCMaxLimit);
  g_Config.INail.nCCMaxLimit := Config.ReadInteger('Setup', 'NailCCMaxLimit', g_Config.INail.nCCMaxLimit);
  if Config.ReadInteger('Setup', 'NailCCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailCCAddValueRate', g_Config.INail.nCCAddValueRate);
  g_Config.INail.nCCAddValueRate := Config.ReadInteger('Setup', 'NailCCAddValueRate', g_Config.INail.nCCAddValueRate);
  if Config.ReadInteger('Setup', 'NailCCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NailCCAddRate', g_Config.INail.nCCAddRate);
  g_Config.INail.nCCAddRate := Config.ReadInteger('Setup', 'NailCCAddRate', g_Config.INail.nCCAddRate);

  nLoadInteger := Config.ReadInteger('Setup', 'MonOneDropGoldCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MonOneDropGoldCount',
      g_Config.nMonOneDropGoldCount)
  else
    g_Config.nMonOneDropGoldCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'MakeMineHitRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeMineHitRate', g_Config.nMakeMineHitRate);
  g_Config.nMakeMineHitRate := Config.ReadInteger('Setup', 'MakeMineHitRate',
    g_Config.nMakeMineHitRate);

  if Config.ReadInteger('Setup', 'MakeMineRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeMineRate', g_Config.nMakeMineRate);
  g_Config.nMakeMineRate := Config.ReadInteger('Setup', 'MakeMineRate',
    g_Config.nMakeMineRate);

  if Config.ReadInteger('Setup', 'StoneTypeRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneTypeRate', g_Config.nStoneTypeRate);
  g_Config.nStoneTypeRate := Config.ReadInteger('Setup', 'StoneTypeRate',
    g_Config.nStoneTypeRate);

  if Config.ReadInteger('Setup', 'StoneTypeRateMin', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneTypeRateMin',
      g_Config.nStoneTypeRateMin);
  g_Config.nStoneTypeRateMin := Config.ReadInteger('Setup', 'StoneTypeRateMin',
    g_Config.nStoneTypeRateMin);

  if Config.ReadInteger('Setup', 'GoldStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'GoldStoneMin', g_Config.nGoldStoneMin);
  g_Config.nGoldStoneMin := Config.ReadInteger('Setup', 'GoldStoneMin',
    g_Config.nGoldStoneMin);

  if Config.ReadInteger('Setup', 'GoldStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'GoldStoneMax', g_Config.nGoldStoneMax);
  g_Config.nGoldStoneMax := Config.ReadInteger('Setup', 'GoldStoneMax',
    g_Config.nGoldStoneMax);

  if Config.ReadInteger('Setup', 'SilverStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'SilverStoneMin', g_Config.nSilverStoneMin);
  g_Config.nSilverStoneMin := Config.ReadInteger('Setup', 'SilverStoneMin',
    g_Config.nSilverStoneMin);

  if Config.ReadInteger('Setup', 'SilverStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'SilverStoneMax', g_Config.nSilverStoneMax);
  g_Config.nSilverStoneMax := Config.ReadInteger('Setup', 'SilverStoneMax',
    g_Config.nSilverStoneMax);

  if Config.ReadInteger('Setup', 'SteelStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'SteelStoneMin', g_Config.nSteelStoneMin);
  g_Config.nSteelStoneMin := Config.ReadInteger('Setup', 'SteelStoneMin',
    g_Config.nSteelStoneMin);

  if Config.ReadInteger('Setup', 'SteelStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'SteelStoneMax', g_Config.nSteelStoneMax);
  g_Config.nSteelStoneMax := Config.ReadInteger('Setup', 'SteelStoneMax',
    g_Config.nSteelStoneMax);

  if Config.ReadInteger('Setup', 'BlackStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'BlackStoneMin', g_Config.nBlackStoneMin);
  g_Config.nBlackStoneMin := Config.ReadInteger('Setup', 'BlackStoneMin',
    g_Config.nBlackStoneMin);

  if Config.ReadInteger('Setup', 'BlackStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'BlackStoneMax', g_Config.nBlackStoneMax);
  g_Config.nBlackStoneMax := Config.ReadInteger('Setup', 'BlackStoneMax',
    g_Config.nBlackStoneMax);

  if Config.ReadInteger('Setup', 'StoneMinDura', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneMinDura', g_Config.nStoneMinDura);
  g_Config.nStoneMinDura := Config.ReadInteger('Setup', 'StoneMinDura',
    g_Config.nStoneMinDura);

  if Config.ReadInteger('Setup', 'StoneGeneralDuraRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneGeneralDuraRate',
      g_Config.nStoneGeneralDuraRate);
  g_Config.nStoneGeneralDuraRate := Config.ReadInteger('Setup',
    'StoneGeneralDuraRate', g_Config.nStoneGeneralDuraRate);

  if Config.ReadInteger('Setup', 'StoneAddDuraRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneAddDuraRate',
      g_Config.nStoneAddDuraRate);
  g_Config.nStoneAddDuraRate := Config.ReadInteger('Setup', 'StoneAddDuraRate',
    g_Config.nStoneAddDuraRate);

  if Config.ReadInteger('Setup', 'StoneAddDuraMax', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneAddDuraMax', g_Config.nStoneAddDuraMax);
  g_Config.nStoneAddDuraMax := Config.ReadInteger('Setup', 'StoneAddDuraMax',
    g_Config.nStoneAddDuraMax);

  if Config.ReadInteger('Setup', 'WinLottery1Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Min', g_Config.nWinLottery1Min);
  g_Config.nWinLottery1Min := Config.ReadInteger('Setup', 'WinLottery1Min',
    g_Config.nWinLottery1Min);

  if Config.ReadInteger('Setup', 'WinLottery1Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Max', g_Config.nWinLottery1Max);
  g_Config.nWinLottery1Max := Config.ReadInteger('Setup', 'WinLottery1Max',
    g_Config.nWinLottery1Max);

  if Config.ReadInteger('Setup', 'WinLottery2Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Min', g_Config.nWinLottery2Min);
  g_Config.nWinLottery2Min := Config.ReadInteger('Setup', 'WinLottery2Min',
    g_Config.nWinLottery2Min);

  if Config.ReadInteger('Setup', 'WinLottery2Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Max', g_Config.nWinLottery2Max);
  g_Config.nWinLottery2Max := Config.ReadInteger('Setup', 'WinLottery2Max',
    g_Config.nWinLottery2Max);

  if Config.ReadInteger('Setup', 'WinLottery3Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Min', g_Config.nWinLottery3Min);
  g_Config.nWinLottery3Min := Config.ReadInteger('Setup', 'WinLottery3Min',
    g_Config.nWinLottery3Min);

  if Config.ReadInteger('Setup', 'WinLottery3Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Max', g_Config.nWinLottery3Max);
  g_Config.nWinLottery3Max := Config.ReadInteger('Setup', 'WinLottery3Max',
    g_Config.nWinLottery3Max);

  if Config.ReadInteger('Setup', 'WinLottery4Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Min', g_Config.nWinLottery4Min);
  g_Config.nWinLottery4Min := Config.ReadInteger('Setup', 'WinLottery4Min',
    g_Config.nWinLottery4Min);

  if Config.ReadInteger('Setup', 'WinLottery4Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Max', g_Config.nWinLottery4Max);
  g_Config.nWinLottery4Max := Config.ReadInteger('Setup', 'WinLottery4Max',
    g_Config.nWinLottery4Max);

  if Config.ReadInteger('Setup', 'WinLottery5Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Min', g_Config.nWinLottery5Min);
  g_Config.nWinLottery5Min := Config.ReadInteger('Setup', 'WinLottery5Min',
    g_Config.nWinLottery5Min);

  if Config.ReadInteger('Setup', 'WinLottery5Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Max', g_Config.nWinLottery5Max);
  g_Config.nWinLottery5Max := Config.ReadInteger('Setup', 'WinLottery5Max',
    g_Config.nWinLottery5Max);

  if Config.ReadInteger('Setup', 'WinLottery6Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Min', g_Config.nWinLottery6Min);
  g_Config.nWinLottery6Min := Config.ReadInteger('Setup', 'WinLottery6Min',
    g_Config.nWinLottery6Min);

  if Config.ReadInteger('Setup', 'WinLottery6Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Max', g_Config.nWinLottery6Max);
  g_Config.nWinLottery6Max := Config.ReadInteger('Setup', 'WinLottery6Max',
    g_Config.nWinLottery6Max);

  if Config.ReadInteger('Setup', 'WinLotteryRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLotteryRate', g_Config.nWinLotteryRate);
  g_Config.nWinLotteryRate := Config.ReadInteger('Setup', 'WinLotteryRate',
    g_Config.nWinLotteryRate);

  if Config.ReadInteger('Setup', 'WinLottery1Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Gold', g_Config.nWinLottery1Gold);
  g_Config.nWinLottery1Gold := Config.ReadInteger('Setup', 'WinLottery1Gold',
    g_Config.nWinLottery1Gold);

  if Config.ReadInteger('Setup', 'WinLottery2Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Gold', g_Config.nWinLottery2Gold);
  g_Config.nWinLottery2Gold := Config.ReadInteger('Setup', 'WinLottery2Gold',
    g_Config.nWinLottery2Gold);

  if Config.ReadInteger('Setup', 'WinLottery3Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Gold', g_Config.nWinLottery3Gold);
  g_Config.nWinLottery3Gold := Config.ReadInteger('Setup', 'WinLottery3Gold',
    g_Config.nWinLottery3Gold);

  if Config.ReadInteger('Setup', 'WinLottery4Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Gold', g_Config.nWinLottery4Gold);
  g_Config.nWinLottery4Gold := Config.ReadInteger('Setup', 'WinLottery4Gold',
    g_Config.nWinLottery4Gold);

  if Config.ReadInteger('Setup', 'WinLottery5Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Gold', g_Config.nWinLottery5Gold);
  g_Config.nWinLottery5Gold := Config.ReadInteger('Setup', 'WinLottery5Gold',
    g_Config.nWinLottery5Gold);

  if Config.ReadInteger('Setup', 'WinLottery6Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Gold', g_Config.nWinLottery6Gold);
  g_Config.nWinLottery6Gold := Config.ReadInteger('Setup', 'WinLottery6Gold',
    g_Config.nWinLottery6Gold);

  if Config.ReadInteger('Setup', 'GuildRecallTime', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildRecallTime', g_Config.nGuildRecallTime);
  g_Config.nGuildRecallTime := Config.ReadInteger('Setup', 'GuildRecallTime',
    g_Config.nGuildRecallTime);

  if Config.ReadInteger('Setup', 'GroupRecallTime', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupRecallTime', g_Config.nGroupRecallTime);
  g_Config.nGroupRecallTime := Config.ReadInteger('Setup', 'GroupRecallTime',
    g_Config.nGroupRecallTime);

  if Config.ReadInteger('Setup', 'ControlDropItem', -1) < 0 then
    Config.WriteBool('Setup', 'ControlDropItem', g_Config.boControlDropItem);
  g_Config.boControlDropItem := Config.ReadBool('Setup', 'ControlDropItem',
    g_Config.boControlDropItem);

  if Config.ReadInteger('Setup', 'InSafeDisableDrop', -1) < 0 then
    Config.WriteBool('Setup', 'InSafeDisableDrop',
      g_Config.boInSafeDisableDrop);
  g_Config.boInSafeDisableDrop := Config.ReadBool('Setup', 'InSafeDisableDrop',
    g_Config.boInSafeDisableDrop);

  if Config.ReadInteger('Setup', 'CanDropGold', -1) < 0 then
    Config.WriteInteger('Setup', 'CanDropGold', g_Config.nCanDropGold);
  g_Config.nCanDropGold := Config.ReadInteger('Setup', 'CanDropGold',
    g_Config.nCanDropGold);

  if Config.ReadInteger('Setup', 'CanDropPrice', -1) < 0 then
    Config.WriteInteger('Setup', 'CanDropPrice', g_Config.nCanDropPrice);
  g_Config.nCanDropPrice := Config.ReadInteger('Setup', 'CanDropPrice',
    g_Config.nCanDropPrice);

  nLoadInteger := Config.ReadInteger('Setup', 'SendCustemMsg', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'SendCustemMsg', g_Config.boSendCustemMsg)
  else
    g_Config.boSendCustemMsg := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'SubkMasterSendMsg', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'SubkMasterSendMsg', g_Config.boSubkMasterSendMsg)
  else
    g_Config.boSubkMasterSendMsg := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'SuperRepairPriceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SuperRepairPriceRate',
      g_Config.nSuperRepairPriceRate);
  g_Config.nSuperRepairPriceRate := Config.ReadInteger('Setup',
    'SuperRepairPriceRate', g_Config.nSuperRepairPriceRate);

  if Config.ReadInteger('Setup', 'RepairItemDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairItemDecDura',
      g_Config.nRepairItemDecDura);
  g_Config.nRepairItemDecDura := Config.ReadInteger('Setup',
    'RepairItemDecDura', g_Config.nRepairItemDecDura);

  if Config.ReadInteger('Setup', 'DieScatterBag', -1) < 0 then
    Config.WriteBool('Setup', 'DieScatterBag', g_Config.boDieScatterBag);
  g_Config.boDieScatterBag := Config.ReadBool('Setup', 'DieScatterBag',
    g_Config.boDieScatterBag);

  if Config.ReadInteger('Setup', 'DieScatterBagRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieScatterBagRate',
      g_Config.nDieScatterBagRate);
  g_Config.nDieScatterBagRate := Config.ReadInteger('Setup',
    'DieScatterBagRate', g_Config.nDieScatterBagRate);

  if Config.ReadInteger('Setup', 'DieRedScatterBagAll', -1) < 0 then
    Config.WriteBool('Setup', 'DieRedScatterBagAll',
      g_Config.boDieRedScatterBagAll);
  g_Config.boDieRedScatterBagAll := Config.ReadBool('Setup',
    'DieRedScatterBagAll', g_Config.boDieRedScatterBagAll);

  if Config.ReadInteger('Setup', 'DieDropUseItemRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieDropUseItemRate',
      g_Config.nDieDropUseItemRate);
  g_Config.nDieDropUseItemRate := Config.ReadInteger('Setup',
    'DieDropUseItemRate', g_Config.nDieDropUseItemRate);

  if Config.ReadInteger('Setup', 'DieRedDropUseItemRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieRedDropUseItemRate',
      g_Config.nDieRedDropUseItemRate);
  g_Config.nDieRedDropUseItemRate := Config.ReadInteger('Setup',
    'DieRedDropUseItemRate', g_Config.nDieRedDropUseItemRate);

  if Config.ReadInteger('Setup', 'DieDropGold', -1) < 0 then
    Config.WriteBool('Setup', 'DieDropGold', g_Config.boDieDropGold);
  g_Config.boDieDropGold := Config.ReadBool('Setup', 'DieDropGold',
    g_Config.boDieDropGold);

  if Config.ReadInteger('Setup', 'KillByHumanDropUseItem', -1) < 0 then
    Config.WriteBool('Setup', 'KillByHumanDropUseItem',
      g_Config.boKillByHumanDropUseItem);
  g_Config.boKillByHumanDropUseItem := Config.ReadBool('Setup',
    'KillByHumanDropUseItem', g_Config.boKillByHumanDropUseItem);

  if Config.ReadInteger('Setup', 'KillByMonstDropUseItem', -1) < 0 then
    Config.WriteBool('Setup', 'KillByMonstDropUseItem',
      g_Config.boKillByMonstDropUseItem);
  g_Config.boKillByMonstDropUseItem := Config.ReadBool('Setup',
    'KillByMonstDropUseItem', g_Config.boKillByMonstDropUseItem);

  if Config.ReadInteger('Setup', 'KickExpireHuman', -1) < 0 then
    Config.WriteBool('Setup', 'KickExpireHuman', g_Config.boKickExpireHuman);
  g_Config.boKickExpireHuman := Config.ReadBool('Setup', 'KickExpireHuman',
    g_Config.boKickExpireHuman);

  if Config.ReadInteger('Setup', 'GuildRankNameLen', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildRankNameLen',
      g_Config.nGuildRankNameLen);
  g_Config.nGuildRankNameLen := Config.ReadInteger('Setup', 'GuildRankNameLen',
    g_Config.nGuildRankNameLen);

  if Config.ReadInteger('Setup', 'GuildNameLen', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildNameLen', g_Config.nGuildNameLen);
  g_Config.nGuildNameLen := Config.ReadInteger('Setup', 'GuildNameLen',
    g_Config.nGuildNameLen);

  if Config.ReadInteger('Setup', 'GuildMemberMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMemberMaxLimit',
      g_Config.nGuildMemberMaxLimit);
  g_Config.nGuildMemberMaxLimit := Config.ReadInteger('Setup',
    'GuildMemberMaxLimit', g_Config.nGuildMemberMaxLimit);

  if Config.ReadInteger('Setup', 'DefGuildMemberLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DefGuildMemberLimit',
      g_Config.nDefGuildMemberLimit);
  g_Config.nDefGuildMemberLimit := Config.ReadInteger('Setup',
    'DefGuildMemberLimit', g_Config.nDefGuildMemberLimit);

  if Config.ReadInteger('Setup', 'GuildMemberLevelInc', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMemberLevelInc',
      g_Config.nGuildMemberLevelInc);
  g_Config.nGuildMemberLevelInc := Config.ReadInteger('Setup',
    'GuildMemberLevelInc', g_Config.nGuildMemberLevelInc);

  if Config.ReadInteger('Setup', 'AttackPosionRate', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionRate',
      g_Config.nAttackPosionRate);
  g_Config.nAttackPosionRate := Config.ReadInteger('Setup', 'AttackPosionRate',
    g_Config.nAttackPosionRate);

  if Config.ReadInteger('Setup', 'AttackPosionTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionTime',
      g_Config.nAttackPosionTime);
  g_Config.nAttackPosionTime := Config.ReadInteger('Setup', 'AttackPosionTime',
    g_Config.nAttackPosionTime);

  if Config.ReadInteger('Setup', 'RevivalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RevivalTime', g_Config.dwRevivalTime);
  g_Config.dwRevivalTime := Config.ReadInteger('Setup', 'RevivalTime',
    g_Config.dwRevivalTime);

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveCanDupObj', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'UserMoveCanDupObj', g_Config.boUserMoveCanDupObj)
  else
    g_Config.boUserMoveCanDupObj := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveCanOnItem', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'UserMoveCanOnItem', g_Config.boUserMoveCanOnItem)
  else
    g_Config.boUserMoveCanOnItem := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UserMoveTime', g_Config.dwUserMoveTime)
  else
    g_Config.dwUserMoveTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PKDieLostExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PKDieLostExpRate', g_Config.dwPKDieLostExpRate)
  else
    g_Config.dwPKDieLostExpRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PKDieLostLevelRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PKDieLostLevelRate',
      g_Config.nPKDieLostLevelRate)
  else
    g_Config.nPKDieLostLevelRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'PKFlagNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKFlagNameColor', g_Config.btPKFlagNameColor);
  g_Config.btPKFlagNameColor := Config.ReadInteger('Setup', 'PKFlagNameColor',
    g_Config.btPKFlagNameColor);

  if Config.ReadInteger('Setup', 'AllyAndGuildNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'AllyAndGuildNameColor',
      g_Config.btAllyAndGuildNameColor);
  g_Config.btAllyAndGuildNameColor := Config.ReadInteger('Setup',
    'AllyAndGuildNameColor', g_Config.btAllyAndGuildNameColor);

  if Config.ReadInteger('Setup', 'WarGuildNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'WarGuildNameColor',
      g_Config.btWarGuildNameColor);
  g_Config.btWarGuildNameColor := Config.ReadInteger('Setup',
    'WarGuildNameColor', g_Config.btWarGuildNameColor);

  if Config.ReadInteger('Setup', 'InFreePKAreaNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'InFreePKAreaNameColor',
      g_Config.btInFreePKAreaNameColor);
  g_Config.btInFreePKAreaNameColor := Config.ReadInteger('Setup',
    'InFreePKAreaNameColor', g_Config.btInFreePKAreaNameColor);

  if Config.ReadInteger('Setup', 'PKLevel1NameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKLevel1NameColor',
      g_Config.btPKLevel1NameColor);
  g_Config.btPKLevel1NameColor := Config.ReadInteger('Setup',
    'PKLevel1NameColor', g_Config.btPKLevel1NameColor);

  if Config.ReadInteger('Setup', 'PKLevel2NameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKLevel2NameColor',
      g_Config.btPKLevel2NameColor);
  g_Config.btPKLevel2NameColor := Config.ReadInteger('Setup',
    'PKLevel2NameColor', g_Config.btPKLevel2NameColor);

  if Config.ReadInteger('Setup', 'SpiritMutiny', -1) < 0 then
    Config.WriteBool('Setup', 'SpiritMutiny', g_Config.boSpiritMutiny);
  g_Config.boSpiritMutiny := Config.ReadBool('Setup', 'SpiritMutiny',
    g_Config.boSpiritMutiny);

  if Config.ReadInteger('Setup', 'SpiritMutinyTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SpiritMutinyTime',
      g_Config.dwSpiritMutinyTime);
  g_Config.dwSpiritMutinyTime := Config.ReadInteger('Setup', 'SpiritMutinyTime',
    g_Config.dwSpiritMutinyTime);

  if Config.ReadInteger('Setup', 'SpiritPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SpiritPowerRate', g_Config.nSpiritPowerRate);
  g_Config.nSpiritPowerRate := Config.ReadInteger('Setup', 'SpiritPowerRate',
    g_Config.nSpiritPowerRate);

  if Config.ReadInteger('Setup', 'MasterDieMutiny', -1) < 0 then
    Config.WriteBool('Setup', 'MasterDieMutiny', g_Config.boMasterDieMutiny);
  g_Config.boMasterDieMutiny := Config.ReadBool('Setup', 'MasterDieMutiny',
    g_Config.boMasterDieMutiny);

  if Config.ReadInteger('Setup', 'MasterDieMutinyRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyRate',
      g_Config.nMasterDieMutinyRate);
  g_Config.nMasterDieMutinyRate := Config.ReadInteger('Setup',
    'MasterDieMutinyRate', g_Config.nMasterDieMutinyRate);

  if Config.ReadInteger('Setup', 'MasterDieMutinyPower', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyPower',
      g_Config.nMasterDieMutinyPower);
  g_Config.nMasterDieMutinyPower := Config.ReadInteger('Setup',
    'MasterDieMutinyPower', g_Config.nMasterDieMutinyPower);

  if Config.ReadInteger('Setup', 'MasterDieMutinyPower', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyPower',
      g_Config.nMasterDieMutinySpeed);
  g_Config.nMasterDieMutinySpeed := Config.ReadInteger('Setup',
    'MasterDieMutinyPower', g_Config.nMasterDieMutinySpeed);

  nLoadInteger := Config.ReadInteger('Setup', 'BBMonAutoChangeColor', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'BBMonAutoChangeColor',
      g_Config.boBBMonAutoChangeColor)
  else
    g_Config.boBBMonAutoChangeColor := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'BBMonAutoChangeColorTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BBMonAutoChangeColorTime',
      g_Config.dwBBMonAutoChangeColorTime)
  else
    g_Config.dwBBMonAutoChangeColorTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'OldClientShowHiLevel', -1) < 0 then
    Config.WriteBool('Setup', 'OldClientShowHiLevel',
      g_Config.boOldClientShowHiLevel);
  g_Config.boOldClientShowHiLevel := Config.ReadBool('Setup',
    'OldClientShowHiLevel', g_Config.boOldClientShowHiLevel);

  if Config.ReadInteger('Setup', 'ShowScriptActionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowScriptActionMsg',
      g_Config.boShowScriptActionMsg);
  g_Config.boShowScriptActionMsg := Config.ReadBool('Setup',
    'ShowScriptActionMsg', g_Config.boShowScriptActionMsg);

  if Config.ReadInteger('Setup', 'RunSocketDieLoopLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RunSocketDieLoopLimit',
      g_Config.nRunSocketDieLoopLimit);
  g_Config.nRunSocketDieLoopLimit := Config.ReadInteger('Setup',
    'RunSocketDieLoopLimit', g_Config.nRunSocketDieLoopLimit);

  if Config.ReadInteger('Setup', 'ThreadRun', -1) < 0 then
    Config.WriteBool('Setup', 'ThreadRun', g_Config.boThreadRun);
  g_Config.boThreadRun := Config.ReadBool('Setup', 'ThreadRun',
    g_Config.boThreadRun);

  if Config.ReadInteger('Setup', 'DeathColorEffect', -1) < 0 then
    Config.WriteInteger('Setup', 'DeathColorEffect',
      g_Config.ClientConf.btDieColor);
  g_Config.ClientConf.btDieColor := Config.ReadInteger('Setup',
    'DeathColorEffect', g_Config.ClientConf.btDieColor);

  if Config.ReadInteger('Setup', 'ParalyCanRun', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanRun',
      g_Config.ClientConf.boParalyCanRun);
  g_Config.ClientConf.boParalyCanRun := Config.ReadBool('Setup', 'ParalyCanRun',
    g_Config.ClientConf.boParalyCanRun);

  if Config.ReadInteger('Setup', 'ParalyCanWalk', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanWalk',
      g_Config.ClientConf.boParalyCanWalk);
  g_Config.ClientConf.boParalyCanWalk := Config.ReadBool('Setup',
    'ParalyCanWalk', g_Config.ClientConf.boParalyCanWalk);

  if Config.ReadInteger('Setup', 'ParalyCanHit', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanHit',
      g_Config.ClientConf.boParalyCanHit);
  g_Config.ClientConf.boParalyCanHit := Config.ReadBool('Setup', 'ParalyCanHit',
    g_Config.ClientConf.boParalyCanHit);

  if Config.ReadInteger('Setup', 'ParalyCanSpell', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanSpell',
      g_Config.ClientConf.boParalyCanSpell);
  g_Config.ClientConf.boParalyCanSpell := Config.ReadBool('Setup',
    'ParalyCanSpell', g_Config.ClientConf.boParalyCanSpell);

  if Config.ReadInteger('Setup', 'ShowExceptionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowExceptionMsg', g_Config.boShowExceptionMsg);
  g_Config.boShowExceptionMsg := Config.ReadBool('Setup', 'ShowExceptionMsg',
    g_Config.boShowExceptionMsg);

  if Config.ReadInteger('Setup', 'ShowPreFixMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowPreFixMsg', g_Config.boShowPreFixMsg);
  g_Config.boShowPreFixMsg := Config.ReadBool('Setup', 'ShowPreFixMsg',
    g_Config.boShowPreFixMsg);

  if Config.ReadInteger('Setup', 'MagTurnUndeadLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'MagTurnUndeadLevel',
      g_Config.nMagTurnUndeadLevel);
  g_Config.nMagTurnUndeadLevel := Config.ReadInteger('Setup',
    'MagTurnUndeadLevel', g_Config.nMagTurnUndeadLevel);

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingLevel', g_Config.nMagTammingLevel)
  else
    g_Config.nMagTammingLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingTargetLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingTargetLevel',
      g_Config.nMagTammingTargetLevel)
  else
    g_Config.nMagTammingTargetLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingTargetHPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingTargetHPRate', g_Config.nMagTammingHPRate)
  else
    g_Config.nMagTammingHPRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'EtenMagicSize', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'EtenMagicSize', g_Config.nEtenMagicSize)
  else
    g_Config.nEtenMagicSize := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'EtenPowerRate', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'EtenPowerRate', g_Config.nEtenPowerRate)
  else g_Config.nEtenPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldRunRate0', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldRunRate0', g_Config.nProtectShieldRunRate0)
  else g_Config.nProtectShieldRunRate0 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldRunRate1', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldRunRate1', g_Config.nProtectShieldRunRate1)
  else g_Config.nProtectShieldRunRate1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldRunRate2', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldRunRate2', g_Config.nProtectShieldRunRate2)
  else g_Config.nProtectShieldRunRate2 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldRunRate3', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldRunRate3', g_Config.nProtectShieldRunRate3)
  else g_Config.nProtectShieldRunRate3 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldDelDamage0', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldDelDamage0', g_Config.nProtectShieldDelDamage0)
  else g_Config.nProtectShieldDelDamage0 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldDelDamage1', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldDelDamage1', g_Config.nProtectShieldDelDamage1)
  else g_Config.nProtectShieldDelDamage1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldDelDamage2', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldDelDamage2', g_Config.nProtectShieldDelDamage2)
  else g_Config.nProtectShieldDelDamage2 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProtectShieldDelDamage3', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'ProtectShieldDelDamage3', g_Config.nProtectShieldDelDamage3)
  else g_Config.nProtectShieldDelDamage3 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingCount', g_Config.nMagTammingCount)
  else
    g_Config.nMagTammingCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitRandRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitRandRate',
      g_Config.nMabMabeHitRandRate)
  else
    g_Config.nMabMabeHitRandRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitMinLvLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitMinLvLimit',
      g_Config.nMabMabeHitMinLvLimit)
  else
    g_Config.nMabMabeHitMinLvLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitSucessRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitSucessRate',
      g_Config.nMabMabeHitSucessRate)
  else
    g_Config.nMabMabeHitSucessRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitMabeTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitMabeTimeRate', g_Config.nMabMabeHitMabeTimeRate)
  else
    g_Config.nMabMabeHitMabeTimeRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MakeMagicAddPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeMagicAddPoint', g_Config.btMakeMagicAddPoint)
  else
    g_Config.btMakeMagicAddPoint := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MakeMagicUsePoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeMagicUsePoint', g_Config.btMakeMagicUsePoint)
  else
    g_Config.btMakeMagicUsePoint := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MakeMagicAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeMagicAddRate', g_Config.btMakeMagicAddRate)
  else
    g_Config.btMakeMagicAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MakeMagicMaxLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeMagicMaxLevel', g_Config.btMakeMagicMaxLevel)
  else
    g_Config.btMakeMagicMaxLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MakeMagicBeginLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeMagicBeginLevel', g_Config.nMakeMagicBeginLevel)
  else
    g_Config.nMakeMagicBeginLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagicAttackRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicAttackRage', g_Config.nMagicAttackRage)
  else
    g_Config.nMagicAttackRage := nLoadInteger;

  for k := Low(g_Config.MakeMagicConfine) to High(g_Config.MakeMagicConfine) do begin
    for I := Low(g_Config.MakeMagicConfine[k]) to High(g_Config.MakeMagicConfine[k]) do begin
      nLoadInteger := Config.ReadInteger('Setup', 'MakeMagic' + MAKEMAGICSAVENAME[k] + 'MagicLevel' + IntToStr(I + 1), -1);
      if nLoadInteger < 0 then
        Config.WriteInteger('Setup', 'MakeMagic' + MAKEMAGICSAVENAME[k] + 'MagicLevel' + IntToStr(I + 1), g_Config.MakeMagicConfine[k][I].nMagicLevel)
      else
        g_Config.MakeMagicConfine[k][I].nMagicLevel := nLoadInteger;

      nLoadInteger := Config.ReadInteger('Setup', 'MakeMagic' + MAKEMAGICSAVENAME[k] + 'HumLevel' + IntToStr(I + 1), -1);
      if nLoadInteger < 0 then
        Config.WriteInteger('Setup', 'MakeMagic' + MAKEMAGICSAVENAME[k] + 'HumLevel' + IntToStr(I + 1), g_Config.MakeMagicConfine[k][I].nHumLevel)
      else
        g_Config.MakeMagicConfine[k][I].nHumLevel := nLoadInteger;
    end;
  end;

  for I := Low(g_Config.LiteraryConfine) to High(g_Config.LiteraryConfine) do begin
    nLoadInteger := Config.ReadInteger('Setup', 'LiteraryCount' + IntToStr(I + 1), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'LiteraryCount' + IntToStr(I + 1), g_Config.LiteraryConfine[i].nLiteraryCount)
    else
      g_Config.LiteraryConfine[i].nLiteraryCount := nLoadInteger;

    nLoadInteger := Config.ReadInteger('Setup', 'LiteraryExpRate' + IntToStr(I + 1), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'LiteraryExpRate' + IntToStr(I + 1), g_Config.LiteraryConfine[i].nExpRate)
    else
      g_Config.LiteraryConfine[i].nExpRate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'AmyOunsulPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AmyOunsulPoint', g_Config.nAmyOunsulPoint)
  else
    g_Config.nAmyOunsulPoint := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'DisableInSafeZoneFireCross', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'DisableInSafeZoneFireCross',
      g_Config.boDisableInSafeZoneFireCross)
  else
    g_Config.boDisableInSafeZoneFireCross := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'GroupMbAttackPlayObject', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackPlayObject',
      g_Config.boGroupMbAttackPlayObject)
  else
    g_Config.boGroupMbAttackPlayObject := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'PosionDecHealthTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PosionDecHealthTime',
      g_Config.dwPosionDecHealthTime)
  else
    g_Config.dwPosionDecHealthTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PosionDamagarmor', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PosionDamagarmor', g_Config.nPosionDamagarmor)
  else
    g_Config.nPosionDamagarmor := nLoadInteger;


  SetIntStatus(g_Config.nSetupInfo, M2SETUP_SHOWCBOFORM, True);
  SetIntStatus(g_Config.nSetupInfo, M2SETUP_SHOWMAKEMAGICFORM, True);
  g_Config.nSetupInfo := Config.ReadInteger('Setup', 'SetupInfo', g_Config.nSetupInfo);
  {if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SetupInfo', g_Config.nSetupInfo)
  else
    g_Config.nSetupInfo := nLoadInteger;    }

  nLoadInteger := Config.ReadInteger('Setup', 'ExpIsCumulative', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ExpIsCumulative', g_Config.boExpIsCumulative);
  end
  else begin
    g_Config.boExpIsCumulative := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ExpOffLienSave', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ExpOffLienSave', g_Config.boExpOffLienSave);
  end
  else begin
    g_Config.boExpOffLienSave := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ExpOffLineRunTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ExpOffLineRunTime', g_Config.boExpOffLineRunTime);
  end
  else begin
    g_Config.boExpOffLineRunTime := nLoadInteger = 1;
  end;


  nLoadInteger := Config.ReadInteger('Setup', 'LimitSwordLong', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'LimitSwordLong', g_Config.boLimitSwordLong)
  else
    g_Config.boLimitSwordLong := not (nLoadInteger = 0);

  nLoadInteger := Config.ReadInteger('Setup', 'SwordLongPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SwordLongPowerRate', g_Config.nSwordLongPowerRate)
  else
    g_Config.nSwordLongPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill110PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill110PowerRate', g_Config.nSkill110PowerRate)
  else
    g_Config.nSkill110PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill111PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill111PowerRate', g_Config.nSkill111PowerRate)
  else
    g_Config.nSkill111PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill112PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill112PowerRate', g_Config.nSkill112PowerRate)
  else
    g_Config.nSkill112PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill113PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill113PowerRate', g_Config.nSkill113PowerRate)
  else
    g_Config.nSkill113PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill114PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill114PowerRate', g_Config.nSkill114PowerRate)
  else
    g_Config.nSkill114PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill115PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill115PowerRate', g_Config.nSkill115PowerRate)
  else
    g_Config.nSkill115PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill116PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill116PowerRate', g_Config.nSkill116PowerRate)
  else
    g_Config.nSkill116PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill117PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill117PowerRate', g_Config.nSkill117PowerRate)
  else
    g_Config.nSkill117PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill118PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill118PowerRate', g_Config.nSkill118PowerRate)
  else
    g_Config.nSkill118PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill119PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill119PowerRate', g_Config.nSkill119PowerRate)
  else
    g_Config.nSkill119PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill120PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill120PowerRate', g_Config.nSkill120PowerRate)
  else
    g_Config.nSkill120PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill121PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill121PowerRate', g_Config.nSkill121PowerRate)
  else
    g_Config.nSkill121PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill70PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill70PowerRate', g_Config.nSkill70PowerRate)
  else
    g_Config.nSkill70PowerRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'Skill70MbAttackMon', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70MbAttackMon', g_Config.boSkill70MbAttackMon);
  g_Config.boSkill70MbAttackMon := Config.ReadBool('Setup', 'Skill70MbAttackMon', g_Config.boSkill70MbAttackMon);

  if Config.ReadInteger('Setup', 'Skill70MbAttackHuman', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70MbAttackHuman', g_Config.boSkill70MbAttackHuman);
  g_Config.boSkill70MbAttackHuman := Config.ReadBool('Setup', 'Skill70MbAttackHuman', g_Config.boSkill70MbAttackHuman);

  if Config.ReadInteger('Setup', 'Skill70MbAttackSlave', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70MbAttackSlave', g_Config.boSkill70MbAttackSlave);
  g_Config.boSkill70MbAttackSlave := Config.ReadBool('Setup', 'Skill70MbAttackSlave', g_Config.boSkill70MbAttackSlave);

  if Config.ReadInteger('Setup', 'Skill70MbFastParalysis', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70MbFastParalysis', g_Config.boSkill70MbFastParalysis);
  g_Config.boSkill70MbFastParalysis := Config.ReadBool('Setup', 'Skill70MbFastParalysis', g_Config.boSkill70MbFastParalysis);

  if Config.ReadInteger('Setup', 'Skill70RunHum', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70RunHum', g_Config.boSkill70RunHum);
  g_Config.boSkill70RunHum := Config.ReadBool('Setup', 'Skill70RunHum', g_Config.boSkill70RunHum);

  if Config.ReadInteger('Setup', 'Skill70RunMon', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70RunMon', g_Config.boSkill70RunMon);
  g_Config.boSkill70RunMon := Config.ReadBool('Setup', 'Skill70RunMon', g_Config.boSkill70RunMon);

  if Config.ReadInteger('Setup', 'Skill70RunNpc', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70RunNpc', g_Config.boSkill70RunNpc);
  g_Config.boSkill70RunNpc := Config.ReadBool('Setup', 'Skill70RunNpc', g_Config.boSkill70RunNpc);

  if Config.ReadInteger('Setup', 'Skill70RunGuard', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70RunGuard', g_Config.boSkill70RunGuard);
  g_Config.boSkill70RunGuard := Config.ReadBool('Setup', 'Skill70RunGuard', g_Config.boSkill70RunGuard);

  if Config.ReadInteger('Setup', 'Skill70WarDisHumRun', -1) < 0 then
    Config.WriteBool('Setup', 'Skill70WarDisHumRun', g_Config.boSkill70WarDisHumRun);
  g_Config.boSkill70WarDisHumRun := Config.ReadBool('Setup', 'Skill70WarDisHumRun', g_Config.boSkill70WarDisHumRun);


  if Config.ReadInteger('Setup', 'Skill63RunHum', -1) < 0 then
    Config.WriteBool('Setup', 'Skill63RunHum', g_Config.boSkill63RunHum);
  g_Config.boSkill63RunHum := Config.ReadBool('Setup', 'Skill63RunHum', g_Config.boSkill63RunHum);

  if Config.ReadInteger('Setup', 'Skill63RunMon', -1) < 0 then
    Config.WriteBool('Setup', 'Skill63RunMon', g_Config.boSkill63RunMon);
  g_Config.boSkill63RunMon := Config.ReadBool('Setup', 'Skill63RunMon', g_Config.boSkill63RunMon);

  if Config.ReadInteger('Setup', 'Skill63RunNpc', -1) < 0 then
    Config.WriteBool('Setup', 'Skill63RunNpc', g_Config.boSkill63RunNpc);
  g_Config.boSkill63RunNpc := Config.ReadBool('Setup', 'Skill63RunNpc', g_Config.boSkill63RunNpc);

  if Config.ReadInteger('Setup', 'Skill63RunGuard', -1) < 0 then
    Config.WriteBool('Setup', 'Skill63RunGuard', g_Config.boSkill63RunGuard);
  g_Config.boSkill63RunGuard := Config.ReadBool('Setup', 'Skill63RunGuard', g_Config.boSkill63RunGuard);

  if Config.ReadInteger('Setup', 'Skill63WarDisHumRun', -1) < 0 then
    Config.WriteBool('Setup', 'Skill63WarDisHumRun', g_Config.boSkill63WarDisHumRun);
  g_Config.boSkill63WarDisHumRun := Config.ReadBool('Setup', 'Skill63WarDisHumRun', g_Config.boSkill63WarDisHumRun);

  nLoadInteger := Config.ReadInteger('Setup', 'Skill71PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill71PowerRate', g_Config.nSkill71PowerRate)
  else
    g_Config.nSkill71PowerRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'Skill71MbAttackMon', -1) < 0 then
    Config.WriteBool('Setup', 'Skill71MbAttackMon', g_Config.boSkill71MbAttackMon);
  g_Config.boSkill71MbAttackMon := Config.ReadBool('Setup', 'Skill71MbAttackMon', g_Config.boSkill71MbAttackMon);

  if Config.ReadInteger('Setup', 'Skill71MbAttackHuman', -1) < 0 then
    Config.WriteBool('Setup', 'Skill71MbAttackHuman', g_Config.boSkill71MbAttackHuman);
  g_Config.boSkill71MbAttackHuman := Config.ReadBool('Setup', 'Skill71MbAttackHuman', g_Config.boSkill71MbAttackHuman);

  if Config.ReadInteger('Setup', 'Skill71MbAttackSlave', -1) < 0 then
    Config.WriteBool('Setup', 'Skill71MbAttackSlave', g_Config.boSkill71MbAttackSlave);
  g_Config.boSkill71MbAttackSlave := Config.ReadBool('Setup', 'Skill71MbAttackSlave', g_Config.boSkill71MbAttackSlave);

  if Config.ReadInteger('Setup', 'Skill71MbFastParalysis', -1) < 0 then
    Config.WriteBool('Setup', 'Skill71MbFastParalysis', g_Config.boSkill71MbFastParalysis);
  g_Config.boSkill71MbFastParalysis := Config.ReadBool('Setup', 'Skill71MbFastParalysis', g_Config.boSkill71MbFastParalysis);


  nLoadInteger := Config.ReadInteger('Setup', 'Skill72PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill72PowerRate', g_Config.nSkill72PowerRate)
  else
    g_Config.nSkill72PowerRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'Skill72MbAttackMon', -1) < 0 then
    Config.WriteBool('Setup', 'Skill72MbAttackMon', g_Config.boSkill72MbAttackMon);
  g_Config.boSkill72MbAttackMon := Config.ReadBool('Setup', 'Skill72MbAttackMon', g_Config.boSkill72MbAttackMon);

  if Config.ReadInteger('Setup', 'Skill72MbAttackHuman', -1) < 0 then
    Config.WriteBool('Setup', 'Skill72MbAttackHuman', g_Config.boSkill72MbAttackHuman);
  g_Config.boSkill72MbAttackHuman := Config.ReadBool('Setup', 'Skill72MbAttackHuman', g_Config.boSkill72MbAttackHuman);

  if Config.ReadInteger('Setup', 'Skill72MbAttackSlave', -1) < 0 then
    Config.WriteBool('Setup', 'Skill72MbAttackSlave', g_Config.boSkill72MbAttackSlave);
  g_Config.boSkill72MbAttackSlave := Config.ReadBool('Setup', 'Skill72MbAttackSlave', g_Config.boSkill72MbAttackSlave);

  if Config.ReadInteger('Setup', 'Skill72Damagearmor', -1) < 0 then
    Config.WriteBool('Setup', 'Skill72Damagearmor', g_Config.boSkill72Damagearmor);
  g_Config.boSkill72Damagearmor := Config.ReadBool('Setup', 'Skill72Damagearmor', g_Config.boSkill72Damagearmor);

  if Config.ReadInteger('Setup', 'Skill72DecHealth', -1) < 0 then
    Config.WriteBool('Setup', 'Skill72DecHealth', g_Config.boSkill72DecHealth);
  g_Config.boSkill72DecHealth := Config.ReadBool('Setup', 'Skill72DecHealth', g_Config.boSkill72DecHealth);

  if Config.ReadInteger('Setup', 'Skill72MbFastParalysis', -1) < 0 then
    Config.WriteBool('Setup', 'Skill72MbFastParalysis', g_Config.boSkill72MbFastParalysis);
  g_Config.boSkill72MbFastParalysis := Config.ReadBool('Setup', 'Skill72MbFastParalysis', g_Config.boSkill72MbFastParalysis);

  if Config.ReadInteger('Setup', 'Allow32HorseGetExp', -1) < 0 then
    Config.WriteBool('Setup', 'Allow32HorseGetExp', g_Config.boAllow32HorseGetExp);
  g_Config.boAllow32HorseGetExp := Config.ReadBool('Setup', 'Allow32HorseGetExp', g_Config.boAllow32HorseGetExp);

  nLoadInteger := Config.ReadInteger('Setup', '32HorseGetExpRate', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', '32HorseGetExpRate', g_Config.n32HorseGetExpRate)
  else g_Config.n32HorseGetExpRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'Allow33HorseGetExp', -1) < 0 then
    Config.WriteBool('Setup', 'Allow33HorseGetExp', g_Config.boAllow33HorseGetExp);
  g_Config.boAllow33HorseGetExp := Config.ReadBool('Setup', 'Allow33HorseGetExp', g_Config.boAllow33HorseGetExp);

  nLoadInteger := Config.ReadInteger('Setup', '33HorseGetExpRate', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', '33HorseGetExpRate', g_Config.n33HorseGetExpRate)
  else g_Config.n33HorseGetExpRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', '33HorseGetExpRate2', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', '33HorseGetExpRate2', g_Config.n33HorseGetExpRate2)
  else g_Config.n33HorseGetExpRate2 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'HorseAliveTime', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'HorseAliveTime', g_Config.nHorseAliveTime)
  else g_Config.nHorseAliveTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'TakeOnHorseUseTime', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'TakeOnHorseUseTime', g_Config.nTakeOnHorseUseTime)
  else g_Config.nTakeOnHorseUseTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'DomesticationRate', -1);
  if nLoadInteger < 0 then Config.WriteInteger('Setup', 'DomesticationRate', g_Config.nDomesticationRate)
  else g_Config.nDomesticationRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'DomesticationUseWeapon', -1) < 0 then
    Config.WriteBool('Setup', 'DomesticationUseWeapon', g_Config.boDomesticationUseWeapon);
  g_Config.boDomesticationUseWeapon := Config.ReadBool('Setup', 'DomesticationUseWeapon', g_Config.boDomesticationUseWeapon);

  if Config.ReadInteger('Setup', 'DomesticationCheckLevel', -1) < 0 then
    Config.WriteBool('Setup', 'DomesticationCheckLevel', g_Config.boDomesticationCheckLevel);
  g_Config.boDomesticationCheckLevel := Config.ReadBool('Setup', 'DomesticationCheckLevel', g_Config.boDomesticationCheckLevel);



  nLoadInteger := Config.ReadInteger('Setup', 'FireBoomRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FireBoomRage', g_Config.nFireBoomRage)
  else
    g_Config.nFireBoomRage := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SnowWindRange', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SnowWindRange', g_Config.nSnowWindRange)
  else
    g_Config.nSnowWindRange := nLoadInteger;

  if Config.ReadInteger('Setup', 'ElecBlizzardRange', -1) < 0 then
    Config.WriteInteger('Setup', 'ElecBlizzardRange',
      g_Config.nElecBlizzardRange);
  g_Config.nElecBlizzardRange := Config.ReadInteger('Setup',
    'ElecBlizzardRange', g_Config.nElecBlizzardRange);

  if Config.ReadInteger('Setup', 'HumanLevelDiffer', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanLevelDiffer',
      g_Config.nHumanLevelDiffer);
  g_Config.nHumanLevelDiffer := Config.ReadInteger('Setup', 'HumanLevelDiffer',
    g_Config.nHumanLevelDiffer);

  if Config.ReadInteger('Setup', 'KillHumanWinLevel', -1) < 0 then
    Config.WriteBool('Setup', 'KillHumanWinLevel',
      g_Config.boKillHumanWinLevel);
  g_Config.boKillHumanWinLevel := Config.ReadBool('Setup', 'KillHumanWinLevel',
    g_Config.boKillHumanWinLevel);

  if Config.ReadInteger('Setup', 'KilledLostLevel', -1) < 0 then
    Config.WriteBool('Setup', 'KilledLostLevel', g_Config.boKilledLostLevel);
  g_Config.boKilledLostLevel := Config.ReadBool('Setup', 'KilledLostLevel',
    g_Config.boKilledLostLevel);

  if Config.ReadInteger('Setup', 'KillHumanWinLevelPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanWinLevelPoint',
      g_Config.nKillHumanWinLevel);
  g_Config.nKillHumanWinLevel := Config.ReadInteger('Setup',
    'KillHumanWinLevelPoint', g_Config.nKillHumanWinLevel);

  if Config.ReadInteger('Setup', 'KilledLostLevelPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KilledLostLevelPoint',
      g_Config.nKilledLostLevel);
  g_Config.nKilledLostLevel := Config.ReadInteger('Setup',
    'KilledLostLevelPoint', g_Config.nKilledLostLevel);

  if Config.ReadInteger('Setup', 'KillHumanWinExp', -1) < 0 then
    Config.WriteBool('Setup', 'KillHumanWinExp', g_Config.boKillHumanWinExp);
  g_Config.boKillHumanWinExp := Config.ReadBool('Setup', 'KillHumanWinExp',
    g_Config.boKillHumanWinExp);

  if Config.ReadInteger('Setup', 'KilledLostExp', -1) < 0 then
    Config.WriteBool('Setup', 'KilledLostExp', g_Config.boKilledLostExp);
  g_Config.boKilledLostExp := Config.ReadBool('Setup', 'KilledLostExp',
    g_Config.boKilledLostExp);

  if Config.ReadInteger('Setup', 'KillHumanWinExpPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanWinExpPoint',
      g_Config.nKillHumanWinExp);
  g_Config.nKillHumanWinExp := Config.ReadInteger('Setup',
    'KillHumanWinExpPoint', g_Config.nKillHumanWinExp);

  if Config.ReadInteger('Setup', 'KillHumanLostExpPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanLostExpPoint',
      g_Config.nKillHumanLostExp);
  g_Config.nKillHumanLostExp := Config.ReadInteger('Setup',
    'KillHumanLostExpPoint', g_Config.nKillHumanLostExp);

  if Config.ReadInteger('Setup', 'MonsterPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MonsterPowerRate',
      g_Config.nMonsterPowerRate);
  g_Config.nMonsterPowerRate := Config.ReadInteger('Setup', 'MonsterPowerRate',
    g_Config.nMonsterPowerRate);

  if Config.ReadInteger('Setup', 'ItemsPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemsPowerRate', g_Config.nItemsPowerRate);
  g_Config.nItemsPowerRate := Config.ReadInteger('Setup', 'ItemsPowerRate',
    g_Config.nItemsPowerRate);

  if Config.ReadInteger('Setup', 'ItemsACPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemsACPowerRate',
      g_Config.nItemsACPowerRate);
  g_Config.nItemsACPowerRate := Config.ReadInteger('Setup', 'ItemsACPowerRate',
    g_Config.nItemsACPowerRate);

  if Config.ReadInteger('Setup', 'SendOnlineCount', -1) < 0 then
    Config.WriteBool('Setup', 'SendOnlineCount', g_Config.boSendOnlineCount);
  g_Config.boSendOnlineCount := Config.ReadBool('Setup', 'SendOnlineCount',
    g_Config.boSendOnlineCount);

  if Config.ReadInteger('Setup', 'SendOnlineCountRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SendOnlineCountRate',
      g_Config.nSendOnlineCountRate);
  g_Config.nSendOnlineCountRate := Config.ReadInteger('Setup',
    'SendOnlineCountRate', g_Config.nSendOnlineCountRate);

  if Config.ReadInteger('Setup', 'SendOnlineTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SendOnlineTime', g_Config.dwSendOnlineTime);
  g_Config.dwSendOnlineTime := Config.ReadInteger('Setup', 'SendOnlineTime',
    g_Config.dwSendOnlineTime);

  if Config.ReadInteger('Setup', 'SaveHumanRcdTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SaveHumanRcdTime', g_Config.dwSaveHumanRcdTime);
  g_Config.dwSaveHumanRcdTime := Config.ReadInteger('Setup', 'SaveHumanRcdTime', g_Config.dwSaveHumanRcdTime);

  if Config.ReadInteger('Setup', 'HumanFreeDelayTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanFreeDelayTime', g_Config.dwHumanFreeDelayTime);

  if Config.ReadInteger('Setup', 'HumDieMaxTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HumDieMaxTime', g_Config.dwHumDieMaxTime);
  g_Config.dwHumDieMaxTime := Config.ReadInteger('Setup', 'HumDieMaxTime', g_Config.dwHumDieMaxTime);

  if Config.ReadInteger('Setup', 'MakeGhostTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeGhostTime', g_Config.dwMakeGhostTime);
  g_Config.dwMakeGhostTime := Config.ReadInteger('Setup', 'MakeGhostTime', g_Config.dwMakeGhostTime);

  if Config.ReadInteger('Setup', 'ClearDropOnFloorItemTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ClearDropOnFloorItemTime',
      g_Config.dwClearDropOnFloorItemTime);
  g_Config.dwClearDropOnFloorItemTime := Config.ReadInteger('Setup',
    'ClearDropOnFloorItemTime', g_Config.dwClearDropOnFloorItemTime);

  if Config.ReadInteger('Setup', 'FloorItemCanPickUpTime', -1) < 0 then
    Config.WriteInteger('Setup', 'FloorItemCanPickUpTime', g_Config.dwFloorItemCanPickUpTime);
  g_Config.dwFloorItemCanPickUpTime := Config.ReadInteger('Setup', 'FloorItemCanPickUpTime', g_Config.dwFloorItemCanPickUpTime);

  if Config.ReadInteger('Setup', 'EatTick', -1) < 0 then
    Config.WriteInteger('Setup', 'EatTick', g_Config.dwEatTick);
  g_Config.dwEatTick := Config.ReadInteger('Setup', 'EatTick', g_Config.dwEatTick);

  if Config.ReadInteger('Setup', 'SoftVersionDate', -1) < 0 then
    Config.WriteInteger('Setup', 'SoftVersionDate', g_Config.nSoftVersionDate);
  g_Config.nSoftVersionDate := Config.ReadInteger('Setup', 'SoftVersionDate',
    g_Config.nSoftVersionDate);

  nLoadInteger := Config.ReadInteger('Setup', 'CanNewCall', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'CanNewCall', g_Config.boCanNewCall)
  else
    g_Config.boCanNewCall := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'ConsoleShowUserCountTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ConsoleShowUserCountTime',
      g_Config.dwConsoleShowUserCountTime);
  g_Config.dwConsoleShowUserCountTime := Config.ReadInteger('Setup',
    'ConsoleShowUserCountTime', g_Config.dwConsoleShowUserCountTime);

  if Config.ReadInteger('Setup', 'ShowLineNoticeTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowLineNoticeTime',
      g_Config.dwShowLineNoticeTime);
  g_Config.dwShowLineNoticeTime := Config.ReadInteger('Setup',
    'ShowLineNoticeTime', g_Config.dwShowLineNoticeTime);

  if Config.ReadInteger('Setup', 'LineNoticeColor', -1) < 0 then
    Config.WriteInteger('Setup', 'LineNoticeColor', g_Config.nLineNoticeColor);
  g_Config.nLineNoticeColor := Config.ReadInteger('Setup', 'LineNoticeColor',
    g_Config.nLineNoticeColor);

  if Config.ReadInteger('Setup', 'ItemSpeedTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemSpeedTime',
      g_Config.ClientConf.btItemSpeed);
  g_Config.ClientConf.btItemSpeed := Config.ReadInteger('Setup',
    'ItemSpeedTime', g_Config.ClientConf.btItemSpeed);

  if Config.ReadInteger('Setup', 'MaxHitMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxHitMsgCount', g_Config.nMaxHitMsgCount);
  g_Config.nMaxHitMsgCount := Config.ReadInteger('Setup', 'MaxHitMsgCount',
    g_Config.nMaxHitMsgCount);

  if Config.ReadInteger('Setup', 'MaxSpellMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxSpellMsgCount',
      g_Config.nMaxSpellMsgCount);
  g_Config.nMaxSpellMsgCount := Config.ReadInteger('Setup', 'MaxSpellMsgCount',
    g_Config.nMaxSpellMsgCount);

  if Config.ReadInteger('Setup', 'MaxRunMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxRunMsgCount', g_Config.nMaxRunMsgCount);
  g_Config.nMaxRunMsgCount := Config.ReadInteger('Setup', 'MaxRunMsgCount',
    g_Config.nMaxRunMsgCount);

  if Config.ReadInteger('Setup', 'MaxWalkMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxWalkMsgCount', g_Config.nMaxWalkMsgCount);
  g_Config.nMaxWalkMsgCount := Config.ReadInteger('Setup', 'MaxWalkMsgCount',
    g_Config.nMaxWalkMsgCount);

  if Config.ReadInteger('Setup', 'MaxTurnMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxTurnMsgCount', g_Config.nMaxTurnMsgCount);
  g_Config.nMaxTurnMsgCount := Config.ReadInteger('Setup', 'MaxTurnMsgCount',
    g_Config.nMaxTurnMsgCount);

  if Config.ReadInteger('Setup', 'MaxSitDonwMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxSitDonwMsgCount',
      g_Config.nMaxSitDonwMsgCount);
  g_Config.nMaxSitDonwMsgCount := Config.ReadInteger('Setup',
    'MaxSitDonwMsgCount', g_Config.nMaxSitDonwMsgCount);

  if Config.ReadInteger('Setup', 'MaxDigUpMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxDigUpMsgCount',
      g_Config.nMaxDigUpMsgCount);
  g_Config.nMaxDigUpMsgCount := Config.ReadInteger('Setup', 'MaxDigUpMsgCount',
    g_Config.nMaxDigUpMsgCount);

  if Config.ReadInteger('Setup', 'MaxButchMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxButchMsgCount',
      g_Config.nMaxButchMsgCount);
  g_Config.nMaxButchMsgCount := Config.ReadInteger('Setup', 'MaxButchMsgCount',
    g_Config.nMaxButchMsgCount);

  if Config.ReadInteger('Setup', 'SpellSendUpdateMsg', -1) < 0 then
    Config.WriteBool('Setup', 'SpellSendUpdateMsg',
      g_Config.boSpellSendUpdateMsg);
  g_Config.boSpellSendUpdateMsg := Config.ReadBool('Setup',
    'SpellSendUpdateMsg', g_Config.boSpellSendUpdateMsg);

  if Config.ReadInteger('Setup', 'ActionSendActionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ActionSendActionMsg',
      g_Config.boActionSendActionMsg);
  g_Config.boActionSendActionMsg := Config.ReadBool('Setup',
    'ActionSendActionMsg', g_Config.boActionSendActionMsg);

  if Config.ReadInteger('Setup', 'OverSpeedKickCount', -1) < 0 then
    Config.WriteInteger('Setup', 'OverSpeedKickCount',
      g_Config.nOverSpeedKickCount);
  g_Config.nOverSpeedKickCount := Config.ReadInteger('Setup',
    'OverSpeedKickCount', g_Config.nOverSpeedKickCount);

  if Config.ReadInteger('Setup', 'DropOverSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'DropOverSpeed', g_Config.dwDropOverSpeed);
  g_Config.dwDropOverSpeed := Config.ReadInteger('Setup', 'DropOverSpeed',
    g_Config.dwDropOverSpeed);

  if Config.ReadInteger('Setup', 'KickOverSpeed', -1) < 0 then
    Config.WriteBool('Setup', 'KickOverSpeed', g_Config.boKickOverSpeed);
  g_Config.boKickOverSpeed := Config.ReadBool('Setup', 'KickOverSpeed',
    g_Config.boKickOverSpeed);

  nLoadInteger := Config.ReadInteger('Setup', 'SpeedControlMode', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpeedControlMode', g_Config.btSpeedControlMode)
  else
    g_Config.btSpeedControlMode := nLoadInteger;

  if Config.ReadInteger('Setup', 'HitFrameTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HitFrameTime', g_Config.dwHitFrameTime);
  g_Config.dwHitFrameTime := Config.ReadInteger('Setup', 'HitFrameTime',
    g_Config.dwHitFrameTime);

  if Config.ReadInteger('Setup', 'MagicHitFrameTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MagicHitFrameTime',
      g_Config.dwMagicHitFrameTime);
  g_Config.dwMagicHitFrameTime := Config.ReadInteger('Setup',
    'MagicHitFrameTime', g_Config.dwMagicHitFrameTime);

  if Config.ReadInteger('Setup', 'HitIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HitIntervalTime', g_Config.dwHitIntervalTime);
  g_Config.dwHitIntervalTime := Config.ReadInteger('Setup', 'HitIntervalTime',
    g_Config.dwHitIntervalTime);

  if Config.ReadInteger('Setup', 'MagicHitIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MagicHitIntervalTime',
      g_Config.dwMagicHitIntervalTime);
  g_Config.dwMagicHitIntervalTime := Config.ReadInteger('Setup',
    'MagicHitIntervalTime', g_Config.dwMagicHitIntervalTime);

  if Config.ReadInteger('Setup', 'RunIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RunIntervalTime', g_Config.dwRunIntervalTime);
  g_Config.dwRunIntervalTime := Config.ReadInteger('Setup', 'RunIntervalTime',
    g_Config.dwRunIntervalTime);

  if Config.ReadInteger('Setup', 'WalkIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'WalkIntervalTime',
      g_Config.dwWalkIntervalTime);
  g_Config.dwWalkIntervalTime := Config.ReadInteger('Setup', 'WalkIntervalTime',
    g_Config.dwWalkIntervalTime);

  if Config.ReadInteger('Setup', 'TurnIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'TurnIntervalTime',
      g_Config.dwTurnIntervalTime);
  g_Config.dwTurnIntervalTime := Config.ReadInteger('Setup', 'TurnIntervalTime',
    g_Config.dwTurnIntervalTime);

  if Config.ReadInteger('Setup', 'ButchIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ButchIntervalTime',
      g_Config.dwButchIntervalTime);
  g_Config.dwButchIntervalTime := Config.ReadInteger('Setup', 'ButchIntervalTime',
    g_Config.dwButchIntervalTime);

  nLoadInteger := Config.ReadInteger('Setup', 'ControlActionInterval', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlActionInterval',
      g_Config.boControlActionInterval);
  end
  else begin
    g_Config.boControlActionInterval := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlWalkHit', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlWalkHit', g_Config.boControlWalkHit);
  end
  else begin
    g_Config.boControlWalkHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunLongHit', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlRunLongHit',
      g_Config.boControlRunLongHit);
  end
  else begin
    g_Config.boControlRunLongHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunHit', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlRunHit', g_Config.boControlRunHit);
  end
  else begin
    g_Config.boControlRunHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunMagic', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlRunMagic', g_Config.boControlRunMagic);
  end
  else begin
    g_Config.boControlRunMagic := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ActionIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'ActionIntervalTime',
      g_Config.dwActionIntervalTime);
  end
  else begin
    g_Config.dwActionIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunLongHitIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'RunLongHitIntervalTime',
      g_Config.dwRunLongHitIntervalTime);
  end
  else begin
    g_Config.dwRunLongHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunHitIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'RunHitIntervalTime',
      g_Config.dwRunHitIntervalTime);
  end
  else begin
    g_Config.dwRunHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WalkHitIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WalkHitIntervalTime',
      g_Config.dwWalkHitIntervalTime);
  end
  else begin
    g_Config.dwWalkHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunMagicIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'RunMagicIntervalTime',
      g_Config.dwRunMagicIntervalTime);
  end
  else begin
    g_Config.dwRunMagicIntervalTime := nLoadInteger;
  end;

  if Config.ReadInteger('Setup', 'DisableStruck', -1) < 0 then
    Config.WriteBool('Setup', 'DisableStruck', g_Config.boDisableStruck);
  g_Config.boDisableStruck := Config.ReadBool('Setup', 'DisableStruck',
    g_Config.boDisableStruck);

  if Config.ReadInteger('Setup', 'DisableSelfStruck', -1) < 0 then
    Config.WriteBool('Setup', 'DisableSelfStruck',
      g_Config.boDisableSelfStruck);
  g_Config.boDisableSelfStruck := Config.ReadBool('Setup', 'DisableSelfStruck',
    g_Config.boDisableSelfStruck);

  if Config.ReadInteger('Setup', 'StruckTime', -1) < 0 then
    Config.WriteInteger('Setup', 'StruckTime', g_Config.dwStruckTime);
  g_Config.dwStruckTime := Config.ReadInteger('Setup', 'StruckTime',
    g_Config.dwStruckTime);

  nLoadInteger := Config.ReadInteger('Setup', 'AddUserItemNewValue', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'AddUserItemNewValue', g_Config.boAddUserItemNewValue);
  end
  else begin
    g_Config.boAddUserItemNewValue := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LowLevelKillMonContainExp', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'LowLevelKillMonContainExp', g_Config.boLowLevelKillMonContainExp);
  end
  else begin
    g_Config.boLowLevelKillMonContainExp := nLoadInteger = 1;
  end;

  if Config.ReadInteger('Setup', 'LowLevelKillMonLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'LowLevelKillMonLevel', g_Config.nLowLevelKillMonLevel);
  g_Config.nLowLevelKillMonLevel := Config.ReadInteger('Setup', 'LowLevelKillMonLevel', g_Config.nLowLevelKillMonLevel);

  if Config.ReadInteger('Setup', 'LowLevelKillMonGetExpRate', -1) < 0 then
    Config.WriteInteger('Setup', 'LowLevelKillMonGetExpRate', g_Config.nLowLevelKillMonGetExpRate);
  g_Config.nLowLevelKillMonGetExpRate := Config.ReadInteger('Setup', 'LowLevelKillMonGetExpRate', g_Config.nLowLevelKillMonGetExpRate);

  nLoadInteger := Config.ReadInteger('Setup', 'TestSpeedMode', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'TestSpeedMode', g_Config.boTestSpeedMode);
  end
  else begin
    g_Config.boTestSpeedMode := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeUnLuckRate', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeUnLuckRate',
      g_Config.nWeaponMakeUnLuckRate);
  end
  else begin
    g_Config.nWeaponMakeUnLuckRate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint1', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint1',
      g_Config.nWeaponMakeLuckPoint1);
  end
  else begin
    g_Config.nWeaponMakeLuckPoint1 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint2', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint2',
      g_Config.nWeaponMakeLuckPoint2);
  end
  else begin
    g_Config.nWeaponMakeLuckPoint2 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint3', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint3',
      g_Config.nWeaponMakeLuckPoint3);
  end
  else begin
    g_Config.nWeaponMakeLuckPoint3 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint2Rate', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint2Rate',
      g_Config.nWeaponMakeLuckPoint2Rate);
  end
  else begin
    g_Config.nWeaponMakeLuckPoint2Rate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint3Rate', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint3Rate', g_Config.nWeaponMakeLuckPoint3Rate);
  end
  else begin
    g_Config.nWeaponMakeLuckPoint3Rate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeUnLuckMaxCount', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeUnLuckMaxCount', g_Config.nWeaponMakeUnLuckMaxCount);
  end
  else begin
    g_Config.nWeaponMakeUnLuckMaxCount := nLoadInteger;
  end;




  nLoadInteger := Config.ReadInteger('Setup', 'CheckUserItemPlace', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'CheckUserItemPlace',
      g_Config.boCheckUserItemPlace);
  end
  else begin
    g_Config.boCheckUserItemPlace := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfTaosHP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfTaosHP',
      g_Config.nLevelValueOfTaosHP);
  end
  else begin
    g_Config.nLevelValueOfTaosHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfTaosHPRate', 0);
  if nLoadFloat = 0 then begin
    Config.WriteFloat('Setup', 'LevelValueOfTaosHPRate',
      g_Config.nLevelValueOfTaosHPRate);
  end
  else begin
    g_Config.nLevelValueOfTaosHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfTaosMP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfTaosMP',
      g_Config.nLevelValueOfTaosMP);
  end
  else begin
    g_Config.nLevelValueOfTaosMP := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfWizardHP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfWizardHP',
      g_Config.nLevelValueOfWizardHP);
  end
  else begin
    g_Config.nLevelValueOfWizardHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfWizardHPRate', 0);
  if nLoadFloat = 0 then begin
    Config.WriteFloat('Setup', 'LevelValueOfWizardHPRate',
      g_Config.nLevelValueOfWizardHPRate);
  end
  else begin
    g_Config.nLevelValueOfWizardHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfWarrHP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfWarrHP',
      g_Config.nLevelValueOfWarrHP);
  end
  else begin
    g_Config.nLevelValueOfWarrHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfWarrHPRate', 0);
  if nLoadFloat = 0 then begin
    Config.WriteFloat('Setup', 'LevelValueOfWarrHPRate',
      g_Config.nLevelValueOfWarrHPRate);
  end
  else begin
    g_Config.nLevelValueOfWarrHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonsterInterval', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'ProcessMonsterInterval', g_Config.nProcessMonsterInterval);
  end
  else begin
    g_Config.nProcessMonsterInterval := nLoadInteger;
  end;

  if Config.ReadInteger('Setup', 'StartCastleWarDays', -1) < 0 then
    Config.WriteInteger('Setup', 'StartCastleWarDays',
      g_Config.nStartCastleWarDays);
  g_Config.nStartCastleWarDays := Config.ReadInteger('Setup',
    'StartCastleWarDays', g_Config.nStartCastleWarDays);

  if Config.ReadInteger('Setup', 'StartCastlewarTime', -1) < 0 then
    Config.WriteInteger('Setup', 'StartCastlewarTime',
      g_Config.nStartCastlewarTime);
  g_Config.nStartCastlewarTime := Config.ReadInteger('Setup',
    'StartCastlewarTime', g_Config.nStartCastlewarTime);

  if Config.ReadInteger('Setup', 'ShowCastleWarEndMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowCastleWarEndMsgTime',
      g_Config.dwShowCastleWarEndMsgTime);
  g_Config.dwShowCastleWarEndMsgTime := Config.ReadInteger('Setup',
    'ShowCastleWarEndMsgTime', g_Config.dwShowCastleWarEndMsgTime);

  if Config.ReadInteger('Setup', 'CastleWarTime', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarTime', g_Config.dwCastleWarTime);
  g_Config.dwCastleWarTime := Config.ReadInteger('Setup', 'CastleWarTime',
    g_Config.dwCastleWarTime);

  nLoadInteger := Config.ReadInteger('Setup', 'GetCastleTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GetCastleTime', g_Config.dwGetCastleTime)
  else
    g_Config.dwGetCastleTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'GuildWarTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GuildWarTime', g_Config.dwGuildWarTime)
  else
    g_Config.dwGuildWarTime := nLoadInteger;

  for i := Low(g_Config.GlobalVal) to High(g_Config.GlobalVal) do begin
    nLoadInteger := GlobalConf.ReadInteger('Integer', 'GlobalVal' + IntToStr(i), 0);
    if nLoadInteger = 0 then
      GlobalConf.WriteInteger('Integer', 'GlobalVal' + IntToStr(i), 0{g_Config.GlobalVal[i]})
    else
      g_Config.GlobalVal[i] := nLoadInteger;
  end;

  for i := Low(g_Config.GlobalAVal) to High(g_Config.GlobalAVal) do begin
    sLoadString := GlobalConf.ReadString('String', 'GlobalStrVal' + IntToStr(i), '');
    if sLoadString = '' then
      GlobalConf.WriteString('String', 'GlobalStrVal' + IntToStr(i), '');
    g_Config.GlobalAVal[i] := sLoadString;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryCount', g_Config.nWinLotteryCount)
  else
    g_Config.nWinLotteryCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'NoWinLotteryCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NoWinLotteryCount',
      g_Config.nNoWinLotteryCount)
  else
    g_Config.nNoWinLotteryCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel1', g_Config.nWinLotteryLevel1)
  else
    g_Config.nWinLotteryLevel1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel2', g_Config.nWinLotteryLevel2)
  else
    g_Config.nWinLotteryLevel2 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel3', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel3', g_Config.nWinLotteryLevel3)
  else
    g_Config.nWinLotteryLevel3 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel4', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel4', g_Config.nWinLotteryLevel4)
  else
    g_Config.nWinLotteryLevel4 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel5', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel5', g_Config.nWinLotteryLevel5)
  else
    g_Config.nWinLotteryLevel5 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel6', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel6', g_Config.nWinLotteryLevel6)
  else
    g_Config.nWinLotteryLevel6 := nLoadInteger;

  if Config.ReadInteger('Setup', 'PullPlayObject', -1) < 0 then
    Config.WriteBool('Setup', 'PullPlayObject', g_Config.boPullPlayObject);
  g_Config.boPullPlayObject := Config.ReadBool('Setup', 'PullPlayObject',
    g_Config.boPullPlayObject);

  if Config.ReadInteger('Setup', 'GroupMbAttackPlayObject', -1) < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackPlayObject',
      g_Config.boGroupMbAttackPlayObject);
  g_Config.boGroupMbAttackPlayObject := Config.ReadBool('Setup',
    'GroupMbAttackPlayObject', g_Config.boGroupMbAttackPlayObject);

  nLoadInteger := Config.ReadInteger('Setup', 'MagicValidTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicValidTimeRate',
      g_Config.nMagDelayTimeDoubly)
  else
    g_Config.nMagDelayTimeDoubly := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagicPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicPowerRate', g_Config.nMagPowerDoubly)
  else
    g_Config.nMagPowerDoubly := nLoadInteger;

  if Config.ReadInteger('Setup', 'DamageMP', -1) < 0 then
    Config.WriteBool('Setup', 'DamageMP', g_Config.boPlayObjectReduceMP);
  g_Config.boPlayObjectReduceMP := Config.ReadBool('Setup', 'DamageMP',
    g_Config.boPlayObjectReduceMP);

  if Config.ReadInteger('Setup', 'GroupMbAttackSlave', -1) < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackSlave',
      g_Config.boGroupMbAttackSlave);
  g_Config.boGroupMbAttackSlave := Config.ReadBool('Setup',
    'GroupMbAttackSlave', g_Config.boGroupMbAttackSlave);

  nLoadInteger := Config.ReadInteger('Setup', 'BigStorageLimitCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BigStorageLimitCount',
      g_Config.nBigStorageLimitCount)
  else
    g_Config.nBigStorageLimitCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'DropGoldToPlayBag', -1) < 0 then
    Config.WriteBool('Setup', 'DropGoldToPlayBag', g_Config.boDropGoldToPlayBag);
  g_Config.boDropGoldToPlayBag := Config.ReadBool('Setup', 'DropGoldToPlayBag', g_Config.boDropGoldToPlayBag);

  if Config.ReadInteger('Setup', 'ShowMonLevel', -1) < 0 then
    Config.WriteBool('Setup', 'ShowMonLevel', g_Config.boShowMonLevel);
  g_Config.boShowMonLevel := Config.ReadBool('Setup', 'ShowMonLevel', g_Config.boShowMonLevel);


  if Config.ReadString('Setup', 'ShowMonLevelFormat', '') = '' then
    Config.WriteString('Setup', 'ShowMonLevelFormat', g_Config.sShowMonLevelFormat);
  g_Config.sShowMonLevelFormat := Config.ReadString('Setup', 'ShowMonLevelFormat', g_Config.sShowMonLevelFormat);

  if Config.ReadInteger('Setup', 'Skill66ReduceMP', -1) < 0 then
    Config.WriteBool('Setup', 'Skill66ReduceMP', g_Config.boSkill66ReduceMP);
  g_Config.boSkill66ReduceMP := Config.ReadBool('Setup', 'Skill66ReduceMP', g_Config.boSkill66ReduceMP);



  if Config.ReadInteger('Setup', 'ChangeUseItemNameByPlayName', -1) < 0 then
    Config.WriteBool('Setup', 'ChangeUseItemNameByPlayName',
      g_Config.boChangeUseItemNameByPlayName);
  g_Config.boChangeUseItemNameByPlayName := Config.ReadBool('Setup',
    'ChangeUseItemNameByPlayName', g_Config.boChangeUseItemNameByPlayName);

  if Config.ReadString('Setup', 'ChangeUseItemName', '') = '' then
    Config.WriteString('Setup', 'ChangeUseItemName',
      g_Config.sChangeUseItemName);
  g_Config.sChangeUseItemName := Config.ReadString('Setup', 'ChangeUseItemName',
    g_Config.sChangeUseItemName);

  nLoadInteger := Config.ReadInteger('Setup', 'MagicDedingUseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicDedingUseTime', g_Config.nDedingUseTime)
  else
    g_Config.nDedingUseTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'DedingAllowPK', -1) < 0 then
    Config.WriteBool('Setup', 'DedingAllowPK', g_Config.boDedingAllowPK);
  g_Config.boDedingAllowPK := Config.ReadBool('Setup', 'DedingAllowPK',
    g_Config.boDedingAllowPK);

  nLoadInteger := Config.ReadInteger('Setup', 'GetDBSockMsgTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GetDBSockMsgTime', g_Config.dwGetDBSockMsgTime)
  else
    g_Config.dwGetDBSockMsgTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'PullCrossInSafeZone', -1) < 0 then
    Config.WriteBool('Setup', 'PullCrossInSafeZone',
      g_Config.boPullCrossInSafeZone);
  g_Config.boPullCrossInSafeZone := Config.ReadBool('Setup',
    'PullCrossInSafeZone', g_Config.boPullCrossInSafeZone);

  if Config.ReadInteger('Setup', 'StartDropItemMapEvent', -1) < 0 then
    Config.WriteBool('Setup', 'StartDropItemMapEvent', g_Config.boStartDropItemMapEvent);
  g_Config.boStartDropItemMapEvent := Config.ReadBool('Setup', 'StartDropItemMapEvent', g_Config.boStartDropItemMapEvent);

  if Config.ReadInteger('Setup', 'StartPickUpItemMapEvent', -1) < 0 then
    Config.WriteBool('Setup', 'StartPickUpItemMapEvent', g_Config.boStartPickUpItemMapEvent);
  g_Config.boStartPickUpItemMapEvent := Config.ReadBool('Setup', 'StartPickUpItemMapEvent', g_Config.boStartPickUpItemMapEvent);

  if Config.ReadInteger('Setup', 'StartHeavyHitMapEvent', -1) < 0 then
    Config.WriteBool('Setup', 'StartHeavyHitMapEvent', g_Config.boStartHeavyHitMapEvent);
  g_Config.boStartHeavyHitMapEvent := Config.ReadBool('Setup', 'StartHeavyHitMapEvent', g_Config.boStartHeavyHitMapEvent);

  if Config.ReadInteger('Setup', 'StartWalkMapEvent', -1) < 0 then
    Config.WriteBool('Setup', 'StartWalkMapEvent', g_Config.boStartWalkMapEvent);
  g_Config.boStartWalkMapEvent := Config.ReadBool('Setup', 'StartWalkMapEvent', g_Config.boStartWalkMapEvent);

  if Config.ReadInteger('Setup', 'StartRunMapEvent', -1) < 0 then
    Config.WriteBool('Setup', 'StartRunMapEvent', g_Config.boStartRunMapEvent);
  g_Config.boStartRunMapEvent := Config.ReadBool('Setup', 'StartRunMapEvent', g_Config.boStartRunMapEvent);

  nLoadInteger := Config.ReadInteger('Setup', 'FireDelayTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FireDelayTimeRate', g_Config.nFireDelayTimeRate)
  else
    g_Config.nFireDelayTimeRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FirePowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FirePowerRate', g_Config.nFirePowerRate)
  else
    g_Config.nFirePowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FirePlayDamageTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FirePlayDamageTimeRate', g_Config.nFirePlayDamageTimeRate)
  else
    g_Config.nFirePlayDamageTimeRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FireMonDamageTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FireMonDamageTimeRate', g_Config.nFireMonDamageTimeRate)
  else
    g_Config.nFireMonDamageTimeRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'ChangeMapFireExtinguish', -1) < 0 then
    Config.WriteBool('Setup', 'ChangeMapFireExtinguish',
      g_Config.boChangeMapFireExtinguish);
  g_Config.boChangeMapFireExtinguish := Config.ReadBool('Setup',
    'ChangeMapFireExtinguish', g_Config.boChangeMapFireExtinguish);

  nLoadInteger := Config.ReadInteger('Setup', 'DidingPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DidingPowerRate', g_Config.nDidingPowerRate)
  else
    g_Config.nDidingPowerRate := nLoadInteger;

  if Config.ReadInteger('Setup', 'CheckGuild', -1) < 0 then
    Config.WriteBool('Setup', 'CheckGuild', g_Config.boCheckGuild);
  g_Config.boCheckGuild := Config.ReadBool('Setup', 'CheckGuild',
    g_Config.boCheckGuild);

  if Config.ReadInteger('Setup', 'GuildMemberCount', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMemberCount',
      g_Config.nGuildMemberCount);
  g_Config.nGuildMemberCount := Config.ReadInteger('Setup', 'GuildMemberCount',
    g_Config.nGuildMemberCount);

  if Config.ReadInteger('Setup', 'SellOffGoldTaxRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SellOffGoldTaxRate',
      g_Config.nSellOffGoldTaxRate);
  g_Config.nSellOffGoldTaxRate := Config.ReadInteger('Setup',
    'SellOffGoldTaxRate', g_Config.nSellOffGoldTaxRate);

  if Config.ReadInteger('Setup', 'CloseShowHP', -1) < 0 then
    Config.WriteBool('Setup', 'CloseShowHP', g_Config.boCloseShowHp);
  g_Config.boCloseShowHp := Config.ReadBool('Setup', 'CloseShowHP',
    g_Config.boCloseShowHp);

  if Config.ReadInteger('Setup', 'OfflineSaveExp', -1) < 0 then
    Config.WriteBool('Setup', 'OfflineSaveExp', g_Config.boOfflineSaveExp);
  g_Config.boOfflineSaveExp := Config.ReadBool('Setup', 'OfflineSaveExp', g_Config.boOfflineSaveExp);

  if Config.ReadInteger('Setup', 'NakedBeginLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedBeginLevel', g_Config.wNakedBeginLevel);
  g_Config.wNakedBeginLevel := Config.ReadInteger('Setup', 'NakedBeginLevel', g_Config.wNakedBeginLevel);

  if Config.ReadInteger('Setup', 'NakedLevelUpAddCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedLevelUpAddCount', g_Config.NakedAddInfo.nNakedLevelUpAddCount);
  g_Config.NakedAddInfo.nNakedLevelUpAddCount := Config.ReadInteger('Setup', 'NakedLevelUpAddCount',
    g_Config.NakedAddInfo.nNakedLevelUpAddCount);

  if Config.ReadInteger('Setup', 'NakedAcCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAcCount', g_Config.NakedAddInfo.nNakedAcCount);
  g_Config.NakedAddInfo.nNakedAcCount := Config.ReadInteger('Setup', 'NakedAcCount',
    g_Config.NakedAddInfo.nNakedAcCount);

  if Config.ReadInteger('Setup', 'NakedAcMaxCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAcMaxCount', g_Config.NakedAddInfo.nNakedAcMaxCount);
  g_Config.NakedAddInfo.nNakedAcMaxCount := Config.ReadInteger('Setup', 'NakedAcMaxCount',
    g_Config.NakedAddInfo.nNakedAcMaxCount);

  if Config.ReadInteger('Setup', 'NakedMacCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedMacCount', g_Config.NakedAddInfo.nNakedMacCount);
  g_Config.NakedAddInfo.nNakedMacCount := Config.ReadInteger('Setup', 'NakedMacCount',
    g_Config.NakedAddInfo.nNakedMacCount);

  if Config.ReadInteger('Setup', 'NakedMacMaxCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedMacMaxCount', g_Config.NakedAddInfo.nNakedMacMaxCount);
  g_Config.NakedAddInfo.nNakedMacMaxCount := Config.ReadInteger('Setup', 'NakedMacMaxCount',
    g_Config.NakedAddInfo.nNakedMacMaxCount);

  if Config.ReadInteger('Setup', 'NakedDcCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedDcCount', g_Config.NakedAddInfo.nNakedDcCount);
  g_Config.NakedAddInfo.nNakedDcCount := Config.ReadInteger('Setup', 'NakedDcCount',
    g_Config.NakedAddInfo.nNakedDcCount);

  if Config.ReadInteger('Setup', 'NakedDcMaxCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedDcMaxCount', g_Config.NakedAddInfo.nNakedDcMaxCount);
  g_Config.NakedAddInfo.nNakedDcMaxCount := Config.ReadInteger('Setup', 'NakedDcMaxCount',
    g_Config.NakedAddInfo.nNakedDcMaxCount);

  if Config.ReadInteger('Setup', 'NakedMcCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedMcCount', g_Config.NakedAddInfo.nNakedMcCount);
  g_Config.NakedAddInfo.nNakedMcCount := Config.ReadInteger('Setup', 'NakedMcCount',
    g_Config.NakedAddInfo.nNakedMcCount);

  if Config.ReadInteger('Setup', 'NakedMcMaxCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedMcMaxCount', g_Config.NakedAddInfo.nNakedMcMaxCount);
  g_Config.NakedAddInfo.nNakedMcMaxCount := Config.ReadInteger('Setup', 'NakedMcMaxCount',
    g_Config.NakedAddInfo.nNakedMcMaxCount);

  if Config.ReadInteger('Setup', 'NakedScCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedScCount', g_Config.NakedAddInfo.nNakedScCount);
  g_Config.NakedAddInfo.nNakedScCount := Config.ReadInteger('Setup', 'NakedScCount',
    g_Config.NakedAddInfo.nNakedScCount);

  if Config.ReadInteger('Setup', 'NakedScMaxCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedScMaxCount', g_Config.NakedAddInfo.nNakedScMaxCount);
  g_Config.NakedAddInfo.nNakedScMaxCount := Config.ReadInteger('Setup', 'NakedScMaxCount',
    g_Config.NakedAddInfo.nNakedScMaxCount);

  if Config.ReadInteger('Setup', 'NakedHPCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedHPCount', g_Config.NakedAddInfo.nNakedHPCount);
  g_Config.NakedAddInfo.nNakedHPCount := Config.ReadInteger('Setup', 'NakedHPCount',
    g_Config.NakedAddInfo.nNakedHPCount);

  if Config.ReadInteger('Setup', 'NakedHPCount', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedHPCount', g_Config.NakedAddInfo.nNakedHPCount);
  g_Config.NakedAddInfo.nNakedHPCount := Config.ReadInteger('Setup', 'NakedHPCount',
    g_Config.NakedAddInfo.nNakedHPCount);

  if Config.ReadInteger('Setup', 'ArmStrengthenGold', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmStrengthenGold', g_Config.nArmStrengthenGold);
  g_Config.nArmStrengthenGold := Config.ReadInteger('Setup', 'ArmStrengthenGold', g_Config.nArmStrengthenGold);

  if Config.ReadInteger('Setup', 'MakeItemGold', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeItemGold', g_Config.nMakeItemGold);
  g_Config.nMakeItemGold := Config.ReadInteger('Setup', 'MakeItemGold', g_Config.nMakeItemGold);

  if Config.ReadInteger('Setup', 'UpPhotoLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'UpPhotoLevel', g_Config.nUpPhotoLevel);
  g_Config.nUpPhotoLevel := Config.ReadInteger('Setup', 'UpPhotoLevel', g_Config.nUpPhotoLevel);

  if Config.ReadInteger('Setup', 'UpPhotoTick', -1) < 0 then
    Config.WriteInteger('Setup', 'UpPhotoTick', g_Config.nUpPhotoTick);
  g_Config.nUpPhotoTick := Config.ReadInteger('Setup', 'UpPhotoTick', g_Config.nUpPhotoTick);

  if Config.ReadInteger('Setup', 'OpenSelfShop', -1) < 0 then
    Config.WriteBool('Setup', 'OpenSelfShop', g_Config.boOpenSelfShop);
  g_Config.boOpenSelfShop := Config.ReadBool('Setup', 'OpenSelfShop',
    g_Config.boOpenSelfShop);

  if Config.ReadInteger('Setup', 'SafeZoneShop', -1) < 0 then
    Config.WriteBool('Setup', 'SafeZoneShop', g_Config.boSafeZoneShop);
  g_Config.boSafeZoneShop := Config.ReadBool('Setup', 'SafeZoneShop',
    g_Config.boSafeZoneShop);

  if Config.ReadInteger('Setup', 'MapShop', -1) < 0 then
    Config.WriteBool('Setup', 'MapShop', g_Config.boMapShop);
  g_Config.boMapShop := Config.ReadBool('Setup', 'MapShop', g_Config.boMapShop);

  if Config.ReadInteger('Setup', 'SellOffGameGoldTaxRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SellOffGameGoldTaxRate',
      g_Config.nSellOffGameGoldTaxRate);
  g_Config.nSellOffGameGoldTaxRate := Config.ReadInteger('Setup',
    'SellOffGameGoldTaxRate', g_Config.nSellOffGameGoldTaxRate);

  if Config.ReadInteger('Setup', 'SellOffItemCount', -1) < 0 then
    Config.WriteInteger('Setup', 'SellOffItemCount',
      g_Config.nSellOffItemCount);
  g_Config.nSellOffItemCount := Config.ReadInteger('Setup', 'SellOffItemCount',
    g_Config.nSellOffItemCount);

  if Config.ReadInteger('Setup', 'LevelItemRate', -1) < 0 then
    Config.WriteInteger('Setup', 'LevelItemRate', g_Config.nLevelItemRate);
  g_Config.nLevelItemRate := Config.ReadInteger('Setup', 'LevelItemRate',
    g_Config.nLevelItemRate);

  if Config.ReadInteger('Setup', 'LevelItemGoldCount', -1) < 0 then
    Config.WriteInteger('Setup', 'LevelItemGoldCount',
      g_Config.nLevelItemGoldCount);
  g_Config.nLevelItemGoldCount := Config.ReadInteger('Setup',
    'LevelItemGoldCount', g_Config.nLevelItemGoldCount);

  if Config.ReadInteger('Setup', 'LevelItemGameGoldCount', -1) < 0 then
    Config.WriteInteger('Setup', 'LevelItemGameGoldCount',
      g_Config.nLevelItemGameGoldCount);
  g_Config.nLevelItemGameGoldCount := Config.ReadInteger('Setup',
    'LevelItemGameGoldCount', g_Config.nLevelItemGameGoldCount);

  if Config.ReadInteger('Setup', 'PlayShowMystery', -1) < 0 then
    Config.WriteBool('Setup', 'PlayShowMystery', g_Config.boPlayShowMystery);
  g_Config.boPlayShowMystery := Config.ReadBool('Setup', 'PlayShowMystery',
    g_Config.boPlayShowMystery);

  if Config.ReadInteger('Setup', 'HeroShowMystery', -1) < 0 then
    Config.WriteBool('Setup', 'HeroShowMystery', g_Config.boHeroShowMystery);
  g_Config.boHeroShowMystery := Config.ReadBool('Setup', 'HeroShowMystery',
    g_Config.boHeroShowMystery);

  if Config.ReadInteger('Setup', 'CloneShowMystery', -1) < 0 then
    Config.WriteBool('Setup', 'CloneShowMystery', g_Config.boCloneShowMystery);
  g_Config.boCloneShowMystery := Config.ReadBool('Setup', 'CloneShowMystery',
    g_Config.boCloneShowMystery);

  if Config.ReadInteger('Setup', 'HPStoneStartRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HPStoneStartRate', g_Config.HPStoneStartRate);
  g_Config.HPStoneStartRate := Config.ReadInteger('Setup', 'HPStoneStartRate',
    g_Config.HPStoneStartRate);

  if Config.ReadInteger('Setup', 'MPStoneStartRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MPStoneStartRate', g_Config.MPStoneStartRate);
  g_Config.MPStoneStartRate := Config.ReadInteger('Setup', 'MPStoneStartRate',
    g_Config.MPStoneStartRate);

  if Config.ReadInteger('Setup', 'HPStoneIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HPStoneIntervalTime',
      g_Config.HPStoneIntervalTime);
  g_Config.HPStoneIntervalTime := Config.ReadInteger('Setup',
    'HPStoneIntervalTime', g_Config.HPStoneIntervalTime);

  if Config.ReadInteger('Setup', 'MPStoneIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MPStoneIntervalTime',
      g_Config.MPStoneIntervalTime);
  g_Config.MPStoneIntervalTime := Config.ReadInteger('Setup',
    'MPStoneIntervalTime', g_Config.MPStoneIntervalTime);

  if Config.ReadInteger('Setup', 'HPStoneAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HPStoneAddRate', g_Config.HPStoneAddRate);
  g_Config.HPStoneAddRate := Config.ReadInteger('Setup', 'HPStoneAddRate',
    g_Config.HPStoneAddRate);

  if Config.ReadInteger('Setup', 'MPStoneAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MPStoneAddRate', g_Config.MPStoneAddRate);
  g_Config.MPStoneAddRate := Config.ReadInteger('Setup', 'MPStoneAddRate',
    g_Config.MPStoneAddRate);

  if Config.ReadInteger('Setup', 'HPStoneDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'HPStoneDecDura', g_Config.HPStoneDecDura);
  g_Config.HPStoneDecDura := Config.ReadInteger('Setup', 'HPStoneDecDura',
    g_Config.HPStoneDecDura);

  if Config.ReadInteger('Setup', 'MPStoneDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'MPStoneDecDura', g_Config.MPStoneDecDura);
  g_Config.MPStoneDecDura := Config.ReadInteger('Setup', 'MPStoneDecDura',
    g_Config.MPStoneDecDura);

  if Config.ReadInteger('Setup', 'PullulationCount', -1) < 0 then
    Config.WriteInteger('Setup', 'PullulationCount', g_Config.nPullulationCount);
  g_Config.nPullulationCount := Config.ReadInteger('Setup', 'PullulationCount', g_Config.nPullulationCount);



  if Config.ReadString('Setup', 'AllowJointAttack', '') = '' then
    Config.WriteBool('Setup', 'AllowJointAttack', g_Config.boAllowJointAttack);
  g_Config.boAllowJointAttack := Config.ReadBool('Setup', 'AllowJointAttack',
    g_Config.boAllowJointAttack);

  nLoadInteger := Config.ReadInteger('Setup', 'EnergyStepUpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'EnergyStepUpRate', g_Config.nEnergyStepUpRate)
  else
    g_Config.nEnergyStepUpRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SkillWWPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SkillWWPowerRate', g_Config.nSkillWWPowerRate)
  else
    g_Config.nSkillWWPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SkillTWPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SkillTWPowerRate', g_Config.nSkillTWPowerRate)
  else
    g_Config.nSkillTWPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SkillZWPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SkillZWPowerRate', g_Config.nSkillZWPowerRate)
  else
    g_Config.nSkillZWPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SkillTTPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SkillTTPowerRate', g_Config.nSkillTTPowerRate)
  else
    g_Config.nSkillTTPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SkillZTPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SkillZTPowerRate', g_Config.nSkillZTPowerRate)
  else
    g_Config.nSkillZTPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SkillZZPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SkillZZPowerRate', g_Config.nSkillZZPowerRate)
  else
    g_Config.nSkillZZPowerRate := nLoadInteger;

  FillChar(g_Config.vAbilityMoveSet, SizeOf(TAbilityMoveSet), #0);

  g_Config.vAbilityMoveSet.BaseRate := 20;

  if Config.ReadInteger('AbilityMove', 'BaseRate', -1) < 0 then
    Config.WriteInteger('AbilityMove', 'BaseRate', g_Config.vAbilityMoveSet.BaseRate);
  g_Config.vAbilityMoveSet.BaseRate := Config.ReadInteger('AbilityMove', 'BaseRate', g_Config.vAbilityMoveSet.BaseRate);

  if Config.ReadInteger('AbilityMove', 'Gold', -1) < 0 then
    Config.WriteInteger('AbilityMove', 'Gold', g_Config.vAbilityMoveSet.Gold);
  g_Config.vAbilityMoveSet.Gold := Config.ReadInteger('AbilityMove', 'Gold', g_Config.vAbilityMoveSet.Gold);

  FillChar(g_Config.vCompoundSet, SizeOf(TCompoundSet), #0);

  g_Config.vCompoundSet.Color[1] := 168;
  g_Config.vCompoundSet.Color[2] := 70;
  g_Config.vCompoundSet.Color[3] := 223;
  g_Config.vCompoundSet.Color[4] := 253;
  g_Config.vCompoundSet.ValueLimit := 10;

  nLoadInteger := Config.ReadInteger('CompoundSet', 'ValueLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('CompoundSet', 'ValueLimit', g_Config.vCompoundSet.ValueLimit)
  else
    g_Config.vCompoundSet.ValueLimit := nLoadInteger;

  for i := Low(g_Config.vCompoundSet.Color) to High(g_Config.vCompoundSet.Color) do
  begin
    nLoadInteger := Config.ReadInteger('CompoundSet', 'Color' + IntToStr(i), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('CompoundSet', 'Color' + IntToStr(i), g_Config.vCompoundSet.Color[i])
    else
      g_Config.vCompoundSet.Color[i] := nLoadInteger;
  end;  

  for i := Low(g_Config.vCompoundSet.Gold) to High(g_Config.vCompoundSet.Gold) do
  begin
    nLoadInteger := Config.ReadInteger('CompoundSet', 'Gold' + IntToStr(i), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('CompoundSet', 'Gold' + IntToStr(i), g_Config.vCompoundSet.Gold[i])
    else
      g_Config.vCompoundSet.Gold[i] := nLoadInteger;
  end;  

  for i := Low(g_Config.vCompoundSet.GameGold) to High(g_Config.vCompoundSet.GameGold) do
  begin
    nLoadInteger := Config.ReadInteger('CompoundSet', 'GameGold' + IntToStr(i), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('CompoundSet', 'GameGold' + IntToStr(i), g_Config.vCompoundSet.GameGold[i])
    else
      g_Config.vCompoundSet.GameGold[i] := nLoadInteger;
  end;  

  for i := Low(g_Config.vCompoundSet.DropRate) to High(g_Config.vCompoundSet.DropRate) do
  begin
    nLoadInteger := Config.ReadInteger('CompoundSet', 'DropRate' + IntToStr(i), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('CompoundSet', 'DropRate' + IntToStr(i), g_Config.vCompoundSet.DropRate[i])
    else
      g_Config.vCompoundSet.DropRate[i] := nLoadInteger;
  end;  

end;

function GetRGB(c256: Byte): TColor;
begin
  Result := RGB(ColorTable[c256].rgbRed, ColorTable[c256].rgbGreen,
    ColorTable[c256].rgbBlue);
end;

function SendGameCenterMsg(wIdent: Word; sSENDMSG: string): Integer;
var
  SendData: TCopyDataStruct;
  nParam: Integer;
begin
  nParam := MakeLong(Word(tM2Server), wIdent);
  SendData.cbData := Length(sSENDMSG) + 1;
  GetMem(SendData.lpData, SendData.cbData);
  StrCopy(SendData.lpData, PChar(sSENDMSG));
  Result := SendMessage(g_dwGameCenterHandle, WM_COPYDATA, nParam, Cardinal(@SendData));
  FreeMem(SendData.lpData);
end;

function GetIPLocal(sIPaddr: string): string;
{$IFDEF PLUGOPEN}
var
  sLocal: array[0..254] of Char;
{$ENDIF}
begin
{$IFDEF PLUGOPEN}
  try
    if (nIPLocal >= 0) and Assigned(PlugProcArray[nIPLocal].nProcAddr) then begin
      SafeFillChar(sLocal, SizeOf(sLocal), 0);
      TIPLocal(PlugProcArray[nIPLocal].nProcAddr)(@sIPaddr[1], @sLocal,
        SizeOf(sLocal));
      Result := StrPas(@sLocal);
      Exit;
    end;
    Result := '未知.';
  except
    Result := '未知.';
  end;
{$ELSE}
  Result := GetIPStr(sIPaddr);
{$ENDIF}
end;
{$IFDEF RELEASE}

procedure LoadKernelFunction();
var
  DllModule: THandle;
begin
  DllModule := LoadLibrary('kernel32.dll');
  IsDebuggerPresent := GetProcAddress(DllModule, PChar(DeCodeString('ty_dnHoVqyWSlZOCpxOYqxt')));
end;
{$ENDIF}

procedure ExportProc();
begin

end;

function IsCheapStuff(tByte: Byte): Boolean;
begin

  Result := False;
end;

function CompareIPaddr(sIPaddr, dIPaddr: string): Boolean;
var
  nPos: Integer;
begin
  Result := False;
  if (sIPaddr = '') or (dIPaddr = '') then
    Exit;

  if (dIPaddr[1] = '*') then begin
    Result := True;
    Exit;
  end;

  nPos := Pos('*', dIPaddr);
  if nPos > 0 then begin
    Result := CompareLStr(sIPaddr, dIPaddr, nPos - 1);
  end
  else begin
    Result := CompareText(sIPaddr, dIPaddr) = 0;
  end;
end;
{ TMsgStringList }

procedure TMsgStringList.LoadFromFile(const FileName: string);
  function CheckFileIsEN(): Boolean;
  var
    FileStream: TFileStream;
    nCheck: LongWord;
  begin
    Result := False;
    FileStream := TFileStream.Create(FileName, fmOpenRead or fmShareDenyNone);
    try
      if FileStream.Read(nCheck, SizeOf(LongWord)) = SizeOf(LongWord) then begin
        nCheck := nCheck xor $12345678;
        if nCheck = RUNGATECODE then
          Result := True;
      end;
    finally
      FileStream.Free;
    end;
  end;
var
  MapBuffer: PChar;
  MemoryStream: TMemoryStream;
  FileStream: TFileStream;
  FileHandle: THandle;
  nBufferSize: Integer;
  nFileID: Integer;
  nCheck, nCheck2, nCheck3: LongWord;
  OutLen, nENLen: Integer;
  ENBuffer, OutBuffer: PChar;
begin
  if boTeledata then begin
    nFileID := SendGameCenterMsg(SG_GETFILEDATA, FileName);
    if nFileID <> 0 then begin
      FileHandle := OpenFileMapping(FILE_MAP_READ, False, PChar(IntToStr(nFileID)));
      if FileHandle <> 0 then begin
        try
          MapBuffer := MapViewOfFile(FileHandle, FILE_MAP_READ, 0, 0, 0);
          if (MapBuffer <> nil) then begin
            try
              System.Move(MapBuffer^, nBufferSize, SizeOf(Integer));
              if nBufferSize > 0 then begin
                MemoryStream := TMemoryStream.Create;
                try
                  MemoryStream.SetSize(nBufferSize);
                  MemoryStream.Position := 0;
                  MemoryStream.Write(MapBuffer[SizeOf(Integer)], nBufferSize);
                  MemoryStream.Position := 0;
                  LoadFromStream(MemoryStream);
                finally
                  MemoryStream.Free;
                end;
              end;
            finally
              UnMapViewOfFile(MapBuffer);
            end;
          end;
        finally
          CloseHandle(FileHandle);
        end;
      end;
    end;
  end
  else if boEncrypt and (not CheckFileIsEN()) then begin
    inherited;
    MemoryStream := TMemoryStream.Create;
    ENBuffer := Self.GetText;
    try
      if Length(string(ENBuffer)) > 10 then begin
        OutLen := ZIPCompress(ENBuffer, Length(string(ENBuffer)) + 1, 9, OutBuffer);
        if OutLen > (SizeOf(LongWord) * 2) then begin
          nCheck := RUNGATECODE xor $12345678;
          nCheck2 := PLongWord(OutBuffer)^ xor LongWord(OutLen);
          nCheck3 := PLongWord(@OutBuffer[SizeOf(LongWord)])^ xor LongWord(OutLen);
          MemoryStream.Write(nCheck, SizeOf(LongWord));
          MemoryStream.Write(nCheck2, SizeOf(LongWord));
          MemoryStream.Write(nCheck3, SizeOf(LongWord));
          MemoryStream.Write(OutBuffer[SizeOf(LongWord) * 2], OutLen - (SizeOf(LongWord) * 2));
          FreeMem(OutBuffer);
          MemoryStream.SaveToFile(FileName);
        end;
      end;
    finally
      StrDispose(ENBuffer);
      MemoryStream.Free;
    end;
  end
  else begin
    FileStream := TFileStream.Create(FileName, fmOpenRead or fmShareDenyNone);
    try
      if FileStream.Read(nCheck, SizeOf(LongWord)) = SizeOf(LongWord) then begin
        nCheck := nCheck xor $12345678;
        nENLen := FileStream.Size - SizeOf(LongWord);
        if nCheck = RUNGATECODE then begin
          GetMem(ENBuffer, nENLen);
          try
            if FileStream.Read(ENBuffer^, nENLen) = nENLen then begin
              PLongWord(ENBuffer)^ := PLongWord(ENBuffer)^ xor LongWord(nENLen);
              PLongWord(@ENBuffer[SizeOf(LongWord)])^ := PLongWord(@ENBuffer[SizeOf(LongWord)])^ xor LongWord(nENLen);
              OutLen := ZIPDecompress(ENBuffer, nENLen, 0, OutBuffer);
              if OutLen > 0 then begin
                SetText(OutBuffer);
                FreeMem(OutBuffer);
              end;
            end;
          finally
            FreeMem(ENBuffer, nENLen);
          end;
          Exit;
        end;
      end;
    finally
      FileStream.Free;
      //SaveToFile(FileName);
    end;
    inherited;
  end;
end;

function MyFileExists(const FileName: string): Boolean;
begin
  if boTeledata then begin
    Result := SendGameCenterMsg(SG_CHECKFILE, FileName) <> 0;
  end
  else
    Result := FileExists(FileName);
end;

function GetWaitMsgID(): Integer;
begin
  Inc(g_nWaitMsgIndex);
  if g_nWaitMsgIndex <= 0 then
    g_nWaitMsgIndex := 1;
  Result := g_nWaitMsgIndex;
end;

function CCheck(code: Integer): Integer;
begin
  Result := code;
  if code < 0 then
    raise ECompressionError.Create('ZIP Error'); //!!
end;

function DCheck(code: Integer): Integer;
begin
  Result := code;
  if code < 0 then
    raise EDecompressionError.Create('ZIP Error'); //!!
end;

function ZIPCompress(const InBuf: Pointer; InBytes: Integer; Level: TZIPLevel; out OutBuf: PChar): Integer;
var
  strm: TZStreamRec;
  P: Pointer;
begin
  SafeFillChar(strm, sizeof(strm), 0);
  strm.zalloc := zlibAllocMem;
  strm.zfree := zlibFreeMem;
  Result := ((InBytes + (InBytes div 10) + 12) + 255) and not 255;
  GetMem(OutBuf, Result);
  try
    strm.next_in := InBuf;
    strm.avail_in := InBytes;
    strm.next_out := OutBuf;
    strm.avail_out := Result;
    CCheck(deflateInit_(strm, Level, zlib_version, sizeof(strm)));
    try
      while CCheck(deflate(strm, Z_FINISH)) <> Z_STREAM_END do begin
        P := OutBuf;
        Inc(Result, 256);
        ReallocMem(OutBuf, Result);
        strm.next_out := PChar(Integer(OutBuf) + (Integer(strm.next_out) - Integer(P)));
        strm.avail_out := 256;
      end;
    finally
      CCheck(deflateEnd(strm));
    end;
    ReallocMem(OutBuf, strm.total_out);
    Result := strm.total_out;
  except
    FreeMem(OutBuf);
    OutBuf := nil;
    //raise
  end;
end;

function ZIPDecompress(const InBuf: Pointer; InBytes: Integer; OutEstimate: Integer; out OutBuf: PChar): Integer;
var
  strm: TZStreamRec;
  P: Pointer;
  BufInc: Integer;
begin
  SafeFillChar(strm, sizeof(strm), 0);
  strm.zalloc := zlibAllocMem;
  strm.zfree := zlibFreeMem;
  BufInc := (InBytes + 255) and not 255;
  if OutEstimate = 0 then
    Result := BufInc
  else
    Result := OutEstimate;
  GetMem(OutBuf, Result);
  try
    strm.next_in := InBuf;
    strm.avail_in := InBytes;
    strm.next_out := OutBuf;
    strm.avail_out := Result;
    DCheck(inflateInit_(strm, zlib_version, sizeof(strm)));
    try
      while DCheck(inflate(strm, Z_FINISH)) <> Z_STREAM_END do begin
        P := OutBuf;
        Inc(Result, BufInc);
        ReallocMem(OutBuf, Result);
        strm.next_out := PChar(Integer(OutBuf) + (Integer(strm.next_out) - Integer(P)));
        strm.avail_out := BufInc;
      end;
    finally
      DCheck(inflateEnd(strm));
    end;
    ReallocMem(OutBuf, strm.total_out);
    Result := strm.total_out;
  except
    FreeMem(OutBuf);
    OutBuf := nil;
    //raise
  end;
end;

function CheckItemBindMode(UserItem: pTUserItem; BindMode: TBindMode): Boolean;
var
  ptByte, ptByte2: PByte;
  BindType: Byte;
  I: Integer;
  StdItem: pTStdItem;
begin
  Result := False;
  StdItem := UserEngine.GetStdItem(UserItem.wIndex);
  if StdItem = nil then Exit;
  ptByte := @StdItem.Bind;
  case BindMode of
    bm_NoDeal: begin
        BindType := Ib_NoDeal;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_NoSave: begin
        BindType := Ib_NoSave;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_NoRepair: begin
        BindType := Ib_NoRepair;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_NoDrop: begin
        BindType := Ib_NoDrop;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_NoDown: begin
        BindType := Ib_NoDown;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_NoMake: begin
        BindType := Ib_NoMake;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_NoSell: begin
        BindType := Ib_NoSell;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_DropDestroy: begin
        BindType := Ib_DropDestroy;
        ptByte2 := @UserItem.btBindMode1;
      end;
    bm_Unknown: begin
        BindType := Ib2_Unknown;
        ptByte2 := @UserItem.btBindMode2;
      end;
    else Exit;
  end;
  if BindMode = bm_Unknown then begin
    Result := CheckByteStatus(ptByte2^, BindType);
  end else begin
    Result := CheckByteStatus(ptByte^, BindType) or CheckByteStatus(ptByte2^, BindType);
  end;
  if (not Result) and (StdItem.StdMode = tm_House) then begin
    for I := Low(UserItem.HorseItems) to High(UserItem.HorseItems) do begin
      if UserItem.HorseItems[I].wIndex > 0 then begin
        StdItem := UserEngine.GetStdItem(UserItem.HorseItems[I].wIndex);
        if StdItem.Name = '' then Continue;
        if BindMode = bm_Unknown then begin
          Result := CheckByteStatus(UserItem.HorseItems[I].btBindMode2, BindType);
        end else begin
          Result := CheckByteStatus(StdItem.Bind, BindType) or CheckByteStatus(UserItem.HorseItems[I].btBindMode1, BindType);
        end;
      end;
      if Result then break;
    end;
  end;
end;

function GetCompoundInfo(const sItemName: string; nLevel: Integer): pTCompoundInfo;
var
  nIndex: Integer;
begin
  Result := nil;
  if (nLevel < Low(TCompoundInfos)) or (nLevel > High(TCompoundInfos)) then
    exit;
  nIndex := g_CompoundInfoList.IndexOf(sItemName);
  if nIndex < 0 then
    exit;
  Result := @pTCompoundInfos(g_CompoundInfoList.Objects[nIndex])[nLevel];
end;

function GetCompoundInfos(const sItemName: string): pTCompoundInfos;
var
  nIndex: Integer;
begin
  Result := nil;
  nIndex := g_CompoundInfoList.IndexOf(sItemName);
  if nIndex < 0 then
    exit;
  Result := pTCompoundInfos(g_CompoundInfoList.Objects[nIndex]);
end;

procedure SaveCompoundInfos;
var
  i, j, k: Integer;
  sItemName, sText: string;
  pCompoundInfos: pTCompoundInfos;
  SaveInfo: TStringList;
begin
  SaveInfo := TStringList.Create;
  try
    SaveInfo.Clear;
    for i := 0 to g_CompoundInfoList.Count - 1 do begin
      pCompoundInfos := pTCompoundInfos(g_CompoundInfoList.Objects[i]);
      sItemName := g_CompoundInfoList.Strings[i];
      if (pCompoundInfos = nil) then
        Continue;
      for j := Low(TCompoundInfos) to High(TCompoundInfos) do
      begin
        if pCompoundInfos[j].Value = 0 then
          Continue;
        sText := sItemName;
        sText := sText + #9 + IntToStr(j);
        sText := sText + #9 + IntToStr(pCompoundInfos[j].Value);
        for k := Low(pCompoundInfos[j].Value1) to High(pCompoundInfos[j].Value1) do
          sText := sText + #9 + IntToStr(LoWord(pCompoundInfos[j].Value1[k])) + '-' + IntToStr(HiWord(pCompoundInfos[j].Value1[k]));
        for k := Low(pCompoundInfos[j].Value2) to High(pCompoundInfos[j].Value2) do
          sText := sText + #9 + IntToStr(LoByte(pCompoundInfos[j].Value2[k])) + '-' + IntToStr(HiByte(pCompoundInfos[j].Value2[k]));
        for k := Low(pCompoundInfos[j].Rate) to High(pCompoundInfos[j].Rate) do
          sText := sText + #9 + IntToStr(pCompoundInfos[j].Rate[k]);
        SaveInfo.Add(sText);
      end;
    end;
  finally
    SaveInfo.SaveToFile(g_Config.sGameDataDir + 'CompoundInfo.txt');
    SaveInfo.Free;
  end;
end;

procedure UpgradeCompoundItem(AUserItem: pTUserItem; AUpgradeCom: pTCompoundInfo);
  procedure SetRandomValue(var AResult: Byte; AValue: LongWord); overload;
  begin
    AResult := _MIN(AResult + Random(_MAX(HiWord(AValue) - LoWord(AValue) + 1, 0)) + LoWord(AValue), High(Byte));
  end;

  procedure SetRandomValue(var AResult: Byte; AValue: Word); overload;
  begin
    AResult := _MIN(AResult + Random(_MAX(HiByte(AValue) - LoByte(AValue) + 1, 0)) + LoByte(AValue), High(Byte));
  end;
var
  i: Integer;
begin
  AUserItem.ComLevel := AUserItem.ComLevel + 1;
  AUserItem.EffectValue.btColor := g_Config.vCompoundSet.Color[AUserItem.ComLevel];
  for i := Low(AUpgradeCom.Rate) to High(AUpgradeCom.Rate) - 1 do
  begin
    if (Random(100) >= AUpgradeCom.Rate[i]) then
      Continue;
    case i of
      0:
        SetRandomValue(AUserItem.Value.btValue[tb_AC2], AUpgradeCom.Value1[0]);
      1:
        SetRandomValue(AUserItem.Value.btValue[tb_MAC2], AUpgradeCom.Value1[1]);
      2:
        SetRandomValue(AUserItem.Value.btValue[tb_DC2], AUpgradeCom.Value1[2]);
      3:
        SetRandomValue(AUserItem.Value.btValue[tb_MC2], AUpgradeCom.Value1[3]);
      4:
        SetRandomValue(AUserItem.Value.btValue[tb_SC2], AUpgradeCom.Value1[4]);
      5:
        SetRandomValue(AUserItem.Value.btValue[tb_HP], AUpgradeCom.Value1[5]);
      6:
        SetRandomValue(AUserItem.Value.btValue[tb_MP], AUpgradeCom.Value1[6]);
      7:
        SetRandomValue(AUserItem.Value.btValue[tb_Hit], AUpgradeCom.Value2[0]);
      8:
        SetRandomValue(AUserItem.Value.btValue[tb_Speed], AUpgradeCom.Value2[1]);
      9:
        SetRandomValue(AUserItem.Value.btValue[tb_Deadliness], AUpgradeCom.Value2[2]);
      10:
        SetRandomValue(AUserItem.Value.btValue[tb_AddAttack], AUpgradeCom.Value2[3]);
      11:
        SetRandomValue(AUserItem.Value.btValue[tb_DelDamage], AUpgradeCom.Value2[4]);
      12:
        SetRandomValue(AUserItem.Value.btValue[tb_AntiMagic], AUpgradeCom.Value2[5]);
    end;
  end;
end;

initialization
  begin
    Config := TIniFile.Create(sConfigFileName);
    CommandConf := TIniFile.Create(sCommandFileName);
    StringConf := TIniFile.Create(sStringFileName);
    ExpConf := TIniFile.Create(sExpConfigFileName);
    GlobalConf := TIniFile.Create(sGlobalFileName);
    Move(ColorArray, ColorTable, SizeOf(ColorArray));
{$IFDEF PLUGOPEN}
    nIPLocal := AddToPulgProcTable(DeCodeString('Z>Pq>mHDF^PbE<'), 0);
    nFriendModule := AddToPulgProcTable('SetFriend', 0);
{$ENDIF}
{$IFDEF RELEASE}
    LoadKernelFunction();
{$ENDIF}

  end;

finalization
  begin
    Config.Free;
    CommandConf.Free;
    StringConf.Free;
    ExpConf.Free;
    GlobalConf.Free;
  end;
end.

